!function(n){var c={};function t(r){if(c[r])return c[r].exports;var B=c[r]={i:r,l:!1,exports:{}};return n[r].call(B.exports,B,B.exports,t),B.l=!0,B.exports}t.m=n,t.c=c,t.d=function(n,c,r){t.o(n,c)||Object.defineProperty(n,c,{enumerable:!0,get:r})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,c){if(1&c&&(n=t(n)),8&c)return n;if(4&c&&"object"==typeof n&&n&&n.__esModule)return n;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:n}),2&c&&"string"!=typeof n)for(var B in n)t.d(r,B,function(c){return n[c]}.bind(null,B));return r},t.n=function(n){var c=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(c,"a",c),c},t.o=function(n,c){return Object.prototype.hasOwnProperty.call(n,c)},t.p="/public/",t(t.s=53)}([function(module,exports,__webpack_require__){eval("\r\n/**\r\n * Expose `Emitter`.\r\n */\r\n\r\nif (true) {\r\n  module.exports = Emitter;\r\n}\r\n\r\n/**\r\n * Initialize a new `Emitter`.\r\n *\r\n * @api public\r\n */\r\n\r\nfunction Emitter(obj) {\r\n  if (obj) return mixin(obj);\r\n};\r\n\r\n/**\r\n * Mixin the emitter properties.\r\n *\r\n * @param {Object} obj\r\n * @return {Object}\r\n * @api private\r\n */\r\n\r\nfunction mixin(obj) {\r\n  for (var key in Emitter.prototype) {\r\n    obj[key] = Emitter.prototype[key];\r\n  }\r\n  return obj;\r\n}\r\n\r\n/**\r\n * Listen on the given `event` with `fn`.\r\n *\r\n * @param {String} event\r\n * @param {Function} fn\r\n * @return {Emitter}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.on =\r\nEmitter.prototype.addEventListener = function(event, fn){\r\n  this._callbacks = this._callbacks || {};\r\n  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])\r\n    .push(fn);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Adds an `event` listener that will be invoked a single\r\n * time then automatically removed.\r\n *\r\n * @param {String} event\r\n * @param {Function} fn\r\n * @return {Emitter}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.once = function(event, fn){\r\n  function on() {\r\n    this.off(event, on);\r\n    fn.apply(this, arguments);\r\n  }\r\n\r\n  on.fn = fn;\r\n  this.on(event, on);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Remove the given callback for `event` or all\r\n * registered callbacks.\r\n *\r\n * @param {String} event\r\n * @param {Function} fn\r\n * @return {Emitter}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.off =\r\nEmitter.prototype.removeListener =\r\nEmitter.prototype.removeAllListeners =\r\nEmitter.prototype.removeEventListener = function(event, fn){\r\n  this._callbacks = this._callbacks || {};\r\n\r\n  // all\r\n  if (0 == arguments.length) {\r\n    this._callbacks = {};\r\n    return this;\r\n  }\r\n\r\n  // specific event\r\n  var callbacks = this._callbacks['$' + event];\r\n  if (!callbacks) return this;\r\n\r\n  // remove all handlers\r\n  if (1 == arguments.length) {\r\n    delete this._callbacks['$' + event];\r\n    return this;\r\n  }\r\n\r\n  // remove specific handler\r\n  var cb;\r\n  for (var i = 0; i < callbacks.length; i++) {\r\n    cb = callbacks[i];\r\n    if (cb === fn || cb.fn === fn) {\r\n      callbacks.splice(i, 1);\r\n      break;\r\n    }\r\n  }\r\n  return this;\r\n};\r\n\r\n/**\r\n * Emit `event` with the given args.\r\n *\r\n * @param {String} event\r\n * @param {Mixed} ...\r\n * @return {Emitter}\r\n */\r\n\r\nEmitter.prototype.emit = function(event){\r\n  this._callbacks = this._callbacks || {};\r\n  var args = [].slice.call(arguments, 1)\r\n    , callbacks = this._callbacks['$' + event];\r\n\r\n  if (callbacks) {\r\n    callbacks = callbacks.slice(0);\r\n    for (var i = 0, len = callbacks.length; i < len; ++i) {\r\n      callbacks[i].apply(this, args);\r\n    }\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Return array of callbacks for `event`.\r\n *\r\n * @param {String} event\r\n * @return {Array}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.listeners = function(event){\r\n  this._callbacks = this._callbacks || {};\r\n  return this._callbacks['$' + event] || [];\r\n};\r\n\r\n/**\r\n * Check if this emitter has `event` handlers.\r\n *\r\n * @param {String} event\r\n * @return {Boolean}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.hasListeners = function(event){\r\n  return !! this.listeners(event).length;\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnQtZW1pdHRlci9pbmRleC5qcz83Mjk3Il0sInNvdXJjZXNDb250ZW50IjpbIlxyXG4vKipcclxuICogRXhwb3NlIGBFbWl0dGVyYC5cclxuICovXHJcblxyXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICBtb2R1bGUuZXhwb3J0cyA9IEVtaXR0ZXI7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJbml0aWFsaXplIGEgbmV3IGBFbWl0dGVyYC5cclxuICpcclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5mdW5jdGlvbiBFbWl0dGVyKG9iaikge1xyXG4gIGlmIChvYmopIHJldHVybiBtaXhpbihvYmopO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIE1peGluIHRoZSBlbWl0dGVyIHByb3BlcnRpZXMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcclxuICogQHJldHVybiB7T2JqZWN0fVxyXG4gKiBAYXBpIHByaXZhdGVcclxuICovXHJcblxyXG5mdW5jdGlvbiBtaXhpbihvYmopIHtcclxuICBmb3IgKHZhciBrZXkgaW4gRW1pdHRlci5wcm90b3R5cGUpIHtcclxuICAgIG9ialtrZXldID0gRW1pdHRlci5wcm90b3R5cGVba2V5XTtcclxuICB9XHJcbiAgcmV0dXJuIG9iajtcclxufVxyXG5cclxuLyoqXHJcbiAqIExpc3RlbiBvbiB0aGUgZ2l2ZW4gYGV2ZW50YCB3aXRoIGBmbmAuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxyXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLm9uID1cclxuRW1pdHRlci5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50LCBmbil7XHJcbiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xyXG4gICh0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdID0gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XSB8fCBbXSlcclxuICAgIC5wdXNoKGZuKTtcclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBBZGRzIGFuIGBldmVudGAgbGlzdGVuZXIgdGhhdCB3aWxsIGJlIGludm9rZWQgYSBzaW5nbGVcclxuICogdGltZSB0aGVuIGF1dG9tYXRpY2FsbHkgcmVtb3ZlZC5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXHJcbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uKGV2ZW50LCBmbil7XHJcbiAgZnVuY3Rpb24gb24oKSB7XHJcbiAgICB0aGlzLm9mZihldmVudCwgb24pO1xyXG4gICAgZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICB9XHJcblxyXG4gIG9uLmZuID0gZm47XHJcbiAgdGhpcy5vbihldmVudCwgb24pO1xyXG4gIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJlbW92ZSB0aGUgZ2l2ZW4gY2FsbGJhY2sgZm9yIGBldmVudGAgb3IgYWxsXHJcbiAqIHJlZ2lzdGVyZWQgY2FsbGJhY2tzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cclxuICogQHJldHVybiB7RW1pdHRlcn1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5vZmYgPVxyXG5FbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9XHJcbkVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9XHJcbkVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCwgZm4pe1xyXG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcclxuXHJcbiAgLy8gYWxsXHJcbiAgaWYgKDAgPT0gYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgdGhpcy5fY2FsbGJhY2tzID0ge307XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIC8vIHNwZWNpZmljIGV2ZW50XHJcbiAgdmFyIGNhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF07XHJcbiAgaWYgKCFjYWxsYmFja3MpIHJldHVybiB0aGlzO1xyXG5cclxuICAvLyByZW1vdmUgYWxsIGhhbmRsZXJzXHJcbiAgaWYgKDEgPT0gYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgZGVsZXRlIHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF07XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIC8vIHJlbW92ZSBzcGVjaWZpYyBoYW5kbGVyXHJcbiAgdmFyIGNiO1xyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBjYiA9IGNhbGxiYWNrc1tpXTtcclxuICAgIGlmIChjYiA9PT0gZm4gfHwgY2IuZm4gPT09IGZuKSB7XHJcbiAgICAgIGNhbGxiYWNrcy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBFbWl0IGBldmVudGAgd2l0aCB0aGUgZ2l2ZW4gYXJncy5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEBwYXJhbSB7TWl4ZWR9IC4uLlxyXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbihldmVudCl7XHJcbiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xyXG4gIHZhciBhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpXHJcbiAgICAsIGNhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF07XHJcblxyXG4gIGlmIChjYWxsYmFja3MpIHtcclxuICAgIGNhbGxiYWNrcyA9IGNhbGxiYWNrcy5zbGljZSgwKTtcclxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBjYWxsYmFja3MubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcclxuICAgICAgY2FsbGJhY2tzW2ldLmFwcGx5KHRoaXMsIGFyZ3MpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogUmV0dXJuIGFycmF5IG9mIGNhbGxiYWNrcyBmb3IgYGV2ZW50YC5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEByZXR1cm4ge0FycmF5fVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uKGV2ZW50KXtcclxuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XHJcbiAgcmV0dXJuIHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF0gfHwgW107XHJcbn07XHJcblxyXG4vKipcclxuICogQ2hlY2sgaWYgdGhpcyBlbWl0dGVyIGhhcyBgZXZlbnRgIGhhbmRsZXJzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHJldHVybiB7Qm9vbGVhbn1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5oYXNMaXN0ZW5lcnMgPSBmdW5jdGlvbihldmVudCl7XHJcbiAgcmV0dXJuICEhIHRoaXMubGlzdGVuZXJzKGV2ZW50KS5sZW5ndGg7XHJcbn07XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n")},function(module,exports,__webpack_require__){eval("/**\r\n * Module dependencies.\r\n */\r\n\r\nvar keys = __webpack_require__(39);\r\nvar hasBinary = __webpack_require__(18);\r\nvar sliceBuffer = __webpack_require__(41);\r\nvar after = __webpack_require__(42);\r\nvar utf8 = __webpack_require__(43);\r\n\r\nvar base64encoder;\r\nif (typeof ArrayBuffer !== 'undefined') {\r\n  base64encoder = __webpack_require__(44);\r\n}\r\n\r\n/**\r\n * Check if we are running an android browser. That requires us to use\r\n * ArrayBuffer with polling transports...\r\n *\r\n * http://ghinda.net/jpeg-blob-ajax-android/\r\n */\r\n\r\nvar isAndroid = typeof navigator !== 'undefined' && /Android/i.test(navigator.userAgent);\r\n\r\n/**\r\n * Check if we are running in PhantomJS.\r\n * Uploading a Blob with PhantomJS does not work correctly, as reported here:\r\n * https://github.com/ariya/phantomjs/issues/11395\r\n * @type boolean\r\n */\r\nvar isPhantomJS = typeof navigator !== 'undefined' && /PhantomJS/i.test(navigator.userAgent);\r\n\r\n/**\r\n * When true, avoids using Blobs to encode payloads.\r\n * @type boolean\r\n */\r\nvar dontSendBlobs = isAndroid || isPhantomJS;\r\n\r\n/**\r\n * Current protocol version.\r\n */\r\n\r\nexports.protocol = 3;\r\n\r\n/**\r\n * Packet types.\r\n */\r\n\r\nvar packets = exports.packets = {\r\n    open:     0    // non-ws\r\n  , close:    1    // non-ws\r\n  , ping:     2\r\n  , pong:     3\r\n  , message:  4\r\n  , upgrade:  5\r\n  , noop:     6\r\n};\r\n\r\nvar packetslist = keys(packets);\r\n\r\n/**\r\n * Premade error packet.\r\n */\r\n\r\nvar err = { type: 'error', data: 'parser error' };\r\n\r\n/**\r\n * Create a blob api even for blob builder when vendor prefixes exist\r\n */\r\n\r\nvar Blob = __webpack_require__(45);\r\n\r\n/**\r\n * Encodes a packet.\r\n *\r\n *     <packet type id> [ <data> ]\r\n *\r\n * Example:\r\n *\r\n *     5hello world\r\n *     3\r\n *     4\r\n *\r\n * Binary is encoded in an identical principle\r\n *\r\n * @api private\r\n */\r\n\r\nexports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {\r\n  if (typeof supportsBinary === 'function') {\r\n    callback = supportsBinary;\r\n    supportsBinary = false;\r\n  }\r\n\r\n  if (typeof utf8encode === 'function') {\r\n    callback = utf8encode;\r\n    utf8encode = null;\r\n  }\r\n\r\n  var data = (packet.data === undefined)\r\n    ? undefined\r\n    : packet.data.buffer || packet.data;\r\n\r\n  if (typeof ArrayBuffer !== 'undefined' && data instanceof ArrayBuffer) {\r\n    return encodeArrayBuffer(packet, supportsBinary, callback);\r\n  } else if (typeof Blob !== 'undefined' && data instanceof Blob) {\r\n    return encodeBlob(packet, supportsBinary, callback);\r\n  }\r\n\r\n  // might be an object with { base64: true, data: dataAsBase64String }\r\n  if (data && data.base64) {\r\n    return encodeBase64Object(packet, callback);\r\n  }\r\n\r\n  // Sending data as a utf-8 string\r\n  var encoded = packets[packet.type];\r\n\r\n  // data fragment is optional\r\n  if (undefined !== packet.data) {\r\n    encoded += utf8encode ? utf8.encode(String(packet.data), { strict: false }) : String(packet.data);\r\n  }\r\n\r\n  return callback('' + encoded);\r\n\r\n};\r\n\r\nfunction encodeBase64Object(packet, callback) {\r\n  // packet data is an object { base64: true, data: dataAsBase64String }\r\n  var message = 'b' + exports.packets[packet.type] + packet.data.data;\r\n  return callback(message);\r\n}\r\n\r\n/**\r\n * Encode packet helpers for binary types\r\n */\r\n\r\nfunction encodeArrayBuffer(packet, supportsBinary, callback) {\r\n  if (!supportsBinary) {\r\n    return exports.encodeBase64Packet(packet, callback);\r\n  }\r\n\r\n  var data = packet.data;\r\n  var contentArray = new Uint8Array(data);\r\n  var resultBuffer = new Uint8Array(1 + data.byteLength);\r\n\r\n  resultBuffer[0] = packets[packet.type];\r\n  for (var i = 0; i < contentArray.length; i++) {\r\n    resultBuffer[i+1] = contentArray[i];\r\n  }\r\n\r\n  return callback(resultBuffer.buffer);\r\n}\r\n\r\nfunction encodeBlobAsArrayBuffer(packet, supportsBinary, callback) {\r\n  if (!supportsBinary) {\r\n    return exports.encodeBase64Packet(packet, callback);\r\n  }\r\n\r\n  var fr = new FileReader();\r\n  fr.onload = function() {\r\n    exports.encodePacket({ type: packet.type, data: fr.result }, supportsBinary, true, callback);\r\n  };\r\n  return fr.readAsArrayBuffer(packet.data);\r\n}\r\n\r\nfunction encodeBlob(packet, supportsBinary, callback) {\r\n  if (!supportsBinary) {\r\n    return exports.encodeBase64Packet(packet, callback);\r\n  }\r\n\r\n  if (dontSendBlobs) {\r\n    return encodeBlobAsArrayBuffer(packet, supportsBinary, callback);\r\n  }\r\n\r\n  var length = new Uint8Array(1);\r\n  length[0] = packets[packet.type];\r\n  var blob = new Blob([length.buffer, packet.data]);\r\n\r\n  return callback(blob);\r\n}\r\n\r\n/**\r\n * Encodes a packet with binary data in a base64 string\r\n *\r\n * @param {Object} packet, has `type` and `data`\r\n * @return {String} base64 encoded message\r\n */\r\n\r\nexports.encodeBase64Packet = function(packet, callback) {\r\n  var message = 'b' + exports.packets[packet.type];\r\n  if (typeof Blob !== 'undefined' && packet.data instanceof Blob) {\r\n    var fr = new FileReader();\r\n    fr.onload = function() {\r\n      var b64 = fr.result.split(',')[1];\r\n      callback(message + b64);\r\n    };\r\n    return fr.readAsDataURL(packet.data);\r\n  }\r\n\r\n  var b64data;\r\n  try {\r\n    b64data = String.fromCharCode.apply(null, new Uint8Array(packet.data));\r\n  } catch (e) {\r\n    // iPhone Safari doesn't let you apply with typed arrays\r\n    var typed = new Uint8Array(packet.data);\r\n    var basic = new Array(typed.length);\r\n    for (var i = 0; i < typed.length; i++) {\r\n      basic[i] = typed[i];\r\n    }\r\n    b64data = String.fromCharCode.apply(null, basic);\r\n  }\r\n  message += btoa(b64data);\r\n  return callback(message);\r\n};\r\n\r\n/**\r\n * Decodes a packet. Changes format to Blob if requested.\r\n *\r\n * @return {Object} with `type` and `data` (if any)\r\n * @api private\r\n */\r\n\r\nexports.decodePacket = function (data, binaryType, utf8decode) {\r\n  if (data === undefined) {\r\n    return err;\r\n  }\r\n  // String data\r\n  if (typeof data === 'string') {\r\n    if (data.charAt(0) === 'b') {\r\n      return exports.decodeBase64Packet(data.substr(1), binaryType);\r\n    }\r\n\r\n    if (utf8decode) {\r\n      data = tryDecode(data);\r\n      if (data === false) {\r\n        return err;\r\n      }\r\n    }\r\n    var type = data.charAt(0);\r\n\r\n    if (Number(type) != type || !packetslist[type]) {\r\n      return err;\r\n    }\r\n\r\n    if (data.length > 1) {\r\n      return { type: packetslist[type], data: data.substring(1) };\r\n    } else {\r\n      return { type: packetslist[type] };\r\n    }\r\n  }\r\n\r\n  var asArray = new Uint8Array(data);\r\n  var type = asArray[0];\r\n  var rest = sliceBuffer(data, 1);\r\n  if (Blob && binaryType === 'blob') {\r\n    rest = new Blob([rest]);\r\n  }\r\n  return { type: packetslist[type], data: rest };\r\n};\r\n\r\nfunction tryDecode(data) {\r\n  try {\r\n    data = utf8.decode(data, { strict: false });\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n  return data;\r\n}\r\n\r\n/**\r\n * Decodes a packet encoded in a base64 string\r\n *\r\n * @param {String} base64 encoded message\r\n * @return {Object} with `type` and `data` (if any)\r\n */\r\n\r\nexports.decodeBase64Packet = function(msg, binaryType) {\r\n  var type = packetslist[msg.charAt(0)];\r\n  if (!base64encoder) {\r\n    return { type: type, data: { base64: true, data: msg.substr(1) } };\r\n  }\r\n\r\n  var data = base64encoder.decode(msg.substr(1));\r\n\r\n  if (binaryType === 'blob' && Blob) {\r\n    data = new Blob([data]);\r\n  }\r\n\r\n  return { type: type, data: data };\r\n};\r\n\r\n/**\r\n * Encodes multiple messages (payload).\r\n *\r\n *     <length>:data\r\n *\r\n * Example:\r\n *\r\n *     11:hello world2:hi\r\n *\r\n * If any contents are binary, they will be encoded as base64 strings. Base64\r\n * encoded strings are marked with a b before the length specifier\r\n *\r\n * @param {Array} packets\r\n * @api private\r\n */\r\n\r\nexports.encodePayload = function (packets, supportsBinary, callback) {\r\n  if (typeof supportsBinary === 'function') {\r\n    callback = supportsBinary;\r\n    supportsBinary = null;\r\n  }\r\n\r\n  var isBinary = hasBinary(packets);\r\n\r\n  if (supportsBinary && isBinary) {\r\n    if (Blob && !dontSendBlobs) {\r\n      return exports.encodePayloadAsBlob(packets, callback);\r\n    }\r\n\r\n    return exports.encodePayloadAsArrayBuffer(packets, callback);\r\n  }\r\n\r\n  if (!packets.length) {\r\n    return callback('0:');\r\n  }\r\n\r\n  function setLengthHeader(message) {\r\n    return message.length + ':' + message;\r\n  }\r\n\r\n  function encodeOne(packet, doneCallback) {\r\n    exports.encodePacket(packet, !isBinary ? false : supportsBinary, false, function(message) {\r\n      doneCallback(null, setLengthHeader(message));\r\n    });\r\n  }\r\n\r\n  map(packets, encodeOne, function(err, results) {\r\n    return callback(results.join(''));\r\n  });\r\n};\r\n\r\n/**\r\n * Async array map using after\r\n */\r\n\r\nfunction map(ary, each, done) {\r\n  var result = new Array(ary.length);\r\n  var next = after(ary.length, done);\r\n\r\n  var eachWithIndex = function(i, el, cb) {\r\n    each(el, function(error, msg) {\r\n      result[i] = msg;\r\n      cb(error, result);\r\n    });\r\n  };\r\n\r\n  for (var i = 0; i < ary.length; i++) {\r\n    eachWithIndex(i, ary[i], next);\r\n  }\r\n}\r\n\r\n/*\r\n * Decodes data when a payload is maybe expected. Possible binary contents are\r\n * decoded from their base64 representation\r\n *\r\n * @param {String} data, callback method\r\n * @api public\r\n */\r\n\r\nexports.decodePayload = function (data, binaryType, callback) {\r\n  if (typeof data !== 'string') {\r\n    return exports.decodePayloadAsBinary(data, binaryType, callback);\r\n  }\r\n\r\n  if (typeof binaryType === 'function') {\r\n    callback = binaryType;\r\n    binaryType = null;\r\n  }\r\n\r\n  var packet;\r\n  if (data === '') {\r\n    // parser error - ignoring payload\r\n    return callback(err, 0, 1);\r\n  }\r\n\r\n  var length = '', n, msg;\r\n\r\n  for (var i = 0, l = data.length; i < l; i++) {\r\n    var chr = data.charAt(i);\r\n\r\n    if (chr !== ':') {\r\n      length += chr;\r\n      continue;\r\n    }\r\n\r\n    if (length === '' || (length != (n = Number(length)))) {\r\n      // parser error - ignoring payload\r\n      return callback(err, 0, 1);\r\n    }\r\n\r\n    msg = data.substr(i + 1, n);\r\n\r\n    if (length != msg.length) {\r\n      // parser error - ignoring payload\r\n      return callback(err, 0, 1);\r\n    }\r\n\r\n    if (msg.length) {\r\n      packet = exports.decodePacket(msg, binaryType, false);\r\n\r\n      if (err.type === packet.type && err.data === packet.data) {\r\n        // parser error in individual packet - ignoring payload\r\n        return callback(err, 0, 1);\r\n      }\r\n\r\n      var ret = callback(packet, i + n, l);\r\n      if (false === ret) return;\r\n    }\r\n\r\n    // advance cursor\r\n    i += n;\r\n    length = '';\r\n  }\r\n\r\n  if (length !== '') {\r\n    // parser error - ignoring payload\r\n    return callback(err, 0, 1);\r\n  }\r\n\r\n};\r\n\r\n/**\r\n * Encodes multiple messages (payload) as binary.\r\n *\r\n * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number\r\n * 255><data>\r\n *\r\n * Example:\r\n * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers\r\n *\r\n * @param {Array} packets\r\n * @return {ArrayBuffer} encoded payload\r\n * @api private\r\n */\r\n\r\nexports.encodePayloadAsArrayBuffer = function(packets, callback) {\r\n  if (!packets.length) {\r\n    return callback(new ArrayBuffer(0));\r\n  }\r\n\r\n  function encodeOne(packet, doneCallback) {\r\n    exports.encodePacket(packet, true, true, function(data) {\r\n      return doneCallback(null, data);\r\n    });\r\n  }\r\n\r\n  map(packets, encodeOne, function(err, encodedPackets) {\r\n    var totalLength = encodedPackets.reduce(function(acc, p) {\r\n      var len;\r\n      if (typeof p === 'string'){\r\n        len = p.length;\r\n      } else {\r\n        len = p.byteLength;\r\n      }\r\n      return acc + len.toString().length + len + 2; // string/binary identifier + separator = 2\r\n    }, 0);\r\n\r\n    var resultArray = new Uint8Array(totalLength);\r\n\r\n    var bufferIndex = 0;\r\n    encodedPackets.forEach(function(p) {\r\n      var isString = typeof p === 'string';\r\n      var ab = p;\r\n      if (isString) {\r\n        var view = new Uint8Array(p.length);\r\n        for (var i = 0; i < p.length; i++) {\r\n          view[i] = p.charCodeAt(i);\r\n        }\r\n        ab = view.buffer;\r\n      }\r\n\r\n      if (isString) { // not true binary\r\n        resultArray[bufferIndex++] = 0;\r\n      } else { // true binary\r\n        resultArray[bufferIndex++] = 1;\r\n      }\r\n\r\n      var lenStr = ab.byteLength.toString();\r\n      for (var i = 0; i < lenStr.length; i++) {\r\n        resultArray[bufferIndex++] = parseInt(lenStr[i]);\r\n      }\r\n      resultArray[bufferIndex++] = 255;\r\n\r\n      var view = new Uint8Array(ab);\r\n      for (var i = 0; i < view.length; i++) {\r\n        resultArray[bufferIndex++] = view[i];\r\n      }\r\n    });\r\n\r\n    return callback(resultArray.buffer);\r\n  });\r\n};\r\n\r\n/**\r\n * Encode as Blob\r\n */\r\n\r\nexports.encodePayloadAsBlob = function(packets, callback) {\r\n  function encodeOne(packet, doneCallback) {\r\n    exports.encodePacket(packet, true, true, function(encoded) {\r\n      var binaryIdentifier = new Uint8Array(1);\r\n      binaryIdentifier[0] = 1;\r\n      if (typeof encoded === 'string') {\r\n        var view = new Uint8Array(encoded.length);\r\n        for (var i = 0; i < encoded.length; i++) {\r\n          view[i] = encoded.charCodeAt(i);\r\n        }\r\n        encoded = view.buffer;\r\n        binaryIdentifier[0] = 0;\r\n      }\r\n\r\n      var len = (encoded instanceof ArrayBuffer)\r\n        ? encoded.byteLength\r\n        : encoded.size;\r\n\r\n      var lenStr = len.toString();\r\n      var lengthAry = new Uint8Array(lenStr.length + 1);\r\n      for (var i = 0; i < lenStr.length; i++) {\r\n        lengthAry[i] = parseInt(lenStr[i]);\r\n      }\r\n      lengthAry[lenStr.length] = 255;\r\n\r\n      if (Blob) {\r\n        var blob = new Blob([binaryIdentifier.buffer, lengthAry.buffer, encoded]);\r\n        doneCallback(null, blob);\r\n      }\r\n    });\r\n  }\r\n\r\n  map(packets, encodeOne, function(err, results) {\r\n    return callback(new Blob(results));\r\n  });\r\n};\r\n\r\n/*\r\n * Decodes data when a payload is maybe expected. Strings are decoded by\r\n * interpreting each byte as a key code for entries marked to start with 0. See\r\n * description of encodePayloadAsBinary\r\n *\r\n * @param {ArrayBuffer} data, callback method\r\n * @api public\r\n */\r\n\r\nexports.decodePayloadAsBinary = function (data, binaryType, callback) {\r\n  if (typeof binaryType === 'function') {\r\n    callback = binaryType;\r\n    binaryType = null;\r\n  }\r\n\r\n  var bufferTail = data;\r\n  var buffers = [];\r\n\r\n  while (bufferTail.byteLength > 0) {\r\n    var tailArray = new Uint8Array(bufferTail);\r\n    var isString = tailArray[0] === 0;\r\n    var msgLength = '';\r\n\r\n    for (var i = 1; ; i++) {\r\n      if (tailArray[i] === 255) break;\r\n\r\n      // 310 = char length of Number.MAX_VALUE\r\n      if (msgLength.length > 310) {\r\n        return callback(err, 0, 1);\r\n      }\r\n\r\n      msgLength += tailArray[i];\r\n    }\r\n\r\n    bufferTail = sliceBuffer(bufferTail, 2 + msgLength.length);\r\n    msgLength = parseInt(msgLength);\r\n\r\n    var msg = sliceBuffer(bufferTail, 0, msgLength);\r\n    if (isString) {\r\n      try {\r\n        msg = String.fromCharCode.apply(null, new Uint8Array(msg));\r\n      } catch (e) {\r\n        // iPhone Safari doesn't let you apply to typed arrays\r\n        var typed = new Uint8Array(msg);\r\n        msg = '';\r\n        for (var i = 0; i < typed.length; i++) {\r\n          msg += String.fromCharCode(typed[i]);\r\n        }\r\n      }\r\n    }\r\n\r\n    buffers.push(msg);\r\n    bufferTail = sliceBuffer(bufferTail, msgLength);\r\n  }\r\n\r\n  var total = buffers.length;\r\n  buffers.forEach(function(buffer, i) {\r\n    callback(exports.decodePacket(buffer, binaryType, true), i, total);\r\n  });\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tcGFyc2VyL2xpYi9icm93c2VyLmpzPzVhNmUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXHJcbiAqL1xyXG5cclxudmFyIGtleXMgPSByZXF1aXJlKCcuL2tleXMnKTtcclxudmFyIGhhc0JpbmFyeSA9IHJlcXVpcmUoJ2hhcy1iaW5hcnkyJyk7XHJcbnZhciBzbGljZUJ1ZmZlciA9IHJlcXVpcmUoJ2FycmF5YnVmZmVyLnNsaWNlJyk7XHJcbnZhciBhZnRlciA9IHJlcXVpcmUoJ2FmdGVyJyk7XHJcbnZhciB1dGY4ID0gcmVxdWlyZSgnLi91dGY4Jyk7XHJcblxyXG52YXIgYmFzZTY0ZW5jb2RlcjtcclxuaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICBiYXNlNjRlbmNvZGVyID0gcmVxdWlyZSgnYmFzZTY0LWFycmF5YnVmZmVyJyk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDaGVjayBpZiB3ZSBhcmUgcnVubmluZyBhbiBhbmRyb2lkIGJyb3dzZXIuIFRoYXQgcmVxdWlyZXMgdXMgdG8gdXNlXHJcbiAqIEFycmF5QnVmZmVyIHdpdGggcG9sbGluZyB0cmFuc3BvcnRzLi4uXHJcbiAqXHJcbiAqIGh0dHA6Ly9naGluZGEubmV0L2pwZWctYmxvYi1hamF4LWFuZHJvaWQvXHJcbiAqL1xyXG5cclxudmFyIGlzQW5kcm9pZCA9IHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIC9BbmRyb2lkL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcclxuXHJcbi8qKlxyXG4gKiBDaGVjayBpZiB3ZSBhcmUgcnVubmluZyBpbiBQaGFudG9tSlMuXHJcbiAqIFVwbG9hZGluZyBhIEJsb2Igd2l0aCBQaGFudG9tSlMgZG9lcyBub3Qgd29yayBjb3JyZWN0bHksIGFzIHJlcG9ydGVkIGhlcmU6XHJcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hcml5YS9waGFudG9tanMvaXNzdWVzLzExMzk1XHJcbiAqIEB0eXBlIGJvb2xlYW5cclxuICovXHJcbnZhciBpc1BoYW50b21KUyA9IHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIC9QaGFudG9tSlMvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xyXG5cclxuLyoqXHJcbiAqIFdoZW4gdHJ1ZSwgYXZvaWRzIHVzaW5nIEJsb2JzIHRvIGVuY29kZSBwYXlsb2Fkcy5cclxuICogQHR5cGUgYm9vbGVhblxyXG4gKi9cclxudmFyIGRvbnRTZW5kQmxvYnMgPSBpc0FuZHJvaWQgfHwgaXNQaGFudG9tSlM7XHJcblxyXG4vKipcclxuICogQ3VycmVudCBwcm90b2NvbCB2ZXJzaW9uLlxyXG4gKi9cclxuXHJcbmV4cG9ydHMucHJvdG9jb2wgPSAzO1xyXG5cclxuLyoqXHJcbiAqIFBhY2tldCB0eXBlcy5cclxuICovXHJcblxyXG52YXIgcGFja2V0cyA9IGV4cG9ydHMucGFja2V0cyA9IHtcclxuICAgIG9wZW46ICAgICAwICAgIC8vIG5vbi13c1xyXG4gICwgY2xvc2U6ICAgIDEgICAgLy8gbm9uLXdzXHJcbiAgLCBwaW5nOiAgICAgMlxyXG4gICwgcG9uZzogICAgIDNcclxuICAsIG1lc3NhZ2U6ICA0XHJcbiAgLCB1cGdyYWRlOiAgNVxyXG4gICwgbm9vcDogICAgIDZcclxufTtcclxuXHJcbnZhciBwYWNrZXRzbGlzdCA9IGtleXMocGFja2V0cyk7XHJcblxyXG4vKipcclxuICogUHJlbWFkZSBlcnJvciBwYWNrZXQuXHJcbiAqL1xyXG5cclxudmFyIGVyciA9IHsgdHlwZTogJ2Vycm9yJywgZGF0YTogJ3BhcnNlciBlcnJvcicgfTtcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGUgYSBibG9iIGFwaSBldmVuIGZvciBibG9iIGJ1aWxkZXIgd2hlbiB2ZW5kb3IgcHJlZml4ZXMgZXhpc3RcclxuICovXHJcblxyXG52YXIgQmxvYiA9IHJlcXVpcmUoJ2Jsb2InKTtcclxuXHJcbi8qKlxyXG4gKiBFbmNvZGVzIGEgcGFja2V0LlxyXG4gKlxyXG4gKiAgICAgPHBhY2tldCB0eXBlIGlkPiBbIDxkYXRhPiBdXHJcbiAqXHJcbiAqIEV4YW1wbGU6XHJcbiAqXHJcbiAqICAgICA1aGVsbG8gd29ybGRcclxuICogICAgIDNcclxuICogICAgIDRcclxuICpcclxuICogQmluYXJ5IGlzIGVuY29kZWQgaW4gYW4gaWRlbnRpY2FsIHByaW5jaXBsZVxyXG4gKlxyXG4gKiBAYXBpIHByaXZhdGVcclxuICovXHJcblxyXG5leHBvcnRzLmVuY29kZVBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQsIHN1cHBvcnRzQmluYXJ5LCB1dGY4ZW5jb2RlLCBjYWxsYmFjaykge1xyXG4gIGlmICh0eXBlb2Ygc3VwcG9ydHNCaW5hcnkgPT09ICdmdW5jdGlvbicpIHtcclxuICAgIGNhbGxiYWNrID0gc3VwcG9ydHNCaW5hcnk7XHJcbiAgICBzdXBwb3J0c0JpbmFyeSA9IGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgaWYgKHR5cGVvZiB1dGY4ZW5jb2RlID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICBjYWxsYmFjayA9IHV0ZjhlbmNvZGU7XHJcbiAgICB1dGY4ZW5jb2RlID0gbnVsbDtcclxuICB9XHJcblxyXG4gIHZhciBkYXRhID0gKHBhY2tldC5kYXRhID09PSB1bmRlZmluZWQpXHJcbiAgICA/IHVuZGVmaW5lZFxyXG4gICAgOiBwYWNrZXQuZGF0YS5idWZmZXIgfHwgcGFja2V0LmRhdGE7XHJcblxyXG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIGRhdGEgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xyXG4gICAgcmV0dXJuIGVuY29kZUFycmF5QnVmZmVyKHBhY2tldCwgc3VwcG9ydHNCaW5hcnksIGNhbGxiYWNrKTtcclxuICB9IGVsc2UgaWYgKHR5cGVvZiBCbG9iICE9PSAndW5kZWZpbmVkJyAmJiBkYXRhIGluc3RhbmNlb2YgQmxvYikge1xyXG4gICAgcmV0dXJuIGVuY29kZUJsb2IocGFja2V0LCBzdXBwb3J0c0JpbmFyeSwgY2FsbGJhY2spO1xyXG4gIH1cclxuXHJcbiAgLy8gbWlnaHQgYmUgYW4gb2JqZWN0IHdpdGggeyBiYXNlNjQ6IHRydWUsIGRhdGE6IGRhdGFBc0Jhc2U2NFN0cmluZyB9XHJcbiAgaWYgKGRhdGEgJiYgZGF0YS5iYXNlNjQpIHtcclxuICAgIHJldHVybiBlbmNvZGVCYXNlNjRPYmplY3QocGFja2V0LCBjYWxsYmFjayk7XHJcbiAgfVxyXG5cclxuICAvLyBTZW5kaW5nIGRhdGEgYXMgYSB1dGYtOCBzdHJpbmdcclxuICB2YXIgZW5jb2RlZCA9IHBhY2tldHNbcGFja2V0LnR5cGVdO1xyXG5cclxuICAvLyBkYXRhIGZyYWdtZW50IGlzIG9wdGlvbmFsXHJcbiAgaWYgKHVuZGVmaW5lZCAhPT0gcGFja2V0LmRhdGEpIHtcclxuICAgIGVuY29kZWQgKz0gdXRmOGVuY29kZSA/IHV0ZjguZW5jb2RlKFN0cmluZyhwYWNrZXQuZGF0YSksIHsgc3RyaWN0OiBmYWxzZSB9KSA6IFN0cmluZyhwYWNrZXQuZGF0YSk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gY2FsbGJhY2soJycgKyBlbmNvZGVkKTtcclxuXHJcbn07XHJcblxyXG5mdW5jdGlvbiBlbmNvZGVCYXNlNjRPYmplY3QocGFja2V0LCBjYWxsYmFjaykge1xyXG4gIC8vIHBhY2tldCBkYXRhIGlzIGFuIG9iamVjdCB7IGJhc2U2NDogdHJ1ZSwgZGF0YTogZGF0YUFzQmFzZTY0U3RyaW5nIH1cclxuICB2YXIgbWVzc2FnZSA9ICdiJyArIGV4cG9ydHMucGFja2V0c1twYWNrZXQudHlwZV0gKyBwYWNrZXQuZGF0YS5kYXRhO1xyXG4gIHJldHVybiBjYWxsYmFjayhtZXNzYWdlKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEVuY29kZSBwYWNrZXQgaGVscGVycyBmb3IgYmluYXJ5IHR5cGVzXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gZW5jb2RlQXJyYXlCdWZmZXIocGFja2V0LCBzdXBwb3J0c0JpbmFyeSwgY2FsbGJhY2spIHtcclxuICBpZiAoIXN1cHBvcnRzQmluYXJ5KSB7XHJcbiAgICByZXR1cm4gZXhwb3J0cy5lbmNvZGVCYXNlNjRQYWNrZXQocGFja2V0LCBjYWxsYmFjayk7XHJcbiAgfVxyXG5cclxuICB2YXIgZGF0YSA9IHBhY2tldC5kYXRhO1xyXG4gIHZhciBjb250ZW50QXJyYXkgPSBuZXcgVWludDhBcnJheShkYXRhKTtcclxuICB2YXIgcmVzdWx0QnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoMSArIGRhdGEuYnl0ZUxlbmd0aCk7XHJcblxyXG4gIHJlc3VsdEJ1ZmZlclswXSA9IHBhY2tldHNbcGFja2V0LnR5cGVdO1xyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY29udGVudEFycmF5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICByZXN1bHRCdWZmZXJbaSsxXSA9IGNvbnRlbnRBcnJheVtpXTtcclxuICB9XHJcblxyXG4gIHJldHVybiBjYWxsYmFjayhyZXN1bHRCdWZmZXIuYnVmZmVyKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZW5jb2RlQmxvYkFzQXJyYXlCdWZmZXIocGFja2V0LCBzdXBwb3J0c0JpbmFyeSwgY2FsbGJhY2spIHtcclxuICBpZiAoIXN1cHBvcnRzQmluYXJ5KSB7XHJcbiAgICByZXR1cm4gZXhwb3J0cy5lbmNvZGVCYXNlNjRQYWNrZXQocGFja2V0LCBjYWxsYmFjayk7XHJcbiAgfVxyXG5cclxuICB2YXIgZnIgPSBuZXcgRmlsZVJlYWRlcigpO1xyXG4gIGZyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgZXhwb3J0cy5lbmNvZGVQYWNrZXQoeyB0eXBlOiBwYWNrZXQudHlwZSwgZGF0YTogZnIucmVzdWx0IH0sIHN1cHBvcnRzQmluYXJ5LCB0cnVlLCBjYWxsYmFjayk7XHJcbiAgfTtcclxuICByZXR1cm4gZnIucmVhZEFzQXJyYXlCdWZmZXIocGFja2V0LmRhdGEpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBlbmNvZGVCbG9iKHBhY2tldCwgc3VwcG9ydHNCaW5hcnksIGNhbGxiYWNrKSB7XHJcbiAgaWYgKCFzdXBwb3J0c0JpbmFyeSkge1xyXG4gICAgcmV0dXJuIGV4cG9ydHMuZW5jb2RlQmFzZTY0UGFja2V0KHBhY2tldCwgY2FsbGJhY2spO1xyXG4gIH1cclxuXHJcbiAgaWYgKGRvbnRTZW5kQmxvYnMpIHtcclxuICAgIHJldHVybiBlbmNvZGVCbG9iQXNBcnJheUJ1ZmZlcihwYWNrZXQsIHN1cHBvcnRzQmluYXJ5LCBjYWxsYmFjayk7XHJcbiAgfVxyXG5cclxuICB2YXIgbGVuZ3RoID0gbmV3IFVpbnQ4QXJyYXkoMSk7XHJcbiAgbGVuZ3RoWzBdID0gcGFja2V0c1twYWNrZXQudHlwZV07XHJcbiAgdmFyIGJsb2IgPSBuZXcgQmxvYihbbGVuZ3RoLmJ1ZmZlciwgcGFja2V0LmRhdGFdKTtcclxuXHJcbiAgcmV0dXJuIGNhbGxiYWNrKGJsb2IpO1xyXG59XHJcblxyXG4vKipcclxuICogRW5jb2RlcyBhIHBhY2tldCB3aXRoIGJpbmFyeSBkYXRhIGluIGEgYmFzZTY0IHN0cmluZ1xyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0LCBoYXMgYHR5cGVgIGFuZCBgZGF0YWBcclxuICogQHJldHVybiB7U3RyaW5nfSBiYXNlNjQgZW5jb2RlZCBtZXNzYWdlXHJcbiAqL1xyXG5cclxuZXhwb3J0cy5lbmNvZGVCYXNlNjRQYWNrZXQgPSBmdW5jdGlvbihwYWNrZXQsIGNhbGxiYWNrKSB7XHJcbiAgdmFyIG1lc3NhZ2UgPSAnYicgKyBleHBvcnRzLnBhY2tldHNbcGFja2V0LnR5cGVdO1xyXG4gIGlmICh0eXBlb2YgQmxvYiAhPT0gJ3VuZGVmaW5lZCcgJiYgcGFja2V0LmRhdGEgaW5zdGFuY2VvZiBCbG9iKSB7XHJcbiAgICB2YXIgZnIgPSBuZXcgRmlsZVJlYWRlcigpO1xyXG4gICAgZnIub25sb2FkID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZhciBiNjQgPSBmci5yZXN1bHQuc3BsaXQoJywnKVsxXTtcclxuICAgICAgY2FsbGJhY2sobWVzc2FnZSArIGI2NCk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGZyLnJlYWRBc0RhdGFVUkwocGFja2V0LmRhdGEpO1xyXG4gIH1cclxuXHJcbiAgdmFyIGI2NGRhdGE7XHJcbiAgdHJ5IHtcclxuICAgIGI2NGRhdGEgPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIG5ldyBVaW50OEFycmF5KHBhY2tldC5kYXRhKSk7XHJcbiAgfSBjYXRjaCAoZSkge1xyXG4gICAgLy8gaVBob25lIFNhZmFyaSBkb2Vzbid0IGxldCB5b3UgYXBwbHkgd2l0aCB0eXBlZCBhcnJheXNcclxuICAgIHZhciB0eXBlZCA9IG5ldyBVaW50OEFycmF5KHBhY2tldC5kYXRhKTtcclxuICAgIHZhciBiYXNpYyA9IG5ldyBBcnJheSh0eXBlZC5sZW5ndGgpO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlZC5sZW5ndGg7IGkrKykge1xyXG4gICAgICBiYXNpY1tpXSA9IHR5cGVkW2ldO1xyXG4gICAgfVxyXG4gICAgYjY0ZGF0YSA9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgYmFzaWMpO1xyXG4gIH1cclxuICBtZXNzYWdlICs9IGJ0b2EoYjY0ZGF0YSk7XHJcbiAgcmV0dXJuIGNhbGxiYWNrKG1lc3NhZ2UpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIERlY29kZXMgYSBwYWNrZXQuIENoYW5nZXMgZm9ybWF0IHRvIEJsb2IgaWYgcmVxdWVzdGVkLlxyXG4gKlxyXG4gKiBAcmV0dXJuIHtPYmplY3R9IHdpdGggYHR5cGVgIGFuZCBgZGF0YWAgKGlmIGFueSlcclxuICogQGFwaSBwcml2YXRlXHJcbiAqL1xyXG5cclxuZXhwb3J0cy5kZWNvZGVQYWNrZXQgPSBmdW5jdGlvbiAoZGF0YSwgYmluYXJ5VHlwZSwgdXRmOGRlY29kZSkge1xyXG4gIGlmIChkYXRhID09PSB1bmRlZmluZWQpIHtcclxuICAgIHJldHVybiBlcnI7XHJcbiAgfVxyXG4gIC8vIFN0cmluZyBkYXRhXHJcbiAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xyXG4gICAgaWYgKGRhdGEuY2hhckF0KDApID09PSAnYicpIHtcclxuICAgICAgcmV0dXJuIGV4cG9ydHMuZGVjb2RlQmFzZTY0UGFja2V0KGRhdGEuc3Vic3RyKDEpLCBiaW5hcnlUeXBlKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodXRmOGRlY29kZSkge1xyXG4gICAgICBkYXRhID0gdHJ5RGVjb2RlKGRhdGEpO1xyXG4gICAgICBpZiAoZGF0YSA9PT0gZmFsc2UpIHtcclxuICAgICAgICByZXR1cm4gZXJyO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICB2YXIgdHlwZSA9IGRhdGEuY2hhckF0KDApO1xyXG5cclxuICAgIGlmIChOdW1iZXIodHlwZSkgIT0gdHlwZSB8fCAhcGFja2V0c2xpc3RbdHlwZV0pIHtcclxuICAgICAgcmV0dXJuIGVycjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZGF0YS5sZW5ndGggPiAxKSB7XHJcbiAgICAgIHJldHVybiB7IHR5cGU6IHBhY2tldHNsaXN0W3R5cGVdLCBkYXRhOiBkYXRhLnN1YnN0cmluZygxKSB9O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIHsgdHlwZTogcGFja2V0c2xpc3RbdHlwZV0gfTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHZhciBhc0FycmF5ID0gbmV3IFVpbnQ4QXJyYXkoZGF0YSk7XHJcbiAgdmFyIHR5cGUgPSBhc0FycmF5WzBdO1xyXG4gIHZhciByZXN0ID0gc2xpY2VCdWZmZXIoZGF0YSwgMSk7XHJcbiAgaWYgKEJsb2IgJiYgYmluYXJ5VHlwZSA9PT0gJ2Jsb2InKSB7XHJcbiAgICByZXN0ID0gbmV3IEJsb2IoW3Jlc3RdKTtcclxuICB9XHJcbiAgcmV0dXJuIHsgdHlwZTogcGFja2V0c2xpc3RbdHlwZV0sIGRhdGE6IHJlc3QgfTtcclxufTtcclxuXHJcbmZ1bmN0aW9uIHRyeURlY29kZShkYXRhKSB7XHJcbiAgdHJ5IHtcclxuICAgIGRhdGEgPSB1dGY4LmRlY29kZShkYXRhLCB7IHN0cmljdDogZmFsc2UgfSk7XHJcbiAgfSBjYXRjaCAoZSkge1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuICByZXR1cm4gZGF0YTtcclxufVxyXG5cclxuLyoqXHJcbiAqIERlY29kZXMgYSBwYWNrZXQgZW5jb2RlZCBpbiBhIGJhc2U2NCBzdHJpbmdcclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGJhc2U2NCBlbmNvZGVkIG1lc3NhZ2VcclxuICogQHJldHVybiB7T2JqZWN0fSB3aXRoIGB0eXBlYCBhbmQgYGRhdGFgIChpZiBhbnkpXHJcbiAqL1xyXG5cclxuZXhwb3J0cy5kZWNvZGVCYXNlNjRQYWNrZXQgPSBmdW5jdGlvbihtc2csIGJpbmFyeVR5cGUpIHtcclxuICB2YXIgdHlwZSA9IHBhY2tldHNsaXN0W21zZy5jaGFyQXQoMCldO1xyXG4gIGlmICghYmFzZTY0ZW5jb2Rlcikge1xyXG4gICAgcmV0dXJuIHsgdHlwZTogdHlwZSwgZGF0YTogeyBiYXNlNjQ6IHRydWUsIGRhdGE6IG1zZy5zdWJzdHIoMSkgfSB9O1xyXG4gIH1cclxuXHJcbiAgdmFyIGRhdGEgPSBiYXNlNjRlbmNvZGVyLmRlY29kZShtc2cuc3Vic3RyKDEpKTtcclxuXHJcbiAgaWYgKGJpbmFyeVR5cGUgPT09ICdibG9iJyAmJiBCbG9iKSB7XHJcbiAgICBkYXRhID0gbmV3IEJsb2IoW2RhdGFdKTtcclxuICB9XHJcblxyXG4gIHJldHVybiB7IHR5cGU6IHR5cGUsIGRhdGE6IGRhdGEgfTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBFbmNvZGVzIG11bHRpcGxlIG1lc3NhZ2VzIChwYXlsb2FkKS5cclxuICpcclxuICogICAgIDxsZW5ndGg+OmRhdGFcclxuICpcclxuICogRXhhbXBsZTpcclxuICpcclxuICogICAgIDExOmhlbGxvIHdvcmxkMjpoaVxyXG4gKlxyXG4gKiBJZiBhbnkgY29udGVudHMgYXJlIGJpbmFyeSwgdGhleSB3aWxsIGJlIGVuY29kZWQgYXMgYmFzZTY0IHN0cmluZ3MuIEJhc2U2NFxyXG4gKiBlbmNvZGVkIHN0cmluZ3MgYXJlIG1hcmtlZCB3aXRoIGEgYiBiZWZvcmUgdGhlIGxlbmd0aCBzcGVjaWZpZXJcclxuICpcclxuICogQHBhcmFtIHtBcnJheX0gcGFja2V0c1xyXG4gKiBAYXBpIHByaXZhdGVcclxuICovXHJcblxyXG5leHBvcnRzLmVuY29kZVBheWxvYWQgPSBmdW5jdGlvbiAocGFja2V0cywgc3VwcG9ydHNCaW5hcnksIGNhbGxiYWNrKSB7XHJcbiAgaWYgKHR5cGVvZiBzdXBwb3J0c0JpbmFyeSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgY2FsbGJhY2sgPSBzdXBwb3J0c0JpbmFyeTtcclxuICAgIHN1cHBvcnRzQmluYXJ5ID0gbnVsbDtcclxuICB9XHJcblxyXG4gIHZhciBpc0JpbmFyeSA9IGhhc0JpbmFyeShwYWNrZXRzKTtcclxuXHJcbiAgaWYgKHN1cHBvcnRzQmluYXJ5ICYmIGlzQmluYXJ5KSB7XHJcbiAgICBpZiAoQmxvYiAmJiAhZG9udFNlbmRCbG9icykge1xyXG4gICAgICByZXR1cm4gZXhwb3J0cy5lbmNvZGVQYXlsb2FkQXNCbG9iKHBhY2tldHMsIGNhbGxiYWNrKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZXhwb3J0cy5lbmNvZGVQYXlsb2FkQXNBcnJheUJ1ZmZlcihwYWNrZXRzLCBjYWxsYmFjayk7XHJcbiAgfVxyXG5cclxuICBpZiAoIXBhY2tldHMubGVuZ3RoKSB7XHJcbiAgICByZXR1cm4gY2FsbGJhY2soJzA6Jyk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBzZXRMZW5ndGhIZWFkZXIobWVzc2FnZSkge1xyXG4gICAgcmV0dXJuIG1lc3NhZ2UubGVuZ3RoICsgJzonICsgbWVzc2FnZTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGVuY29kZU9uZShwYWNrZXQsIGRvbmVDYWxsYmFjaykge1xyXG4gICAgZXhwb3J0cy5lbmNvZGVQYWNrZXQocGFja2V0LCAhaXNCaW5hcnkgPyBmYWxzZSA6IHN1cHBvcnRzQmluYXJ5LCBmYWxzZSwgZnVuY3Rpb24obWVzc2FnZSkge1xyXG4gICAgICBkb25lQ2FsbGJhY2sobnVsbCwgc2V0TGVuZ3RoSGVhZGVyKG1lc3NhZ2UpKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgbWFwKHBhY2tldHMsIGVuY29kZU9uZSwgZnVuY3Rpb24oZXJyLCByZXN1bHRzKSB7XHJcbiAgICByZXR1cm4gY2FsbGJhY2socmVzdWx0cy5qb2luKCcnKSk7XHJcbiAgfSk7XHJcbn07XHJcblxyXG4vKipcclxuICogQXN5bmMgYXJyYXkgbWFwIHVzaW5nIGFmdGVyXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gbWFwKGFyeSwgZWFjaCwgZG9uZSkge1xyXG4gIHZhciByZXN1bHQgPSBuZXcgQXJyYXkoYXJ5Lmxlbmd0aCk7XHJcbiAgdmFyIG5leHQgPSBhZnRlcihhcnkubGVuZ3RoLCBkb25lKTtcclxuXHJcbiAgdmFyIGVhY2hXaXRoSW5kZXggPSBmdW5jdGlvbihpLCBlbCwgY2IpIHtcclxuICAgIGVhY2goZWwsIGZ1bmN0aW9uKGVycm9yLCBtc2cpIHtcclxuICAgICAgcmVzdWx0W2ldID0gbXNnO1xyXG4gICAgICBjYihlcnJvciwgcmVzdWx0KTtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJ5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICBlYWNoV2l0aEluZGV4KGksIGFyeVtpXSwgbmV4dCk7XHJcbiAgfVxyXG59XHJcblxyXG4vKlxyXG4gKiBEZWNvZGVzIGRhdGEgd2hlbiBhIHBheWxvYWQgaXMgbWF5YmUgZXhwZWN0ZWQuIFBvc3NpYmxlIGJpbmFyeSBjb250ZW50cyBhcmVcclxuICogZGVjb2RlZCBmcm9tIHRoZWlyIGJhc2U2NCByZXByZXNlbnRhdGlvblxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZGF0YSwgY2FsbGJhY2sgbWV0aG9kXHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuZXhwb3J0cy5kZWNvZGVQYXlsb2FkID0gZnVuY3Rpb24gKGRhdGEsIGJpbmFyeVR5cGUsIGNhbGxiYWNrKSB7XHJcbiAgaWYgKHR5cGVvZiBkYXRhICE9PSAnc3RyaW5nJykge1xyXG4gICAgcmV0dXJuIGV4cG9ydHMuZGVjb2RlUGF5bG9hZEFzQmluYXJ5KGRhdGEsIGJpbmFyeVR5cGUsIGNhbGxiYWNrKTtcclxuICB9XHJcblxyXG4gIGlmICh0eXBlb2YgYmluYXJ5VHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgY2FsbGJhY2sgPSBiaW5hcnlUeXBlO1xyXG4gICAgYmluYXJ5VHlwZSA9IG51bGw7XHJcbiAgfVxyXG5cclxuICB2YXIgcGFja2V0O1xyXG4gIGlmIChkYXRhID09PSAnJykge1xyXG4gICAgLy8gcGFyc2VyIGVycm9yIC0gaWdub3JpbmcgcGF5bG9hZFxyXG4gICAgcmV0dXJuIGNhbGxiYWNrKGVyciwgMCwgMSk7XHJcbiAgfVxyXG5cclxuICB2YXIgbGVuZ3RoID0gJycsIG4sIG1zZztcclxuXHJcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBkYXRhLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG4gICAgdmFyIGNociA9IGRhdGEuY2hhckF0KGkpO1xyXG5cclxuICAgIGlmIChjaHIgIT09ICc6Jykge1xyXG4gICAgICBsZW5ndGggKz0gY2hyO1xyXG4gICAgICBjb250aW51ZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAobGVuZ3RoID09PSAnJyB8fCAobGVuZ3RoICE9IChuID0gTnVtYmVyKGxlbmd0aCkpKSkge1xyXG4gICAgICAvLyBwYXJzZXIgZXJyb3IgLSBpZ25vcmluZyBwYXlsb2FkXHJcbiAgICAgIHJldHVybiBjYWxsYmFjayhlcnIsIDAsIDEpO1xyXG4gICAgfVxyXG5cclxuICAgIG1zZyA9IGRhdGEuc3Vic3RyKGkgKyAxLCBuKTtcclxuXHJcbiAgICBpZiAobGVuZ3RoICE9IG1zZy5sZW5ndGgpIHtcclxuICAgICAgLy8gcGFyc2VyIGVycm9yIC0gaWdub3JpbmcgcGF5bG9hZFxyXG4gICAgICByZXR1cm4gY2FsbGJhY2soZXJyLCAwLCAxKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAobXNnLmxlbmd0aCkge1xyXG4gICAgICBwYWNrZXQgPSBleHBvcnRzLmRlY29kZVBhY2tldChtc2csIGJpbmFyeVR5cGUsIGZhbHNlKTtcclxuXHJcbiAgICAgIGlmIChlcnIudHlwZSA9PT0gcGFja2V0LnR5cGUgJiYgZXJyLmRhdGEgPT09IHBhY2tldC5kYXRhKSB7XHJcbiAgICAgICAgLy8gcGFyc2VyIGVycm9yIGluIGluZGl2aWR1YWwgcGFja2V0IC0gaWdub3JpbmcgcGF5bG9hZFxyXG4gICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIsIDAsIDEpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgcmV0ID0gY2FsbGJhY2socGFja2V0LCBpICsgbiwgbCk7XHJcbiAgICAgIGlmIChmYWxzZSA9PT0gcmV0KSByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLy8gYWR2YW5jZSBjdXJzb3JcclxuICAgIGkgKz0gbjtcclxuICAgIGxlbmd0aCA9ICcnO1xyXG4gIH1cclxuXHJcbiAgaWYgKGxlbmd0aCAhPT0gJycpIHtcclxuICAgIC8vIHBhcnNlciBlcnJvciAtIGlnbm9yaW5nIHBheWxvYWRcclxuICAgIHJldHVybiBjYWxsYmFjayhlcnIsIDAsIDEpO1xyXG4gIH1cclxuXHJcbn07XHJcblxyXG4vKipcclxuICogRW5jb2RlcyBtdWx0aXBsZSBtZXNzYWdlcyAocGF5bG9hZCkgYXMgYmluYXJ5LlxyXG4gKlxyXG4gKiA8MSA9IGJpbmFyeSwgMCA9IHN0cmluZz48bnVtYmVyIGZyb20gMC05PjxudW1iZXIgZnJvbSAwLTk+Wy4uLl08bnVtYmVyXHJcbiAqIDI1NT48ZGF0YT5cclxuICpcclxuICogRXhhbXBsZTpcclxuICogMSAzIDI1NSAxIDIgMywgaWYgdGhlIGJpbmFyeSBjb250ZW50cyBhcmUgaW50ZXJwcmV0ZWQgYXMgOCBiaXQgaW50ZWdlcnNcclxuICpcclxuICogQHBhcmFtIHtBcnJheX0gcGFja2V0c1xyXG4gKiBAcmV0dXJuIHtBcnJheUJ1ZmZlcn0gZW5jb2RlZCBwYXlsb2FkXHJcbiAqIEBhcGkgcHJpdmF0ZVxyXG4gKi9cclxuXHJcbmV4cG9ydHMuZW5jb2RlUGF5bG9hZEFzQXJyYXlCdWZmZXIgPSBmdW5jdGlvbihwYWNrZXRzLCBjYWxsYmFjaykge1xyXG4gIGlmICghcGFja2V0cy5sZW5ndGgpIHtcclxuICAgIHJldHVybiBjYWxsYmFjayhuZXcgQXJyYXlCdWZmZXIoMCkpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZW5jb2RlT25lKHBhY2tldCwgZG9uZUNhbGxiYWNrKSB7XHJcbiAgICBleHBvcnRzLmVuY29kZVBhY2tldChwYWNrZXQsIHRydWUsIHRydWUsIGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgcmV0dXJuIGRvbmVDYWxsYmFjayhudWxsLCBkYXRhKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgbWFwKHBhY2tldHMsIGVuY29kZU9uZSwgZnVuY3Rpb24oZXJyLCBlbmNvZGVkUGFja2V0cykge1xyXG4gICAgdmFyIHRvdGFsTGVuZ3RoID0gZW5jb2RlZFBhY2tldHMucmVkdWNlKGZ1bmN0aW9uKGFjYywgcCkge1xyXG4gICAgICB2YXIgbGVuO1xyXG4gICAgICBpZiAodHlwZW9mIHAgPT09ICdzdHJpbmcnKXtcclxuICAgICAgICBsZW4gPSBwLmxlbmd0aDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBsZW4gPSBwLmJ5dGVMZW5ndGg7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGFjYyArIGxlbi50b1N0cmluZygpLmxlbmd0aCArIGxlbiArIDI7IC8vIHN0cmluZy9iaW5hcnkgaWRlbnRpZmllciArIHNlcGFyYXRvciA9IDJcclxuICAgIH0sIDApO1xyXG5cclxuICAgIHZhciByZXN1bHRBcnJheSA9IG5ldyBVaW50OEFycmF5KHRvdGFsTGVuZ3RoKTtcclxuXHJcbiAgICB2YXIgYnVmZmVySW5kZXggPSAwO1xyXG4gICAgZW5jb2RlZFBhY2tldHMuZm9yRWFjaChmdW5jdGlvbihwKSB7XHJcbiAgICAgIHZhciBpc1N0cmluZyA9IHR5cGVvZiBwID09PSAnc3RyaW5nJztcclxuICAgICAgdmFyIGFiID0gcDtcclxuICAgICAgaWYgKGlzU3RyaW5nKSB7XHJcbiAgICAgICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShwLmxlbmd0aCk7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICB2aWV3W2ldID0gcC5jaGFyQ29kZUF0KGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhYiA9IHZpZXcuYnVmZmVyO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoaXNTdHJpbmcpIHsgLy8gbm90IHRydWUgYmluYXJ5XHJcbiAgICAgICAgcmVzdWx0QXJyYXlbYnVmZmVySW5kZXgrK10gPSAwO1xyXG4gICAgICB9IGVsc2UgeyAvLyB0cnVlIGJpbmFyeVxyXG4gICAgICAgIHJlc3VsdEFycmF5W2J1ZmZlckluZGV4KytdID0gMTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIGxlblN0ciA9IGFiLmJ5dGVMZW5ndGgudG9TdHJpbmcoKTtcclxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5TdHIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICByZXN1bHRBcnJheVtidWZmZXJJbmRleCsrXSA9IHBhcnNlSW50KGxlblN0cltpXSk7XHJcbiAgICAgIH1cclxuICAgICAgcmVzdWx0QXJyYXlbYnVmZmVySW5kZXgrK10gPSAyNTU7XHJcblxyXG4gICAgICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KGFiKTtcclxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2aWV3Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgcmVzdWx0QXJyYXlbYnVmZmVySW5kZXgrK10gPSB2aWV3W2ldO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gY2FsbGJhY2socmVzdWx0QXJyYXkuYnVmZmVyKTtcclxuICB9KTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBFbmNvZGUgYXMgQmxvYlxyXG4gKi9cclxuXHJcbmV4cG9ydHMuZW5jb2RlUGF5bG9hZEFzQmxvYiA9IGZ1bmN0aW9uKHBhY2tldHMsIGNhbGxiYWNrKSB7XHJcbiAgZnVuY3Rpb24gZW5jb2RlT25lKHBhY2tldCwgZG9uZUNhbGxiYWNrKSB7XHJcbiAgICBleHBvcnRzLmVuY29kZVBhY2tldChwYWNrZXQsIHRydWUsIHRydWUsIGZ1bmN0aW9uKGVuY29kZWQpIHtcclxuICAgICAgdmFyIGJpbmFyeUlkZW50aWZpZXIgPSBuZXcgVWludDhBcnJheSgxKTtcclxuICAgICAgYmluYXJ5SWRlbnRpZmllclswXSA9IDE7XHJcbiAgICAgIGlmICh0eXBlb2YgZW5jb2RlZCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KGVuY29kZWQubGVuZ3RoKTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVuY29kZWQubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgIHZpZXdbaV0gPSBlbmNvZGVkLmNoYXJDb2RlQXQoaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVuY29kZWQgPSB2aWV3LmJ1ZmZlcjtcclxuICAgICAgICBiaW5hcnlJZGVudGlmaWVyWzBdID0gMDtcclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIGxlbiA9IChlbmNvZGVkIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpXHJcbiAgICAgICAgPyBlbmNvZGVkLmJ5dGVMZW5ndGhcclxuICAgICAgICA6IGVuY29kZWQuc2l6ZTtcclxuXHJcbiAgICAgIHZhciBsZW5TdHIgPSBsZW4udG9TdHJpbmcoKTtcclxuICAgICAgdmFyIGxlbmd0aEFyeSA9IG5ldyBVaW50OEFycmF5KGxlblN0ci5sZW5ndGggKyAxKTtcclxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5TdHIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBsZW5ndGhBcnlbaV0gPSBwYXJzZUludChsZW5TdHJbaV0pO1xyXG4gICAgICB9XHJcbiAgICAgIGxlbmd0aEFyeVtsZW5TdHIubGVuZ3RoXSA9IDI1NTtcclxuXHJcbiAgICAgIGlmIChCbG9iKSB7XHJcbiAgICAgICAgdmFyIGJsb2IgPSBuZXcgQmxvYihbYmluYXJ5SWRlbnRpZmllci5idWZmZXIsIGxlbmd0aEFyeS5idWZmZXIsIGVuY29kZWRdKTtcclxuICAgICAgICBkb25lQ2FsbGJhY2sobnVsbCwgYmxvYik7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgbWFwKHBhY2tldHMsIGVuY29kZU9uZSwgZnVuY3Rpb24oZXJyLCByZXN1bHRzKSB7XHJcbiAgICByZXR1cm4gY2FsbGJhY2sobmV3IEJsb2IocmVzdWx0cykpO1xyXG4gIH0pO1xyXG59O1xyXG5cclxuLypcclxuICogRGVjb2RlcyBkYXRhIHdoZW4gYSBwYXlsb2FkIGlzIG1heWJlIGV4cGVjdGVkLiBTdHJpbmdzIGFyZSBkZWNvZGVkIGJ5XHJcbiAqIGludGVycHJldGluZyBlYWNoIGJ5dGUgYXMgYSBrZXkgY29kZSBmb3IgZW50cmllcyBtYXJrZWQgdG8gc3RhcnQgd2l0aCAwLiBTZWVcclxuICogZGVzY3JpcHRpb24gb2YgZW5jb2RlUGF5bG9hZEFzQmluYXJ5XHJcbiAqXHJcbiAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ9IGRhdGEsIGNhbGxiYWNrIG1ldGhvZFxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbmV4cG9ydHMuZGVjb2RlUGF5bG9hZEFzQmluYXJ5ID0gZnVuY3Rpb24gKGRhdGEsIGJpbmFyeVR5cGUsIGNhbGxiYWNrKSB7XHJcbiAgaWYgKHR5cGVvZiBiaW5hcnlUeXBlID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICBjYWxsYmFjayA9IGJpbmFyeVR5cGU7XHJcbiAgICBiaW5hcnlUeXBlID0gbnVsbDtcclxuICB9XHJcblxyXG4gIHZhciBidWZmZXJUYWlsID0gZGF0YTtcclxuICB2YXIgYnVmZmVycyA9IFtdO1xyXG5cclxuICB3aGlsZSAoYnVmZmVyVGFpbC5ieXRlTGVuZ3RoID4gMCkge1xyXG4gICAgdmFyIHRhaWxBcnJheSA9IG5ldyBVaW50OEFycmF5KGJ1ZmZlclRhaWwpO1xyXG4gICAgdmFyIGlzU3RyaW5nID0gdGFpbEFycmF5WzBdID09PSAwO1xyXG4gICAgdmFyIG1zZ0xlbmd0aCA9ICcnO1xyXG5cclxuICAgIGZvciAodmFyIGkgPSAxOyA7IGkrKykge1xyXG4gICAgICBpZiAodGFpbEFycmF5W2ldID09PSAyNTUpIGJyZWFrO1xyXG5cclxuICAgICAgLy8gMzEwID0gY2hhciBsZW5ndGggb2YgTnVtYmVyLk1BWF9WQUxVRVxyXG4gICAgICBpZiAobXNnTGVuZ3RoLmxlbmd0aCA+IDMxMCkge1xyXG4gICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIsIDAsIDEpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBtc2dMZW5ndGggKz0gdGFpbEFycmF5W2ldO1xyXG4gICAgfVxyXG5cclxuICAgIGJ1ZmZlclRhaWwgPSBzbGljZUJ1ZmZlcihidWZmZXJUYWlsLCAyICsgbXNnTGVuZ3RoLmxlbmd0aCk7XHJcbiAgICBtc2dMZW5ndGggPSBwYXJzZUludChtc2dMZW5ndGgpO1xyXG5cclxuICAgIHZhciBtc2cgPSBzbGljZUJ1ZmZlcihidWZmZXJUYWlsLCAwLCBtc2dMZW5ndGgpO1xyXG4gICAgaWYgKGlzU3RyaW5nKSB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgbXNnID0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBuZXcgVWludDhBcnJheShtc2cpKTtcclxuICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIC8vIGlQaG9uZSBTYWZhcmkgZG9lc24ndCBsZXQgeW91IGFwcGx5IHRvIHR5cGVkIGFycmF5c1xyXG4gICAgICAgIHZhciB0eXBlZCA9IG5ldyBVaW50OEFycmF5KG1zZyk7XHJcbiAgICAgICAgbXNnID0gJyc7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlZC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgbXNnICs9IFN0cmluZy5mcm9tQ2hhckNvZGUodHlwZWRbaV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGJ1ZmZlcnMucHVzaChtc2cpO1xyXG4gICAgYnVmZmVyVGFpbCA9IHNsaWNlQnVmZmVyKGJ1ZmZlclRhaWwsIG1zZ0xlbmd0aCk7XHJcbiAgfVxyXG5cclxuICB2YXIgdG90YWwgPSBidWZmZXJzLmxlbmd0aDtcclxuICBidWZmZXJzLmZvckVhY2goZnVuY3Rpb24oYnVmZmVyLCBpKSB7XHJcbiAgICBjYWxsYmFjayhleHBvcnRzLmRlY29kZVBhY2tldChidWZmZXIsIGJpbmFyeVR5cGUsIHRydWUpLCBpLCB0b3RhbCk7XHJcbiAgfSk7XHJcbn07XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1\n")},function(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function(process) {/**\r\n * This is the web browser implementation of `debug()`.\r\n *\r\n * Expose `debug()` as the module.\r\n */\r\n\r\nexports = module.exports = __webpack_require__(26);\r\nexports.log = log;\r\nexports.formatArgs = formatArgs;\r\nexports.save = save;\r\nexports.load = load;\r\nexports.useColors = useColors;\r\nexports.storage = 'undefined' != typeof chrome\r\n               && 'undefined' != typeof chrome.storage\r\n                  ? chrome.storage.local\r\n                  : localstorage();\r\n\r\n/**\r\n * Colors.\r\n */\r\n\r\nexports.colors = [\r\n  '#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC',\r\n  '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF',\r\n  '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC',\r\n  '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF',\r\n  '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC',\r\n  '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033',\r\n  '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366',\r\n  '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933',\r\n  '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC',\r\n  '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF',\r\n  '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'\r\n];\r\n\r\n/**\r\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\r\n * and the Firebug extension (any Firefox version) are known\r\n * to support \"%c\" CSS customizations.\r\n *\r\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\r\n */\r\n\r\nfunction useColors() {\r\n  // NB: In an Electron preload script, document will be defined but not fully\r\n  // initialized. Since we know we're in Chrome, we'll just detect this case\r\n  // explicitly\r\n  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {\r\n    return true;\r\n  }\r\n\r\n  // Internet Explorer and Edge do not support colors.\r\n  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\r\n    return false;\r\n  }\r\n\r\n  // is webkit? http://stackoverflow.com/a/16459606/376773\r\n  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\r\n  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\r\n    // is firebug? http://stackoverflow.com/a/398120/376773\r\n    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\r\n    // is firefox >= v31?\r\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\r\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\r\n    // double check webkit in userAgent just in case we are in a worker\r\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\r\n}\r\n\r\n/**\r\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\r\n */\r\n\r\nexports.formatters.j = function(v) {\r\n  try {\r\n    return JSON.stringify(v);\r\n  } catch (err) {\r\n    return '[UnexpectedJSONParseError]: ' + err.message;\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Colorize log arguments if enabled.\r\n *\r\n * @api public\r\n */\r\n\r\nfunction formatArgs(args) {\r\n  var useColors = this.useColors;\r\n\r\n  args[0] = (useColors ? '%c' : '')\r\n    + this.namespace\r\n    + (useColors ? ' %c' : ' ')\r\n    + args[0]\r\n    + (useColors ? '%c ' : ' ')\r\n    + '+' + exports.humanize(this.diff);\r\n\r\n  if (!useColors) return;\r\n\r\n  var c = 'color: ' + this.color;\r\n  args.splice(1, 0, c, 'color: inherit')\r\n\r\n  // the final \"%c\" is somewhat tricky, because there could be other\r\n  // arguments passed either before or after the %c, so we need to\r\n  // figure out the correct index to insert the CSS into\r\n  var index = 0;\r\n  var lastC = 0;\r\n  args[0].replace(/%[a-zA-Z%]/g, function(match) {\r\n    if ('%%' === match) return;\r\n    index++;\r\n    if ('%c' === match) {\r\n      // we only are interested in the *last* %c\r\n      // (the user may have provided their own)\r\n      lastC = index;\r\n    }\r\n  });\r\n\r\n  args.splice(lastC, 0, c);\r\n}\r\n\r\n/**\r\n * Invokes `console.log()` when available.\r\n * No-op when `console.log` is not a \"function\".\r\n *\r\n * @api public\r\n */\r\n\r\nfunction log() {\r\n  // this hackery is required for IE8/9, where\r\n  // the `console.log` function doesn't have 'apply'\r\n  return 'object' === typeof console\r\n    && console.log\r\n    && Function.prototype.apply.call(console.log, console, arguments);\r\n}\r\n\r\n/**\r\n * Save `namespaces`.\r\n *\r\n * @param {String} namespaces\r\n * @api private\r\n */\r\n\r\nfunction save(namespaces) {\r\n  try {\r\n    if (null == namespaces) {\r\n      exports.storage.removeItem('debug');\r\n    } else {\r\n      exports.storage.debug = namespaces;\r\n    }\r\n  } catch(e) {}\r\n}\r\n\r\n/**\r\n * Load `namespaces`.\r\n *\r\n * @return {String} returns the previously persisted debug modes\r\n * @api private\r\n */\r\n\r\nfunction load() {\r\n  var r;\r\n  try {\r\n    r = exports.storage.debug;\r\n  } catch(e) {}\r\n\r\n  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\r\n  if (!r && typeof process !== 'undefined' && 'env' in process) {\r\n    r = process.env.DEBUG;\r\n  }\r\n\r\n  return r;\r\n}\r\n\r\n/**\r\n * Enable namespaces listed in `localStorage.debug` initially.\r\n */\r\n\r\nexports.enable(load());\r\n\r\n/**\r\n * Localstorage attempts to return the localstorage.\r\n *\r\n * This is necessary because safari throws\r\n * when a user disables cookies/localstorage\r\n * and you attempt to access it.\r\n *\r\n * @return {LocalStorage}\r\n * @api private\r\n */\r\n\r\nfunction localstorage() {\r\n  try {\r\n    return window.localStorage;\r\n  } catch (e) {}\r\n}\r\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(6)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n")},function(module,exports){eval("/**\r\n * Compiles a querystring\r\n * Returns string representation of the object\r\n *\r\n * @param {Object}\r\n * @api private\r\n */\r\n\r\nexports.encode = function (obj) {\r\n  var str = '';\r\n\r\n  for (var i in obj) {\r\n    if (obj.hasOwnProperty(i)) {\r\n      if (str.length) str += '&';\r\n      str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);\r\n    }\r\n  }\r\n\r\n  return str;\r\n};\r\n\r\n/**\r\n * Parses a simple querystring into an object\r\n *\r\n * @param {String} qs\r\n * @api private\r\n */\r\n\r\nexports.decode = function(qs){\r\n  var qry = {};\r\n  var pairs = qs.split('&');\r\n  for (var i = 0, l = pairs.length; i < l; i++) {\r\n    var pair = pairs[i].split('=');\r\n    qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\r\n  }\r\n  return qry;\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wYXJzZXFzL2luZGV4LmpzPzRmMmEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvbXBpbGVzIGEgcXVlcnlzdHJpbmdcclxuICogUmV0dXJucyBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIG9iamVjdFxyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH1cclxuICogQGFwaSBwcml2YXRlXHJcbiAqL1xyXG5cclxuZXhwb3J0cy5lbmNvZGUgPSBmdW5jdGlvbiAob2JqKSB7XHJcbiAgdmFyIHN0ciA9ICcnO1xyXG5cclxuICBmb3IgKHZhciBpIGluIG9iaikge1xyXG4gICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShpKSkge1xyXG4gICAgICBpZiAoc3RyLmxlbmd0aCkgc3RyICs9ICcmJztcclxuICAgICAgc3RyICs9IGVuY29kZVVSSUNvbXBvbmVudChpKSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudChvYmpbaV0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHN0cjtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBQYXJzZXMgYSBzaW1wbGUgcXVlcnlzdHJpbmcgaW50byBhbiBvYmplY3RcclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IHFzXHJcbiAqIEBhcGkgcHJpdmF0ZVxyXG4gKi9cclxuXHJcbmV4cG9ydHMuZGVjb2RlID0gZnVuY3Rpb24ocXMpe1xyXG4gIHZhciBxcnkgPSB7fTtcclxuICB2YXIgcGFpcnMgPSBxcy5zcGxpdCgnJicpO1xyXG4gIGZvciAodmFyIGkgPSAwLCBsID0gcGFpcnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcbiAgICB2YXIgcGFpciA9IHBhaXJzW2ldLnNwbGl0KCc9Jyk7XHJcbiAgICBxcnlbZGVjb2RlVVJJQ29tcG9uZW50KHBhaXJbMF0pXSA9IGRlY29kZVVSSUNvbXBvbmVudChwYWlyWzFdKTtcclxuICB9XHJcbiAgcmV0dXJuIHFyeTtcclxufTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3\n")},function(module,exports){eval("\r\nmodule.exports = function(a, b){\r\n  var fn = function(){};\r\n  fn.prototype = b.prototype;\r\n  a.prototype = new fn;\r\n  a.prototype.constructor = a;\r\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnQtaW5oZXJpdC9pbmRleC5qcz82MmZhIl0sInNvdXJjZXNDb250ZW50IjpbIlxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGEsIGIpe1xyXG4gIHZhciBmbiA9IGZ1bmN0aW9uKCl7fTtcclxuICBmbi5wcm90b3R5cGUgPSBiLnByb3RvdHlwZTtcclxuICBhLnByb3RvdHlwZSA9IG5ldyBmbjtcclxuICBhLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGE7XHJcbn07Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///4\n")},function(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function(process) {/**\r\n * This is the web browser implementation of `debug()`.\r\n *\r\n * Expose `debug()` as the module.\r\n */\r\n\r\nexports = module.exports = __webpack_require__(46);\r\nexports.log = log;\r\nexports.formatArgs = formatArgs;\r\nexports.save = save;\r\nexports.load = load;\r\nexports.useColors = useColors;\r\nexports.storage = 'undefined' != typeof chrome\r\n               && 'undefined' != typeof chrome.storage\r\n                  ? chrome.storage.local\r\n                  : localstorage();\r\n\r\n/**\r\n * Colors.\r\n */\r\n\r\nexports.colors = [\r\n  '#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC',\r\n  '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF',\r\n  '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC',\r\n  '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF',\r\n  '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC',\r\n  '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033',\r\n  '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366',\r\n  '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933',\r\n  '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC',\r\n  '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF',\r\n  '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'\r\n];\r\n\r\n/**\r\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\r\n * and the Firebug extension (any Firefox version) are known\r\n * to support \"%c\" CSS customizations.\r\n *\r\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\r\n */\r\n\r\nfunction useColors() {\r\n  // NB: In an Electron preload script, document will be defined but not fully\r\n  // initialized. Since we know we're in Chrome, we'll just detect this case\r\n  // explicitly\r\n  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {\r\n    return true;\r\n  }\r\n\r\n  // Internet Explorer and Edge do not support colors.\r\n  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\r\n    return false;\r\n  }\r\n\r\n  // is webkit? http://stackoverflow.com/a/16459606/376773\r\n  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\r\n  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\r\n    // is firebug? http://stackoverflow.com/a/398120/376773\r\n    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\r\n    // is firefox >= v31?\r\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\r\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\r\n    // double check webkit in userAgent just in case we are in a worker\r\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\r\n}\r\n\r\n/**\r\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\r\n */\r\n\r\nexports.formatters.j = function(v) {\r\n  try {\r\n    return JSON.stringify(v);\r\n  } catch (err) {\r\n    return '[UnexpectedJSONParseError]: ' + err.message;\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Colorize log arguments if enabled.\r\n *\r\n * @api public\r\n */\r\n\r\nfunction formatArgs(args) {\r\n  var useColors = this.useColors;\r\n\r\n  args[0] = (useColors ? '%c' : '')\r\n    + this.namespace\r\n    + (useColors ? ' %c' : ' ')\r\n    + args[0]\r\n    + (useColors ? '%c ' : ' ')\r\n    + '+' + exports.humanize(this.diff);\r\n\r\n  if (!useColors) return;\r\n\r\n  var c = 'color: ' + this.color;\r\n  args.splice(1, 0, c, 'color: inherit')\r\n\r\n  // the final \"%c\" is somewhat tricky, because there could be other\r\n  // arguments passed either before or after the %c, so we need to\r\n  // figure out the correct index to insert the CSS into\r\n  var index = 0;\r\n  var lastC = 0;\r\n  args[0].replace(/%[a-zA-Z%]/g, function(match) {\r\n    if ('%%' === match) return;\r\n    index++;\r\n    if ('%c' === match) {\r\n      // we only are interested in the *last* %c\r\n      // (the user may have provided their own)\r\n      lastC = index;\r\n    }\r\n  });\r\n\r\n  args.splice(lastC, 0, c);\r\n}\r\n\r\n/**\r\n * Invokes `console.log()` when available.\r\n * No-op when `console.log` is not a \"function\".\r\n *\r\n * @api public\r\n */\r\n\r\nfunction log() {\r\n  // this hackery is required for IE8/9, where\r\n  // the `console.log` function doesn't have 'apply'\r\n  return 'object' === typeof console\r\n    && console.log\r\n    && Function.prototype.apply.call(console.log, console, arguments);\r\n}\r\n\r\n/**\r\n * Save `namespaces`.\r\n *\r\n * @param {String} namespaces\r\n * @api private\r\n */\r\n\r\nfunction save(namespaces) {\r\n  try {\r\n    if (null == namespaces) {\r\n      exports.storage.removeItem('debug');\r\n    } else {\r\n      exports.storage.debug = namespaces;\r\n    }\r\n  } catch(e) {}\r\n}\r\n\r\n/**\r\n * Load `namespaces`.\r\n *\r\n * @return {String} returns the previously persisted debug modes\r\n * @api private\r\n */\r\n\r\nfunction load() {\r\n  var r;\r\n  try {\r\n    r = exports.storage.debug;\r\n  } catch(e) {}\r\n\r\n  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\r\n  if (!r && typeof process !== 'undefined' && 'env' in process) {\r\n    r = process.env.DEBUG;\r\n  }\r\n\r\n  return r;\r\n}\r\n\r\n/**\r\n * Enable namespaces listed in `localStorage.debug` initially.\r\n */\r\n\r\nexports.enable(load());\r\n\r\n/**\r\n * Localstorage attempts to return the localstorage.\r\n *\r\n * This is necessary because safari throws\r\n * when a user disables cookies/localstorage\r\n * and you attempt to access it.\r\n *\r\n * @return {LocalStorage}\r\n * @api private\r\n */\r\n\r\nfunction localstorage() {\r\n  try {\r\n    return window.localStorage;\r\n  } catch (e) {}\r\n}\r\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(6)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n")},function(module,exports){eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6\n")},function(module,exports,__webpack_require__){eval("\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nvar debug = __webpack_require__(28)('socket.io-parser');\r\nvar Emitter = __webpack_require__(0);\r\nvar binary = __webpack_require__(31);\r\nvar isArray = __webpack_require__(12);\r\nvar isBuf = __webpack_require__(13);\r\n\r\n/**\r\n * Protocol version.\r\n *\r\n * @api public\r\n */\r\n\r\nexports.protocol = 4;\r\n\r\n/**\r\n * Packet types.\r\n *\r\n * @api public\r\n */\r\n\r\nexports.types = [\r\n  'CONNECT',\r\n  'DISCONNECT',\r\n  'EVENT',\r\n  'ACK',\r\n  'ERROR',\r\n  'BINARY_EVENT',\r\n  'BINARY_ACK'\r\n];\r\n\r\n/**\r\n * Packet type `connect`.\r\n *\r\n * @api public\r\n */\r\n\r\nexports.CONNECT = 0;\r\n\r\n/**\r\n * Packet type `disconnect`.\r\n *\r\n * @api public\r\n */\r\n\r\nexports.DISCONNECT = 1;\r\n\r\n/**\r\n * Packet type `event`.\r\n *\r\n * @api public\r\n */\r\n\r\nexports.EVENT = 2;\r\n\r\n/**\r\n * Packet type `ack`.\r\n *\r\n * @api public\r\n */\r\n\r\nexports.ACK = 3;\r\n\r\n/**\r\n * Packet type `error`.\r\n *\r\n * @api public\r\n */\r\n\r\nexports.ERROR = 4;\r\n\r\n/**\r\n * Packet type 'binary event'\r\n *\r\n * @api public\r\n */\r\n\r\nexports.BINARY_EVENT = 5;\r\n\r\n/**\r\n * Packet type `binary ack`. For acks with binary arguments.\r\n *\r\n * @api public\r\n */\r\n\r\nexports.BINARY_ACK = 6;\r\n\r\n/**\r\n * Encoder constructor.\r\n *\r\n * @api public\r\n */\r\n\r\nexports.Encoder = Encoder;\r\n\r\n/**\r\n * Decoder constructor.\r\n *\r\n * @api public\r\n */\r\n\r\nexports.Decoder = Decoder;\r\n\r\n/**\r\n * A socket.io Encoder instance\r\n *\r\n * @api public\r\n */\r\n\r\nfunction Encoder() {}\r\n\r\nvar ERROR_PACKET = exports.ERROR + '\"encode error\"';\r\n\r\n/**\r\n * Encode a packet as a single string if non-binary, or as a\r\n * buffer sequence, depending on packet type.\r\n *\r\n * @param {Object} obj - packet object\r\n * @param {Function} callback - function to handle encodings (likely engine.write)\r\n * @return Calls callback with Array of encodings\r\n * @api public\r\n */\r\n\r\nEncoder.prototype.encode = function(obj, callback){\r\n  debug('encoding packet %j', obj);\r\n\r\n  if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {\r\n    encodeAsBinary(obj, callback);\r\n  } else {\r\n    var encoding = encodeAsString(obj);\r\n    callback([encoding]);\r\n  }\r\n};\r\n\r\n/**\r\n * Encode packet as string.\r\n *\r\n * @param {Object} packet\r\n * @return {String} encoded\r\n * @api private\r\n */\r\n\r\nfunction encodeAsString(obj) {\r\n\r\n  // first is type\r\n  var str = '' + obj.type;\r\n\r\n  // attachments if we have them\r\n  if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {\r\n    str += obj.attachments + '-';\r\n  }\r\n\r\n  // if we have a namespace other than `/`\r\n  // we append it followed by a comma `,`\r\n  if (obj.nsp && '/' !== obj.nsp) {\r\n    str += obj.nsp + ',';\r\n  }\r\n\r\n  // immediately followed by the id\r\n  if (null != obj.id) {\r\n    str += obj.id;\r\n  }\r\n\r\n  // json data\r\n  if (null != obj.data) {\r\n    var payload = tryStringify(obj.data);\r\n    if (payload !== false) {\r\n      str += payload;\r\n    } else {\r\n      return ERROR_PACKET;\r\n    }\r\n  }\r\n\r\n  debug('encoded %j as %s', obj, str);\r\n  return str;\r\n}\r\n\r\nfunction tryStringify(str) {\r\n  try {\r\n    return JSON.stringify(str);\r\n  } catch(e){\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Encode packet as 'buffer sequence' by removing blobs, and\r\n * deconstructing packet into object with placeholders and\r\n * a list of buffers.\r\n *\r\n * @param {Object} packet\r\n * @return {Buffer} encoded\r\n * @api private\r\n */\r\n\r\nfunction encodeAsBinary(obj, callback) {\r\n\r\n  function writeEncoding(bloblessData) {\r\n    var deconstruction = binary.deconstructPacket(bloblessData);\r\n    var pack = encodeAsString(deconstruction.packet);\r\n    var buffers = deconstruction.buffers;\r\n\r\n    buffers.unshift(pack); // add packet info to beginning of data list\r\n    callback(buffers); // write all the buffers\r\n  }\r\n\r\n  binary.removeBlobs(obj, writeEncoding);\r\n}\r\n\r\n/**\r\n * A socket.io Decoder instance\r\n *\r\n * @return {Object} decoder\r\n * @api public\r\n */\r\n\r\nfunction Decoder() {\r\n  this.reconstructor = null;\r\n}\r\n\r\n/**\r\n * Mix in `Emitter` with Decoder.\r\n */\r\n\r\nEmitter(Decoder.prototype);\r\n\r\n/**\r\n * Decodes an encoded packet string into packet JSON.\r\n *\r\n * @param {String} obj - encoded packet\r\n * @return {Object} packet\r\n * @api public\r\n */\r\n\r\nDecoder.prototype.add = function(obj) {\r\n  var packet;\r\n  if (typeof obj === 'string') {\r\n    packet = decodeString(obj);\r\n    if (exports.BINARY_EVENT === packet.type || exports.BINARY_ACK === packet.type) { // binary packet's json\r\n      this.reconstructor = new BinaryReconstructor(packet);\r\n\r\n      // no attachments, labeled binary but no binary data to follow\r\n      if (this.reconstructor.reconPack.attachments === 0) {\r\n        this.emit('decoded', packet);\r\n      }\r\n    } else { // non-binary full packet\r\n      this.emit('decoded', packet);\r\n    }\r\n  } else if (isBuf(obj) || obj.base64) { // raw binary data\r\n    if (!this.reconstructor) {\r\n      throw new Error('got binary data when not reconstructing a packet');\r\n    } else {\r\n      packet = this.reconstructor.takeBinaryData(obj);\r\n      if (packet) { // received final buffer\r\n        this.reconstructor = null;\r\n        this.emit('decoded', packet);\r\n      }\r\n    }\r\n  } else {\r\n    throw new Error('Unknown type: ' + obj);\r\n  }\r\n};\r\n\r\n/**\r\n * Decode a packet String (JSON data)\r\n *\r\n * @param {String} str\r\n * @return {Object} packet\r\n * @api private\r\n */\r\n\r\nfunction decodeString(str) {\r\n  var i = 0;\r\n  // look up type\r\n  var p = {\r\n    type: Number(str.charAt(0))\r\n  };\r\n\r\n  if (null == exports.types[p.type]) {\r\n    return error('unknown packet type ' + p.type);\r\n  }\r\n\r\n  // look up attachments if type binary\r\n  if (exports.BINARY_EVENT === p.type || exports.BINARY_ACK === p.type) {\r\n    var buf = '';\r\n    while (str.charAt(++i) !== '-') {\r\n      buf += str.charAt(i);\r\n      if (i == str.length) break;\r\n    }\r\n    if (buf != Number(buf) || str.charAt(i) !== '-') {\r\n      throw new Error('Illegal attachments');\r\n    }\r\n    p.attachments = Number(buf);\r\n  }\r\n\r\n  // look up namespace (if any)\r\n  if ('/' === str.charAt(i + 1)) {\r\n    p.nsp = '';\r\n    while (++i) {\r\n      var c = str.charAt(i);\r\n      if (',' === c) break;\r\n      p.nsp += c;\r\n      if (i === str.length) break;\r\n    }\r\n  } else {\r\n    p.nsp = '/';\r\n  }\r\n\r\n  // look up id\r\n  var next = str.charAt(i + 1);\r\n  if ('' !== next && Number(next) == next) {\r\n    p.id = '';\r\n    while (++i) {\r\n      var c = str.charAt(i);\r\n      if (null == c || Number(c) != c) {\r\n        --i;\r\n        break;\r\n      }\r\n      p.id += str.charAt(i);\r\n      if (i === str.length) break;\r\n    }\r\n    p.id = Number(p.id);\r\n  }\r\n\r\n  // look up json data\r\n  if (str.charAt(++i)) {\r\n    var payload = tryParse(str.substr(i));\r\n    var isPayloadValid = payload !== false && (p.type === exports.ERROR || isArray(payload));\r\n    if (isPayloadValid) {\r\n      p.data = payload;\r\n    } else {\r\n      return error('invalid payload');\r\n    }\r\n  }\r\n\r\n  debug('decoded %s as %j', str, p);\r\n  return p;\r\n}\r\n\r\nfunction tryParse(str) {\r\n  try {\r\n    return JSON.parse(str);\r\n  } catch(e){\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Deallocates a parser's resources\r\n *\r\n * @api public\r\n */\r\n\r\nDecoder.prototype.destroy = function() {\r\n  if (this.reconstructor) {\r\n    this.reconstructor.finishedReconstruction();\r\n  }\r\n};\r\n\r\n/**\r\n * A manager of a binary event's 'buffer sequence'. Should\r\n * be constructed whenever a packet of type BINARY_EVENT is\r\n * decoded.\r\n *\r\n * @param {Object} packet\r\n * @return {BinaryReconstructor} initialized reconstructor\r\n * @api private\r\n */\r\n\r\nfunction BinaryReconstructor(packet) {\r\n  this.reconPack = packet;\r\n  this.buffers = [];\r\n}\r\n\r\n/**\r\n * Method to be called when binary data received from connection\r\n * after a BINARY_EVENT packet.\r\n *\r\n * @param {Buffer | ArrayBuffer} binData - the raw binary data received\r\n * @return {null | Object} returns null if more binary data is expected or\r\n *   a reconstructed packet object if all buffers have been received.\r\n * @api private\r\n */\r\n\r\nBinaryReconstructor.prototype.takeBinaryData = function(binData) {\r\n  this.buffers.push(binData);\r\n  if (this.buffers.length === this.reconPack.attachments) { // done with buffer list\r\n    var packet = binary.reconstructPacket(this.reconPack, this.buffers);\r\n    this.finishedReconstruction();\r\n    return packet;\r\n  }\r\n  return null;\r\n};\r\n\r\n/**\r\n * Cleans up binary packet reconstruction variables.\r\n *\r\n * @api private\r\n */\r\n\r\nBinaryReconstructor.prototype.finishedReconstruction = function() {\r\n  this.reconPack = null;\r\n  this.buffers = [];\r\n};\r\n\r\nfunction error(msg) {\r\n  return {\r\n    type: exports.ERROR,\r\n    data: 'parser error: ' + msg\r\n  };\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n")},function(module,exports,__webpack_require__){"use strict";eval("/* WEBPACK VAR INJECTION */(function(global) {/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nvar base64 = __webpack_require__(32)\nvar ieee754 = __webpack_require__(33)\nvar isArray = __webpack_require__(34)\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(14)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8\n")},function(module,exports,__webpack_require__){eval("// browser shim for xmlhttprequest module\r\n\r\nvar hasCORS = __webpack_require__(37);\r\n\r\nmodule.exports = function (opts) {\r\n  var xdomain = opts.xdomain;\r\n\r\n  // scheme must be same when usign XDomainRequest\r\n  // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx\r\n  var xscheme = opts.xscheme;\r\n\r\n  // XDomainRequest has a flow of not sending cookie, therefore it should be disabled as a default.\r\n  // https://github.com/Automattic/engine.io-client/pull/217\r\n  var enablesXDR = opts.enablesXDR;\r\n\r\n  // XMLHttpRequest can be disabled on IE\r\n  try {\r\n    if ('undefined' !== typeof XMLHttpRequest && (!xdomain || hasCORS)) {\r\n      return new XMLHttpRequest();\r\n    }\r\n  } catch (e) { }\r\n\r\n  // Use XDomainRequest for IE8 if enablesXDR is true\r\n  // because loading bar keeps flashing when using jsonp-polling\r\n  // https://github.com/yujiosaka/socke.io-ie8-loading-example\r\n  try {\r\n    if ('undefined' !== typeof XDomainRequest && !xscheme && enablesXDR) {\r\n      return new XDomainRequest();\r\n    }\r\n  } catch (e) { }\r\n\r\n  if (!xdomain) {\r\n    try {\r\n      return new self[['Active'].concat('Object').join('X')]('Microsoft.XMLHTTP');\r\n    } catch (e) { }\r\n  }\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi94bWxodHRwcmVxdWVzdC5qcz8wMWQzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGJyb3dzZXIgc2hpbSBmb3IgeG1saHR0cHJlcXVlc3QgbW9kdWxlXHJcblxyXG52YXIgaGFzQ09SUyA9IHJlcXVpcmUoJ2hhcy1jb3JzJyk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcHRzKSB7XHJcbiAgdmFyIHhkb21haW4gPSBvcHRzLnhkb21haW47XHJcblxyXG4gIC8vIHNjaGVtZSBtdXN0IGJlIHNhbWUgd2hlbiB1c2lnbiBYRG9tYWluUmVxdWVzdFxyXG4gIC8vIGh0dHA6Ly9ibG9ncy5tc2RuLmNvbS9iL2llaW50ZXJuYWxzL2FyY2hpdmUvMjAxMC8wNS8xMy94ZG9tYWlucmVxdWVzdC1yZXN0cmljdGlvbnMtbGltaXRhdGlvbnMtYW5kLXdvcmthcm91bmRzLmFzcHhcclxuICB2YXIgeHNjaGVtZSA9IG9wdHMueHNjaGVtZTtcclxuXHJcbiAgLy8gWERvbWFpblJlcXVlc3QgaGFzIGEgZmxvdyBvZiBub3Qgc2VuZGluZyBjb29raWUsIHRoZXJlZm9yZSBpdCBzaG91bGQgYmUgZGlzYWJsZWQgYXMgYSBkZWZhdWx0LlxyXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9BdXRvbWF0dGljL2VuZ2luZS5pby1jbGllbnQvcHVsbC8yMTdcclxuICB2YXIgZW5hYmxlc1hEUiA9IG9wdHMuZW5hYmxlc1hEUjtcclxuXHJcbiAgLy8gWE1MSHR0cFJlcXVlc3QgY2FuIGJlIGRpc2FibGVkIG9uIElFXHJcbiAgdHJ5IHtcclxuICAgIGlmICgndW5kZWZpbmVkJyAhPT0gdHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICYmICgheGRvbWFpbiB8fCBoYXNDT1JTKSkge1xyXG4gICAgICByZXR1cm4gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XHJcbiAgICB9XHJcbiAgfSBjYXRjaCAoZSkgeyB9XHJcblxyXG4gIC8vIFVzZSBYRG9tYWluUmVxdWVzdCBmb3IgSUU4IGlmIGVuYWJsZXNYRFIgaXMgdHJ1ZVxyXG4gIC8vIGJlY2F1c2UgbG9hZGluZyBiYXIga2VlcHMgZmxhc2hpbmcgd2hlbiB1c2luZyBqc29ucC1wb2xsaW5nXHJcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3l1amlvc2FrYS9zb2NrZS5pby1pZTgtbG9hZGluZy1leGFtcGxlXHJcbiAgdHJ5IHtcclxuICAgIGlmICgndW5kZWZpbmVkJyAhPT0gdHlwZW9mIFhEb21haW5SZXF1ZXN0ICYmICF4c2NoZW1lICYmIGVuYWJsZXNYRFIpIHtcclxuICAgICAgcmV0dXJuIG5ldyBYRG9tYWluUmVxdWVzdCgpO1xyXG4gICAgfVxyXG4gIH0gY2F0Y2ggKGUpIHsgfVxyXG5cclxuICBpZiAoIXhkb21haW4pIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIHJldHVybiBuZXcgc2VsZltbJ0FjdGl2ZSddLmNvbmNhdCgnT2JqZWN0Jykuam9pbignWCcpXSgnTWljcm9zb2Z0LlhNTEhUVFAnKTtcclxuICAgIH0gY2F0Y2ggKGUpIHsgfVxyXG4gIH1cclxufTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9\n")},function(module,exports,__webpack_require__){eval("/**\r\n * Module dependencies.\r\n */\r\n\r\nvar parser = __webpack_require__(1);\r\nvar Emitter = __webpack_require__(0);\r\n\r\n/**\r\n * Module exports.\r\n */\r\n\r\nmodule.exports = Transport;\r\n\r\n/**\r\n * Transport abstract constructor.\r\n *\r\n * @param {Object} options.\r\n * @api private\r\n */\r\n\r\nfunction Transport (opts) {\r\n  this.path = opts.path;\r\n  this.hostname = opts.hostname;\r\n  this.port = opts.port;\r\n  this.secure = opts.secure;\r\n  this.query = opts.query;\r\n  this.timestampParam = opts.timestampParam;\r\n  this.timestampRequests = opts.timestampRequests;\r\n  this.readyState = '';\r\n  this.agent = opts.agent || false;\r\n  this.socket = opts.socket;\r\n  this.enablesXDR = opts.enablesXDR;\r\n\r\n  // SSL options for Node.js client\r\n  this.pfx = opts.pfx;\r\n  this.key = opts.key;\r\n  this.passphrase = opts.passphrase;\r\n  this.cert = opts.cert;\r\n  this.ca = opts.ca;\r\n  this.ciphers = opts.ciphers;\r\n  this.rejectUnauthorized = opts.rejectUnauthorized;\r\n  this.forceNode = opts.forceNode;\r\n\r\n  // results of ReactNative environment detection\r\n  this.isReactNative = opts.isReactNative;\r\n\r\n  // other options for Node.js client\r\n  this.extraHeaders = opts.extraHeaders;\r\n  this.localAddress = opts.localAddress;\r\n}\r\n\r\n/**\r\n * Mix in `Emitter`.\r\n */\r\n\r\nEmitter(Transport.prototype);\r\n\r\n/**\r\n * Emits an error.\r\n *\r\n * @param {String} str\r\n * @return {Transport} for chaining\r\n * @api public\r\n */\r\n\r\nTransport.prototype.onError = function (msg, desc) {\r\n  var err = new Error(msg);\r\n  err.type = 'TransportError';\r\n  err.description = desc;\r\n  this.emit('error', err);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Opens the transport.\r\n *\r\n * @api public\r\n */\r\n\r\nTransport.prototype.open = function () {\r\n  if ('closed' === this.readyState || '' === this.readyState) {\r\n    this.readyState = 'opening';\r\n    this.doOpen();\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Closes the transport.\r\n *\r\n * @api private\r\n */\r\n\r\nTransport.prototype.close = function () {\r\n  if ('opening' === this.readyState || 'open' === this.readyState) {\r\n    this.doClose();\r\n    this.onClose();\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Sends multiple packets.\r\n *\r\n * @param {Array} packets\r\n * @api private\r\n */\r\n\r\nTransport.prototype.send = function (packets) {\r\n  if ('open' === this.readyState) {\r\n    this.write(packets);\r\n  } else {\r\n    throw new Error('Transport not open');\r\n  }\r\n};\r\n\r\n/**\r\n * Called upon open\r\n *\r\n * @api private\r\n */\r\n\r\nTransport.prototype.onOpen = function () {\r\n  this.readyState = 'open';\r\n  this.writable = true;\r\n  this.emit('open');\r\n};\r\n\r\n/**\r\n * Called with data.\r\n *\r\n * @param {String} data\r\n * @api private\r\n */\r\n\r\nTransport.prototype.onData = function (data) {\r\n  var packet = parser.decodePacket(data, this.socket.binaryType);\r\n  this.onPacket(packet);\r\n};\r\n\r\n/**\r\n * Called with a decoded packet.\r\n */\r\n\r\nTransport.prototype.onPacket = function (packet) {\r\n  this.emit('packet', packet);\r\n};\r\n\r\n/**\r\n * Called upon close.\r\n *\r\n * @api private\r\n */\r\n\r\nTransport.prototype.onClose = function () {\r\n  this.readyState = 'closed';\r\n  this.emit('close');\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvdHJhbnNwb3J0LmpzPzE5YjciXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXHJcbiAqL1xyXG5cclxudmFyIHBhcnNlciA9IHJlcXVpcmUoJ2VuZ2luZS5pby1wYXJzZXInKTtcclxudmFyIEVtaXR0ZXIgPSByZXF1aXJlKCdjb21wb25lbnQtZW1pdHRlcicpO1xyXG5cclxuLyoqXHJcbiAqIE1vZHVsZSBleHBvcnRzLlxyXG4gKi9cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gVHJhbnNwb3J0O1xyXG5cclxuLyoqXHJcbiAqIFRyYW5zcG9ydCBhYnN0cmFjdCBjb25zdHJ1Y3Rvci5cclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMuXHJcbiAqIEBhcGkgcHJpdmF0ZVxyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIFRyYW5zcG9ydCAob3B0cykge1xyXG4gIHRoaXMucGF0aCA9IG9wdHMucGF0aDtcclxuICB0aGlzLmhvc3RuYW1lID0gb3B0cy5ob3N0bmFtZTtcclxuICB0aGlzLnBvcnQgPSBvcHRzLnBvcnQ7XHJcbiAgdGhpcy5zZWN1cmUgPSBvcHRzLnNlY3VyZTtcclxuICB0aGlzLnF1ZXJ5ID0gb3B0cy5xdWVyeTtcclxuICB0aGlzLnRpbWVzdGFtcFBhcmFtID0gb3B0cy50aW1lc3RhbXBQYXJhbTtcclxuICB0aGlzLnRpbWVzdGFtcFJlcXVlc3RzID0gb3B0cy50aW1lc3RhbXBSZXF1ZXN0cztcclxuICB0aGlzLnJlYWR5U3RhdGUgPSAnJztcclxuICB0aGlzLmFnZW50ID0gb3B0cy5hZ2VudCB8fCBmYWxzZTtcclxuICB0aGlzLnNvY2tldCA9IG9wdHMuc29ja2V0O1xyXG4gIHRoaXMuZW5hYmxlc1hEUiA9IG9wdHMuZW5hYmxlc1hEUjtcclxuXHJcbiAgLy8gU1NMIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XHJcbiAgdGhpcy5wZnggPSBvcHRzLnBmeDtcclxuICB0aGlzLmtleSA9IG9wdHMua2V5O1xyXG4gIHRoaXMucGFzc3BocmFzZSA9IG9wdHMucGFzc3BocmFzZTtcclxuICB0aGlzLmNlcnQgPSBvcHRzLmNlcnQ7XHJcbiAgdGhpcy5jYSA9IG9wdHMuY2E7XHJcbiAgdGhpcy5jaXBoZXJzID0gb3B0cy5jaXBoZXJzO1xyXG4gIHRoaXMucmVqZWN0VW5hdXRob3JpemVkID0gb3B0cy5yZWplY3RVbmF1dGhvcml6ZWQ7XHJcbiAgdGhpcy5mb3JjZU5vZGUgPSBvcHRzLmZvcmNlTm9kZTtcclxuXHJcbiAgLy8gcmVzdWx0cyBvZiBSZWFjdE5hdGl2ZSBlbnZpcm9ubWVudCBkZXRlY3Rpb25cclxuICB0aGlzLmlzUmVhY3ROYXRpdmUgPSBvcHRzLmlzUmVhY3ROYXRpdmU7XHJcblxyXG4gIC8vIG90aGVyIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XHJcbiAgdGhpcy5leHRyYUhlYWRlcnMgPSBvcHRzLmV4dHJhSGVhZGVycztcclxuICB0aGlzLmxvY2FsQWRkcmVzcyA9IG9wdHMubG9jYWxBZGRyZXNzO1xyXG59XHJcblxyXG4vKipcclxuICogTWl4IGluIGBFbWl0dGVyYC5cclxuICovXHJcblxyXG5FbWl0dGVyKFRyYW5zcG9ydC5wcm90b3R5cGUpO1xyXG5cclxuLyoqXHJcbiAqIEVtaXRzIGFuIGVycm9yLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXHJcbiAqIEByZXR1cm4ge1RyYW5zcG9ydH0gZm9yIGNoYWluaW5nXHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuVHJhbnNwb3J0LnByb3RvdHlwZS5vbkVycm9yID0gZnVuY3Rpb24gKG1zZywgZGVzYykge1xyXG4gIHZhciBlcnIgPSBuZXcgRXJyb3IobXNnKTtcclxuICBlcnIudHlwZSA9ICdUcmFuc3BvcnRFcnJvcic7XHJcbiAgZXJyLmRlc2NyaXB0aW9uID0gZGVzYztcclxuICB0aGlzLmVtaXQoJ2Vycm9yJywgZXJyKTtcclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBPcGVucyB0aGUgdHJhbnNwb3J0LlxyXG4gKlxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcblRyYW5zcG9ydC5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uICgpIHtcclxuICBpZiAoJ2Nsb3NlZCcgPT09IHRoaXMucmVhZHlTdGF0ZSB8fCAnJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XHJcbiAgICB0aGlzLnJlYWR5U3RhdGUgPSAnb3BlbmluZyc7XHJcbiAgICB0aGlzLmRvT3BlbigpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogQ2xvc2VzIHRoZSB0cmFuc3BvcnQuXHJcbiAqXHJcbiAqIEBhcGkgcHJpdmF0ZVxyXG4gKi9cclxuXHJcblRyYW5zcG9ydC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgaWYgKCdvcGVuaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XHJcbiAgICB0aGlzLmRvQ2xvc2UoKTtcclxuICAgIHRoaXMub25DbG9zZSgpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogU2VuZHMgbXVsdGlwbGUgcGFja2V0cy5cclxuICpcclxuICogQHBhcmFtIHtBcnJheX0gcGFja2V0c1xyXG4gKiBAYXBpIHByaXZhdGVcclxuICovXHJcblxyXG5UcmFuc3BvcnQucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAocGFja2V0cykge1xyXG4gIGlmICgnb3BlbicgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xyXG4gICAgdGhpcy53cml0ZShwYWNrZXRzKTtcclxuICB9IGVsc2Uge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdUcmFuc3BvcnQgbm90IG9wZW4nKTtcclxuICB9XHJcbn07XHJcblxyXG4vKipcclxuICogQ2FsbGVkIHVwb24gb3BlblxyXG4gKlxyXG4gKiBAYXBpIHByaXZhdGVcclxuICovXHJcblxyXG5UcmFuc3BvcnQucHJvdG90eXBlLm9uT3BlbiA9IGZ1bmN0aW9uICgpIHtcclxuICB0aGlzLnJlYWR5U3RhdGUgPSAnb3Blbic7XHJcbiAgdGhpcy53cml0YWJsZSA9IHRydWU7XHJcbiAgdGhpcy5lbWl0KCdvcGVuJyk7XHJcbn07XHJcblxyXG4vKipcclxuICogQ2FsbGVkIHdpdGggZGF0YS5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGRhdGFcclxuICogQGFwaSBwcml2YXRlXHJcbiAqL1xyXG5cclxuVHJhbnNwb3J0LnByb3RvdHlwZS5vbkRhdGEgPSBmdW5jdGlvbiAoZGF0YSkge1xyXG4gIHZhciBwYWNrZXQgPSBwYXJzZXIuZGVjb2RlUGFja2V0KGRhdGEsIHRoaXMuc29ja2V0LmJpbmFyeVR5cGUpO1xyXG4gIHRoaXMub25QYWNrZXQocGFja2V0KTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDYWxsZWQgd2l0aCBhIGRlY29kZWQgcGFja2V0LlxyXG4gKi9cclxuXHJcblRyYW5zcG9ydC5wcm90b3R5cGUub25QYWNrZXQgPSBmdW5jdGlvbiAocGFja2V0KSB7XHJcbiAgdGhpcy5lbWl0KCdwYWNrZXQnLCBwYWNrZXQpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIENhbGxlZCB1cG9uIGNsb3NlLlxyXG4gKlxyXG4gKiBAYXBpIHByaXZhdGVcclxuICovXHJcblxyXG5UcmFuc3BvcnQucHJvdG90eXBlLm9uQ2xvc2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgdGhpcy5yZWFkeVN0YXRlID0gJ2Nsb3NlZCc7XHJcbiAgdGhpcy5lbWl0KCdjbG9zZScpO1xyXG59O1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///10\n")},function(module,exports){eval("/**\r\n * Parses an URI\r\n *\r\n * @author Steven Levithan <stevenlevithan.com> (MIT license)\r\n * @api private\r\n */\r\n\r\nvar re = /^(?:(?![^:@]+:[^:@\\/]*@)(http|https|ws|wss):\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;\r\n\r\nvar parts = [\r\n    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'\r\n];\r\n\r\nmodule.exports = function parseuri(str) {\r\n    var src = str,\r\n        b = str.indexOf('['),\r\n        e = str.indexOf(']');\r\n\r\n    if (b != -1 && e != -1) {\r\n        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);\r\n    }\r\n\r\n    var m = re.exec(str || ''),\r\n        uri = {},\r\n        i = 14;\r\n\r\n    while (i--) {\r\n        uri[parts[i]] = m[i] || '';\r\n    }\r\n\r\n    if (b != -1 && e != -1) {\r\n        uri.source = src;\r\n        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');\r\n        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');\r\n        uri.ipv6uri = true;\r\n    }\r\n\r\n    return uri;\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGFyc2V1cmkvaW5kZXguanM/NTMxNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogUGFyc2VzIGFuIFVSSVxyXG4gKlxyXG4gKiBAYXV0aG9yIFN0ZXZlbiBMZXZpdGhhbiA8c3RldmVubGV2aXRoYW4uY29tPiAoTUlUIGxpY2Vuc2UpXHJcbiAqIEBhcGkgcHJpdmF0ZVxyXG4gKi9cclxuXHJcbnZhciByZSA9IC9eKD86KD8hW146QF0rOlteOkBcXC9dKkApKGh0dHB8aHR0cHN8d3N8d3NzKTpcXC9cXC8pPygoPzooKFteOkBdKikoPzo6KFteOkBdKikpPyk/QCk/KCg/OlthLWYwLTldezAsNH06KXsyLDd9W2EtZjAtOV17MCw0fXxbXjpcXC8/I10qKSg/OjooXFxkKikpPykoKChcXC8oPzpbXj8jXSg/IVtePyNcXC9dKlxcLltePyNcXC8uXSsoPzpbPyNdfCQpKSkqXFwvPyk/KFtePyNcXC9dKikpKD86XFw/KFteI10qKSk/KD86IyguKikpPykvO1xyXG5cclxudmFyIHBhcnRzID0gW1xyXG4gICAgJ3NvdXJjZScsICdwcm90b2NvbCcsICdhdXRob3JpdHknLCAndXNlckluZm8nLCAndXNlcicsICdwYXNzd29yZCcsICdob3N0JywgJ3BvcnQnLCAncmVsYXRpdmUnLCAncGF0aCcsICdkaXJlY3RvcnknLCAnZmlsZScsICdxdWVyeScsICdhbmNob3InXHJcbl07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNldXJpKHN0cikge1xyXG4gICAgdmFyIHNyYyA9IHN0cixcclxuICAgICAgICBiID0gc3RyLmluZGV4T2YoJ1snKSxcclxuICAgICAgICBlID0gc3RyLmluZGV4T2YoJ10nKTtcclxuXHJcbiAgICBpZiAoYiAhPSAtMSAmJiBlICE9IC0xKSB7XHJcbiAgICAgICAgc3RyID0gc3RyLnN1YnN0cmluZygwLCBiKSArIHN0ci5zdWJzdHJpbmcoYiwgZSkucmVwbGFjZSgvOi9nLCAnOycpICsgc3RyLnN1YnN0cmluZyhlLCBzdHIubGVuZ3RoKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgbSA9IHJlLmV4ZWMoc3RyIHx8ICcnKSxcclxuICAgICAgICB1cmkgPSB7fSxcclxuICAgICAgICBpID0gMTQ7XHJcblxyXG4gICAgd2hpbGUgKGktLSkge1xyXG4gICAgICAgIHVyaVtwYXJ0c1tpXV0gPSBtW2ldIHx8ICcnO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChiICE9IC0xICYmIGUgIT0gLTEpIHtcclxuICAgICAgICB1cmkuc291cmNlID0gc3JjO1xyXG4gICAgICAgIHVyaS5ob3N0ID0gdXJpLmhvc3Quc3Vic3RyaW5nKDEsIHVyaS5ob3N0Lmxlbmd0aCAtIDEpLnJlcGxhY2UoLzsvZywgJzonKTtcclxuICAgICAgICB1cmkuYXV0aG9yaXR5ID0gdXJpLmF1dGhvcml0eS5yZXBsYWNlKCdbJywgJycpLnJlcGxhY2UoJ10nLCAnJykucmVwbGFjZSgvOy9nLCAnOicpO1xyXG4gICAgICAgIHVyaS5pcHY2dXJpID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdXJpO1xyXG59O1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///11\n")},function(module,exports){eval("var toString = {}.toString;\r\n\r\nmodule.exports = Array.isArray || function (arr) {\r\n  return toString.call(arr) == '[object Array]';\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcz9hMjNiIl0sInNvdXJjZXNDb250ZW50IjpbInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcclxuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XHJcbn07XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///12\n")},function(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function(Buffer) {\r\nmodule.exports = isBuf;\r\n\r\nvar withNativeBuffer = typeof Buffer === 'function' && typeof Buffer.isBuffer === 'function';\r\nvar withNativeArrayBuffer = typeof ArrayBuffer === 'function';\r\n\r\nvar isView = function (obj) {\r\n  return typeof ArrayBuffer.isView === 'function' ? ArrayBuffer.isView(obj) : (obj.buffer instanceof ArrayBuffer);\r\n};\r\n\r\n/**\r\n * Returns true if obj is a buffer or an arraybuffer.\r\n *\r\n * @api private\r\n */\r\n\r\nfunction isBuf(obj) {\r\n  return (withNativeBuffer && Buffer.isBuffer(obj)) ||\r\n          (withNativeArrayBuffer && (obj instanceof ArrayBuffer || isView(obj)));\r\n}\r\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(8).Buffer))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9pcy1idWZmZXIuanM/ZjkyMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcclxubW9kdWxlLmV4cG9ydHMgPSBpc0J1ZjtcclxuXHJcbnZhciB3aXRoTmF0aXZlQnVmZmVyID0gdHlwZW9mIEJ1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgQnVmZmVyLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nO1xyXG52YXIgd2l0aE5hdGl2ZUFycmF5QnVmZmVyID0gdHlwZW9mIEFycmF5QnVmZmVyID09PSAnZnVuY3Rpb24nO1xyXG5cclxudmFyIGlzVmlldyA9IGZ1bmN0aW9uIChvYmopIHtcclxuICByZXR1cm4gdHlwZW9mIEFycmF5QnVmZmVyLmlzVmlldyA9PT0gJ2Z1bmN0aW9uJyA/IEFycmF5QnVmZmVyLmlzVmlldyhvYmopIDogKG9iai5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcik7XHJcbn07XHJcblxyXG4vKipcclxuICogUmV0dXJucyB0cnVlIGlmIG9iaiBpcyBhIGJ1ZmZlciBvciBhbiBhcnJheWJ1ZmZlci5cclxuICpcclxuICogQGFwaSBwcml2YXRlXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gaXNCdWYob2JqKSB7XHJcbiAgcmV0dXJuICh3aXRoTmF0aXZlQnVmZmVyICYmIEJ1ZmZlci5pc0J1ZmZlcihvYmopKSB8fFxyXG4gICAgICAgICAgKHdpdGhOYXRpdmVBcnJheUJ1ZmZlciAmJiAob2JqIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIgfHwgaXNWaWV3KG9iaikpKTtcclxufVxyXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///13\n")},function(module,exports){eval('var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function("return this")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === "object") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it\'s\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzP2NkMDAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///14\n')},function(module,exports,__webpack_require__){eval("\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nvar eio = __webpack_require__(35);\r\nvar Socket = __webpack_require__(21);\r\nvar Emitter = __webpack_require__(0);\r\nvar parser = __webpack_require__(7);\r\nvar on = __webpack_require__(22);\r\nvar bind = __webpack_require__(23);\r\nvar debug = __webpack_require__(2)('socket.io-client:manager');\r\nvar indexOf = __webpack_require__(20);\r\nvar Backoff = __webpack_require__(52);\r\n\r\n/**\r\n * IE6+ hasOwnProperty\r\n */\r\n\r\nvar has = Object.prototype.hasOwnProperty;\r\n\r\n/**\r\n * Module exports\r\n */\r\n\r\nmodule.exports = Manager;\r\n\r\n/**\r\n * `Manager` constructor.\r\n *\r\n * @param {String} engine instance or engine uri/opts\r\n * @param {Object} options\r\n * @api public\r\n */\r\n\r\nfunction Manager (uri, opts) {\r\n  if (!(this instanceof Manager)) return new Manager(uri, opts);\r\n  if (uri && ('object' === typeof uri)) {\r\n    opts = uri;\r\n    uri = undefined;\r\n  }\r\n  opts = opts || {};\r\n\r\n  opts.path = opts.path || '/socket.io';\r\n  this.nsps = {};\r\n  this.subs = [];\r\n  this.opts = opts;\r\n  this.reconnection(opts.reconnection !== false);\r\n  this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\r\n  this.reconnectionDelay(opts.reconnectionDelay || 1000);\r\n  this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\r\n  this.randomizationFactor(opts.randomizationFactor || 0.5);\r\n  this.backoff = new Backoff({\r\n    min: this.reconnectionDelay(),\r\n    max: this.reconnectionDelayMax(),\r\n    jitter: this.randomizationFactor()\r\n  });\r\n  this.timeout(null == opts.timeout ? 20000 : opts.timeout);\r\n  this.readyState = 'closed';\r\n  this.uri = uri;\r\n  this.connecting = [];\r\n  this.lastPing = null;\r\n  this.encoding = false;\r\n  this.packetBuffer = [];\r\n  var _parser = opts.parser || parser;\r\n  this.encoder = new _parser.Encoder();\r\n  this.decoder = new _parser.Decoder();\r\n  this.autoConnect = opts.autoConnect !== false;\r\n  if (this.autoConnect) this.open();\r\n}\r\n\r\n/**\r\n * Propagate given event to sockets and emit on `this`\r\n *\r\n * @api private\r\n */\r\n\r\nManager.prototype.emitAll = function () {\r\n  this.emit.apply(this, arguments);\r\n  for (var nsp in this.nsps) {\r\n    if (has.call(this.nsps, nsp)) {\r\n      this.nsps[nsp].emit.apply(this.nsps[nsp], arguments);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Update `socket.id` of all sockets\r\n *\r\n * @api private\r\n */\r\n\r\nManager.prototype.updateSocketIds = function () {\r\n  for (var nsp in this.nsps) {\r\n    if (has.call(this.nsps, nsp)) {\r\n      this.nsps[nsp].id = this.generateId(nsp);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * generate `socket.id` for the given `nsp`\r\n *\r\n * @param {String} nsp\r\n * @return {String}\r\n * @api private\r\n */\r\n\r\nManager.prototype.generateId = function (nsp) {\r\n  return (nsp === '/' ? '' : (nsp + '#')) + this.engine.id;\r\n};\r\n\r\n/**\r\n * Mix in `Emitter`.\r\n */\r\n\r\nEmitter(Manager.prototype);\r\n\r\n/**\r\n * Sets the `reconnection` config.\r\n *\r\n * @param {Boolean} true/false if it should automatically reconnect\r\n * @return {Manager} self or value\r\n * @api public\r\n */\r\n\r\nManager.prototype.reconnection = function (v) {\r\n  if (!arguments.length) return this._reconnection;\r\n  this._reconnection = !!v;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Sets the reconnection attempts config.\r\n *\r\n * @param {Number} max reconnection attempts before giving up\r\n * @return {Manager} self or value\r\n * @api public\r\n */\r\n\r\nManager.prototype.reconnectionAttempts = function (v) {\r\n  if (!arguments.length) return this._reconnectionAttempts;\r\n  this._reconnectionAttempts = v;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Sets the delay between reconnections.\r\n *\r\n * @param {Number} delay\r\n * @return {Manager} self or value\r\n * @api public\r\n */\r\n\r\nManager.prototype.reconnectionDelay = function (v) {\r\n  if (!arguments.length) return this._reconnectionDelay;\r\n  this._reconnectionDelay = v;\r\n  this.backoff && this.backoff.setMin(v);\r\n  return this;\r\n};\r\n\r\nManager.prototype.randomizationFactor = function (v) {\r\n  if (!arguments.length) return this._randomizationFactor;\r\n  this._randomizationFactor = v;\r\n  this.backoff && this.backoff.setJitter(v);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Sets the maximum delay between reconnections.\r\n *\r\n * @param {Number} delay\r\n * @return {Manager} self or value\r\n * @api public\r\n */\r\n\r\nManager.prototype.reconnectionDelayMax = function (v) {\r\n  if (!arguments.length) return this._reconnectionDelayMax;\r\n  this._reconnectionDelayMax = v;\r\n  this.backoff && this.backoff.setMax(v);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Sets the connection timeout. `false` to disable\r\n *\r\n * @return {Manager} self or value\r\n * @api public\r\n */\r\n\r\nManager.prototype.timeout = function (v) {\r\n  if (!arguments.length) return this._timeout;\r\n  this._timeout = v;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Starts trying to reconnect if reconnection is enabled and we have not\r\n * started reconnecting yet\r\n *\r\n * @api private\r\n */\r\n\r\nManager.prototype.maybeReconnectOnOpen = function () {\r\n  // Only try to reconnect if it's the first time we're connecting\r\n  if (!this.reconnecting && this._reconnection && this.backoff.attempts === 0) {\r\n    // keeps reconnection from firing twice for the same reconnection loop\r\n    this.reconnect();\r\n  }\r\n};\r\n\r\n/**\r\n * Sets the current transport `socket`.\r\n *\r\n * @param {Function} optional, callback\r\n * @return {Manager} self\r\n * @api public\r\n */\r\n\r\nManager.prototype.open =\r\nManager.prototype.connect = function (fn, opts) {\r\n  debug('readyState %s', this.readyState);\r\n  if (~this.readyState.indexOf('open')) return this;\r\n\r\n  debug('opening %s', this.uri);\r\n  this.engine = eio(this.uri, this.opts);\r\n  var socket = this.engine;\r\n  var self = this;\r\n  this.readyState = 'opening';\r\n  this.skipReconnect = false;\r\n\r\n  // emit `open`\r\n  var openSub = on(socket, 'open', function () {\r\n    self.onopen();\r\n    fn && fn();\r\n  });\r\n\r\n  // emit `connect_error`\r\n  var errorSub = on(socket, 'error', function (data) {\r\n    debug('connect_error');\r\n    self.cleanup();\r\n    self.readyState = 'closed';\r\n    self.emitAll('connect_error', data);\r\n    if (fn) {\r\n      var err = new Error('Connection error');\r\n      err.data = data;\r\n      fn(err);\r\n    } else {\r\n      // Only do this if there is no fn to handle the error\r\n      self.maybeReconnectOnOpen();\r\n    }\r\n  });\r\n\r\n  // emit `connect_timeout`\r\n  if (false !== this._timeout) {\r\n    var timeout = this._timeout;\r\n    debug('connect attempt will timeout after %d', timeout);\r\n\r\n    // set timer\r\n    var timer = setTimeout(function () {\r\n      debug('connect attempt timed out after %d', timeout);\r\n      openSub.destroy();\r\n      socket.close();\r\n      socket.emit('error', 'timeout');\r\n      self.emitAll('connect_timeout', timeout);\r\n    }, timeout);\r\n\r\n    this.subs.push({\r\n      destroy: function () {\r\n        clearTimeout(timer);\r\n      }\r\n    });\r\n  }\r\n\r\n  this.subs.push(openSub);\r\n  this.subs.push(errorSub);\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Called upon transport open.\r\n *\r\n * @api private\r\n */\r\n\r\nManager.prototype.onopen = function () {\r\n  debug('open');\r\n\r\n  // clear old subs\r\n  this.cleanup();\r\n\r\n  // mark as open\r\n  this.readyState = 'open';\r\n  this.emit('open');\r\n\r\n  // add new subs\r\n  var socket = this.engine;\r\n  this.subs.push(on(socket, 'data', bind(this, 'ondata')));\r\n  this.subs.push(on(socket, 'ping', bind(this, 'onping')));\r\n  this.subs.push(on(socket, 'pong', bind(this, 'onpong')));\r\n  this.subs.push(on(socket, 'error', bind(this, 'onerror')));\r\n  this.subs.push(on(socket, 'close', bind(this, 'onclose')));\r\n  this.subs.push(on(this.decoder, 'decoded', bind(this, 'ondecoded')));\r\n};\r\n\r\n/**\r\n * Called upon a ping.\r\n *\r\n * @api private\r\n */\r\n\r\nManager.prototype.onping = function () {\r\n  this.lastPing = new Date();\r\n  this.emitAll('ping');\r\n};\r\n\r\n/**\r\n * Called upon a packet.\r\n *\r\n * @api private\r\n */\r\n\r\nManager.prototype.onpong = function () {\r\n  this.emitAll('pong', new Date() - this.lastPing);\r\n};\r\n\r\n/**\r\n * Called with data.\r\n *\r\n * @api private\r\n */\r\n\r\nManager.prototype.ondata = function (data) {\r\n  this.decoder.add(data);\r\n};\r\n\r\n/**\r\n * Called when parser fully decodes a packet.\r\n *\r\n * @api private\r\n */\r\n\r\nManager.prototype.ondecoded = function (packet) {\r\n  this.emit('packet', packet);\r\n};\r\n\r\n/**\r\n * Called upon socket error.\r\n *\r\n * @api private\r\n */\r\n\r\nManager.prototype.onerror = function (err) {\r\n  debug('error', err);\r\n  this.emitAll('error', err);\r\n};\r\n\r\n/**\r\n * Creates a new socket for the given `nsp`.\r\n *\r\n * @return {Socket}\r\n * @api public\r\n */\r\n\r\nManager.prototype.socket = function (nsp, opts) {\r\n  var socket = this.nsps[nsp];\r\n  if (!socket) {\r\n    socket = new Socket(this, nsp, opts);\r\n    this.nsps[nsp] = socket;\r\n    var self = this;\r\n    socket.on('connecting', onConnecting);\r\n    socket.on('connect', function () {\r\n      socket.id = self.generateId(nsp);\r\n    });\r\n\r\n    if (this.autoConnect) {\r\n      // manually call here since connecting event is fired before listening\r\n      onConnecting();\r\n    }\r\n  }\r\n\r\n  function onConnecting () {\r\n    if (!~indexOf(self.connecting, socket)) {\r\n      self.connecting.push(socket);\r\n    }\r\n  }\r\n\r\n  return socket;\r\n};\r\n\r\n/**\r\n * Called upon a socket close.\r\n *\r\n * @param {Socket} socket\r\n */\r\n\r\nManager.prototype.destroy = function (socket) {\r\n  var index = indexOf(this.connecting, socket);\r\n  if (~index) this.connecting.splice(index, 1);\r\n  if (this.connecting.length) return;\r\n\r\n  this.close();\r\n};\r\n\r\n/**\r\n * Writes a packet.\r\n *\r\n * @param {Object} packet\r\n * @api private\r\n */\r\n\r\nManager.prototype.packet = function (packet) {\r\n  debug('writing packet %j', packet);\r\n  var self = this;\r\n  if (packet.query && packet.type === 0) packet.nsp += '?' + packet.query;\r\n\r\n  if (!self.encoding) {\r\n    // encode, then write to engine with result\r\n    self.encoding = true;\r\n    this.encoder.encode(packet, function (encodedPackets) {\r\n      for (var i = 0; i < encodedPackets.length; i++) {\r\n        self.engine.write(encodedPackets[i], packet.options);\r\n      }\r\n      self.encoding = false;\r\n      self.processPacketQueue();\r\n    });\r\n  } else { // add packet to the queue\r\n    self.packetBuffer.push(packet);\r\n  }\r\n};\r\n\r\n/**\r\n * If packet buffer is non-empty, begins encoding the\r\n * next packet in line.\r\n *\r\n * @api private\r\n */\r\n\r\nManager.prototype.processPacketQueue = function () {\r\n  if (this.packetBuffer.length > 0 && !this.encoding) {\r\n    var pack = this.packetBuffer.shift();\r\n    this.packet(pack);\r\n  }\r\n};\r\n\r\n/**\r\n * Clean up transport subscriptions and packet buffer.\r\n *\r\n * @api private\r\n */\r\n\r\nManager.prototype.cleanup = function () {\r\n  debug('cleanup');\r\n\r\n  var subsLength = this.subs.length;\r\n  for (var i = 0; i < subsLength; i++) {\r\n    var sub = this.subs.shift();\r\n    sub.destroy();\r\n  }\r\n\r\n  this.packetBuffer = [];\r\n  this.encoding = false;\r\n  this.lastPing = null;\r\n\r\n  this.decoder.destroy();\r\n};\r\n\r\n/**\r\n * Close the current socket.\r\n *\r\n * @api private\r\n */\r\n\r\nManager.prototype.close =\r\nManager.prototype.disconnect = function () {\r\n  debug('disconnect');\r\n  this.skipReconnect = true;\r\n  this.reconnecting = false;\r\n  if ('opening' === this.readyState) {\r\n    // `onclose` will not fire because\r\n    // an open event never happened\r\n    this.cleanup();\r\n  }\r\n  this.backoff.reset();\r\n  this.readyState = 'closed';\r\n  if (this.engine) this.engine.close();\r\n};\r\n\r\n/**\r\n * Called upon engine close.\r\n *\r\n * @api private\r\n */\r\n\r\nManager.prototype.onclose = function (reason) {\r\n  debug('onclose');\r\n\r\n  this.cleanup();\r\n  this.backoff.reset();\r\n  this.readyState = 'closed';\r\n  this.emit('close', reason);\r\n\r\n  if (this._reconnection && !this.skipReconnect) {\r\n    this.reconnect();\r\n  }\r\n};\r\n\r\n/**\r\n * Attempt a reconnection.\r\n *\r\n * @api private\r\n */\r\n\r\nManager.prototype.reconnect = function () {\r\n  if (this.reconnecting || this.skipReconnect) return this;\r\n\r\n  var self = this;\r\n\r\n  if (this.backoff.attempts >= this._reconnectionAttempts) {\r\n    debug('reconnect failed');\r\n    this.backoff.reset();\r\n    this.emitAll('reconnect_failed');\r\n    this.reconnecting = false;\r\n  } else {\r\n    var delay = this.backoff.duration();\r\n    debug('will wait %dms before reconnect attempt', delay);\r\n\r\n    this.reconnecting = true;\r\n    var timer = setTimeout(function () {\r\n      if (self.skipReconnect) return;\r\n\r\n      debug('attempting reconnect');\r\n      self.emitAll('reconnect_attempt', self.backoff.attempts);\r\n      self.emitAll('reconnecting', self.backoff.attempts);\r\n\r\n      // check again for the case socket closed in above events\r\n      if (self.skipReconnect) return;\r\n\r\n      self.open(function (err) {\r\n        if (err) {\r\n          debug('reconnect attempt error');\r\n          self.reconnecting = false;\r\n          self.reconnect();\r\n          self.emitAll('reconnect_error', err.data);\r\n        } else {\r\n          debug('reconnect success');\r\n          self.onreconnect();\r\n        }\r\n      });\r\n    }, delay);\r\n\r\n    this.subs.push({\r\n      destroy: function () {\r\n        clearTimeout(timer);\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * Called upon successful reconnect.\r\n *\r\n * @api private\r\n */\r\n\r\nManager.prototype.onreconnect = function () {\r\n  var attempt = this.backoff.attempts;\r\n  this.reconnecting = false;\r\n  this.backoff.reset();\r\n  this.updateSocketIds();\r\n  this.emitAll('reconnect', attempt);\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///15\n")},function(module,exports,__webpack_require__){eval("/**\r\n * Module dependencies\r\n */\r\n\r\nvar XMLHttpRequest = __webpack_require__(9);\r\nvar XHR = __webpack_require__(38);\r\nvar JSONP = __webpack_require__(48);\r\nvar websocket = __webpack_require__(49);\r\n\r\n/**\r\n * Export transports.\r\n */\r\n\r\nexports.polling = polling;\r\nexports.websocket = websocket;\r\n\r\n/**\r\n * Polling transport polymorphic constructor.\r\n * Decides on xhr vs jsonp based on feature detection.\r\n *\r\n * @api private\r\n */\r\n\r\nfunction polling (opts) {\r\n  var xhr;\r\n  var xd = false;\r\n  var xs = false;\r\n  var jsonp = false !== opts.jsonp;\r\n\r\n  if (typeof location !== 'undefined') {\r\n    var isSSL = 'https:' === location.protocol;\r\n    var port = location.port;\r\n\r\n    // some user agents have empty `location.port`\r\n    if (!port) {\r\n      port = isSSL ? 443 : 80;\r\n    }\r\n\r\n    xd = opts.hostname !== location.hostname || port !== opts.port;\r\n    xs = opts.secure !== isSSL;\r\n  }\r\n\r\n  opts.xdomain = xd;\r\n  opts.xscheme = xs;\r\n  xhr = new XMLHttpRequest(opts);\r\n\r\n  if ('open' in xhr && !opts.forceJSONP) {\r\n    return new XHR(opts);\r\n  } else {\r\n    if (!jsonp) throw new Error('JSONP disabled');\r\n    return new JSONP(opts);\r\n  }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvdHJhbnNwb3J0cy9pbmRleC5qcz82YTQ0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzXHJcbiAqL1xyXG5cclxudmFyIFhNTEh0dHBSZXF1ZXN0ID0gcmVxdWlyZSgneG1saHR0cHJlcXVlc3Qtc3NsJyk7XHJcbnZhciBYSFIgPSByZXF1aXJlKCcuL3BvbGxpbmcteGhyJyk7XHJcbnZhciBKU09OUCA9IHJlcXVpcmUoJy4vcG9sbGluZy1qc29ucCcpO1xyXG52YXIgd2Vic29ja2V0ID0gcmVxdWlyZSgnLi93ZWJzb2NrZXQnKTtcclxuXHJcbi8qKlxyXG4gKiBFeHBvcnQgdHJhbnNwb3J0cy5cclxuICovXHJcblxyXG5leHBvcnRzLnBvbGxpbmcgPSBwb2xsaW5nO1xyXG5leHBvcnRzLndlYnNvY2tldCA9IHdlYnNvY2tldDtcclxuXHJcbi8qKlxyXG4gKiBQb2xsaW5nIHRyYW5zcG9ydCBwb2x5bW9ycGhpYyBjb25zdHJ1Y3Rvci5cclxuICogRGVjaWRlcyBvbiB4aHIgdnMganNvbnAgYmFzZWQgb24gZmVhdHVyZSBkZXRlY3Rpb24uXHJcbiAqXHJcbiAqIEBhcGkgcHJpdmF0ZVxyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIHBvbGxpbmcgKG9wdHMpIHtcclxuICB2YXIgeGhyO1xyXG4gIHZhciB4ZCA9IGZhbHNlO1xyXG4gIHZhciB4cyA9IGZhbHNlO1xyXG4gIHZhciBqc29ucCA9IGZhbHNlICE9PSBvcHRzLmpzb25wO1xyXG5cclxuICBpZiAodHlwZW9mIGxvY2F0aW9uICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgdmFyIGlzU1NMID0gJ2h0dHBzOicgPT09IGxvY2F0aW9uLnByb3RvY29sO1xyXG4gICAgdmFyIHBvcnQgPSBsb2NhdGlvbi5wb3J0O1xyXG5cclxuICAgIC8vIHNvbWUgdXNlciBhZ2VudHMgaGF2ZSBlbXB0eSBgbG9jYXRpb24ucG9ydGBcclxuICAgIGlmICghcG9ydCkge1xyXG4gICAgICBwb3J0ID0gaXNTU0wgPyA0NDMgOiA4MDtcclxuICAgIH1cclxuXHJcbiAgICB4ZCA9IG9wdHMuaG9zdG5hbWUgIT09IGxvY2F0aW9uLmhvc3RuYW1lIHx8IHBvcnQgIT09IG9wdHMucG9ydDtcclxuICAgIHhzID0gb3B0cy5zZWN1cmUgIT09IGlzU1NMO1xyXG4gIH1cclxuXHJcbiAgb3B0cy54ZG9tYWluID0geGQ7XHJcbiAgb3B0cy54c2NoZW1lID0geHM7XHJcbiAgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KG9wdHMpO1xyXG5cclxuICBpZiAoJ29wZW4nIGluIHhociAmJiAhb3B0cy5mb3JjZUpTT05QKSB7XHJcbiAgICByZXR1cm4gbmV3IFhIUihvcHRzKTtcclxuICB9IGVsc2Uge1xyXG4gICAgaWYgKCFqc29ucCkgdGhyb3cgbmV3IEVycm9yKCdKU09OUCBkaXNhYmxlZCcpO1xyXG4gICAgcmV0dXJuIG5ldyBKU09OUChvcHRzKTtcclxuICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///16\n")},function(module,exports,__webpack_require__){eval("/**\r\n * Module dependencies.\r\n */\r\n\r\nvar Transport = __webpack_require__(10);\r\nvar parseqs = __webpack_require__(3);\r\nvar parser = __webpack_require__(1);\r\nvar inherit = __webpack_require__(4);\r\nvar yeast = __webpack_require__(19);\r\nvar debug = __webpack_require__(5)('engine.io-client:polling');\r\n\r\n/**\r\n * Module exports.\r\n */\r\n\r\nmodule.exports = Polling;\r\n\r\n/**\r\n * Is XHR2 supported?\r\n */\r\n\r\nvar hasXHR2 = (function () {\r\n  var XMLHttpRequest = __webpack_require__(9);\r\n  var xhr = new XMLHttpRequest({ xdomain: false });\r\n  return null != xhr.responseType;\r\n})();\r\n\r\n/**\r\n * Polling interface.\r\n *\r\n * @param {Object} opts\r\n * @api private\r\n */\r\n\r\nfunction Polling (opts) {\r\n  var forceBase64 = (opts && opts.forceBase64);\r\n  if (!hasXHR2 || forceBase64) {\r\n    this.supportsBinary = false;\r\n  }\r\n  Transport.call(this, opts);\r\n}\r\n\r\n/**\r\n * Inherits from Transport.\r\n */\r\n\r\ninherit(Polling, Transport);\r\n\r\n/**\r\n * Transport name.\r\n */\r\n\r\nPolling.prototype.name = 'polling';\r\n\r\n/**\r\n * Opens the socket (triggers polling). We write a PING message to determine\r\n * when the transport is open.\r\n *\r\n * @api private\r\n */\r\n\r\nPolling.prototype.doOpen = function () {\r\n  this.poll();\r\n};\r\n\r\n/**\r\n * Pauses polling.\r\n *\r\n * @param {Function} callback upon buffers are flushed and transport is paused\r\n * @api private\r\n */\r\n\r\nPolling.prototype.pause = function (onPause) {\r\n  var self = this;\r\n\r\n  this.readyState = 'pausing';\r\n\r\n  function pause () {\r\n    debug('paused');\r\n    self.readyState = 'paused';\r\n    onPause();\r\n  }\r\n\r\n  if (this.polling || !this.writable) {\r\n    var total = 0;\r\n\r\n    if (this.polling) {\r\n      debug('we are currently polling - waiting to pause');\r\n      total++;\r\n      this.once('pollComplete', function () {\r\n        debug('pre-pause polling complete');\r\n        --total || pause();\r\n      });\r\n    }\r\n\r\n    if (!this.writable) {\r\n      debug('we are currently writing - waiting to pause');\r\n      total++;\r\n      this.once('drain', function () {\r\n        debug('pre-pause writing complete');\r\n        --total || pause();\r\n      });\r\n    }\r\n  } else {\r\n    pause();\r\n  }\r\n};\r\n\r\n/**\r\n * Starts polling cycle.\r\n *\r\n * @api public\r\n */\r\n\r\nPolling.prototype.poll = function () {\r\n  debug('polling');\r\n  this.polling = true;\r\n  this.doPoll();\r\n  this.emit('poll');\r\n};\r\n\r\n/**\r\n * Overloads onData to detect payloads.\r\n *\r\n * @api private\r\n */\r\n\r\nPolling.prototype.onData = function (data) {\r\n  var self = this;\r\n  debug('polling got data %s', data);\r\n  var callback = function (packet, index, total) {\r\n    // if its the first message we consider the transport open\r\n    if ('opening' === self.readyState) {\r\n      self.onOpen();\r\n    }\r\n\r\n    // if its a close packet, we close the ongoing requests\r\n    if ('close' === packet.type) {\r\n      self.onClose();\r\n      return false;\r\n    }\r\n\r\n    // otherwise bypass onData and handle the message\r\n    self.onPacket(packet);\r\n  };\r\n\r\n  // decode payload\r\n  parser.decodePayload(data, this.socket.binaryType, callback);\r\n\r\n  // if an event did not trigger closing\r\n  if ('closed' !== this.readyState) {\r\n    // if we got data we're not polling\r\n    this.polling = false;\r\n    this.emit('pollComplete');\r\n\r\n    if ('open' === this.readyState) {\r\n      this.poll();\r\n    } else {\r\n      debug('ignoring poll - transport state \"%s\"', this.readyState);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * For polling, send a close packet.\r\n *\r\n * @api private\r\n */\r\n\r\nPolling.prototype.doClose = function () {\r\n  var self = this;\r\n\r\n  function close () {\r\n    debug('writing close packet');\r\n    self.write([{ type: 'close' }]);\r\n  }\r\n\r\n  if ('open' === this.readyState) {\r\n    debug('transport open - closing');\r\n    close();\r\n  } else {\r\n    // in case we're trying to close while\r\n    // handshaking is in progress (GH-164)\r\n    debug('transport not open - deferring close');\r\n    this.once('open', close);\r\n  }\r\n};\r\n\r\n/**\r\n * Writes a packets payload.\r\n *\r\n * @param {Array} data packets\r\n * @param {Function} drain callback\r\n * @api private\r\n */\r\n\r\nPolling.prototype.write = function (packets) {\r\n  var self = this;\r\n  this.writable = false;\r\n  var callbackfn = function () {\r\n    self.writable = true;\r\n    self.emit('drain');\r\n  };\r\n\r\n  parser.encodePayload(packets, this.supportsBinary, function (data) {\r\n    self.doWrite(data, callbackfn);\r\n  });\r\n};\r\n\r\n/**\r\n * Generates uri for connection.\r\n *\r\n * @api private\r\n */\r\n\r\nPolling.prototype.uri = function () {\r\n  var query = this.query || {};\r\n  var schema = this.secure ? 'https' : 'http';\r\n  var port = '';\r\n\r\n  // cache busting is forced\r\n  if (false !== this.timestampRequests) {\r\n    query[this.timestampParam] = yeast();\r\n  }\r\n\r\n  if (!this.supportsBinary && !query.sid) {\r\n    query.b64 = 1;\r\n  }\r\n\r\n  query = parseqs.encode(query);\r\n\r\n  // avoid port if default for schema\r\n  if (this.port && (('https' === schema && Number(this.port) !== 443) ||\r\n     ('http' === schema && Number(this.port) !== 80))) {\r\n    port = ':' + this.port;\r\n  }\r\n\r\n  // prepend ? to query\r\n  if (query.length) {\r\n    query = '?' + query;\r\n  }\r\n\r\n  var ipv6 = this.hostname.indexOf(':') !== -1;\r\n  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///17\n")},function(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function(Buffer) {/* global Blob File */\r\n\r\n/*\r\n * Module requirements.\r\n */\r\n\r\nvar isArray = __webpack_require__(40);\r\n\r\nvar toString = Object.prototype.toString;\r\nvar withNativeBlob = typeof Blob === 'function' ||\r\n                        typeof Blob !== 'undefined' && toString.call(Blob) === '[object BlobConstructor]';\r\nvar withNativeFile = typeof File === 'function' ||\r\n                        typeof File !== 'undefined' && toString.call(File) === '[object FileConstructor]';\r\n\r\n/**\r\n * Module exports.\r\n */\r\n\r\nmodule.exports = hasBinary;\r\n\r\n/**\r\n * Checks for binary data.\r\n *\r\n * Supports Buffer, ArrayBuffer, Blob and File.\r\n *\r\n * @param {Object} anything\r\n * @api public\r\n */\r\n\r\nfunction hasBinary (obj) {\r\n  if (!obj || typeof obj !== 'object') {\r\n    return false;\r\n  }\r\n\r\n  if (isArray(obj)) {\r\n    for (var i = 0, l = obj.length; i < l; i++) {\r\n      if (hasBinary(obj[i])) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  if ((typeof Buffer === 'function' && Buffer.isBuffer && Buffer.isBuffer(obj)) ||\r\n    (typeof ArrayBuffer === 'function' && obj instanceof ArrayBuffer) ||\r\n    (withNativeBlob && obj instanceof Blob) ||\r\n    (withNativeFile && obj instanceof File)\r\n  ) {\r\n    return true;\r\n  }\r\n\r\n  // see: https://github.com/Automattic/has-binary/pull/4\r\n  if (obj.toJSON && typeof obj.toJSON === 'function' && arguments.length === 1) {\r\n    return hasBinary(obj.toJSON(), true);\r\n  }\r\n\r\n  for (var key in obj) {\r\n    if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  return false;\r\n}\r\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(8).Buffer))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFzLWJpbmFyeTIvaW5kZXguanM/NThiMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBnbG9iYWwgQmxvYiBGaWxlICovXHJcblxyXG4vKlxyXG4gKiBNb2R1bGUgcmVxdWlyZW1lbnRzLlxyXG4gKi9cclxuXHJcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpO1xyXG5cclxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcclxudmFyIHdpdGhOYXRpdmVCbG9iID0gdHlwZW9mIEJsb2IgPT09ICdmdW5jdGlvbicgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnICYmIHRvU3RyaW5nLmNhbGwoQmxvYikgPT09ICdbb2JqZWN0IEJsb2JDb25zdHJ1Y3Rvcl0nO1xyXG52YXIgd2l0aE5hdGl2ZUZpbGUgPSB0eXBlb2YgRmlsZSA9PT0gJ2Z1bmN0aW9uJyB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgRmlsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdG9TdHJpbmcuY2FsbChGaWxlKSA9PT0gJ1tvYmplY3QgRmlsZUNvbnN0cnVjdG9yXSc7XHJcblxyXG4vKipcclxuICogTW9kdWxlIGV4cG9ydHMuXHJcbiAqL1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBoYXNCaW5hcnk7XHJcblxyXG4vKipcclxuICogQ2hlY2tzIGZvciBiaW5hcnkgZGF0YS5cclxuICpcclxuICogU3VwcG9ydHMgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQmxvYiBhbmQgRmlsZS5cclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IGFueXRoaW5nXHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gaGFzQmluYXJ5IChvYmopIHtcclxuICBpZiAoIW9iaiB8fCB0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgaWYgKGlzQXJyYXkob2JqKSkge1xyXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgIGlmIChoYXNCaW5hcnkob2JqW2ldKSkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBpZiAoKHR5cGVvZiBCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgQnVmZmVyLmlzQnVmZmVyICYmIEJ1ZmZlci5pc0J1ZmZlcihvYmopKSB8fFxyXG4gICAgKHR5cGVvZiBBcnJheUJ1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiBvYmogaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgfHxcclxuICAgICh3aXRoTmF0aXZlQmxvYiAmJiBvYmogaW5zdGFuY2VvZiBCbG9iKSB8fFxyXG4gICAgKHdpdGhOYXRpdmVGaWxlICYmIG9iaiBpbnN0YW5jZW9mIEZpbGUpXHJcbiAgKSB7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIC8vIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL0F1dG9tYXR0aWMvaGFzLWJpbmFyeS9wdWxsLzRcclxuICBpZiAob2JqLnRvSlNPTiAmJiB0eXBlb2Ygb2JqLnRvSlNPTiA9PT0gJ2Z1bmN0aW9uJyAmJiBhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XHJcbiAgICByZXR1cm4gaGFzQmluYXJ5KG9iai50b0pTT04oKSwgdHJ1ZSk7XHJcbiAgfVxyXG5cclxuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XHJcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSAmJiBoYXNCaW5hcnkob2JqW2tleV0pKSB7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGZhbHNlO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///18\n")},function(module,exports,__webpack_require__){"use strict";eval("\r\n\r\nvar alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split('')\r\n  , length = 64\r\n  , map = {}\r\n  , seed = 0\r\n  , i = 0\r\n  , prev;\r\n\r\n/**\r\n * Return a string representing the specified number.\r\n *\r\n * @param {Number} num The number to convert.\r\n * @returns {String} The string representation of the number.\r\n * @api public\r\n */\r\nfunction encode(num) {\r\n  var encoded = '';\r\n\r\n  do {\r\n    encoded = alphabet[num % length] + encoded;\r\n    num = Math.floor(num / length);\r\n  } while (num > 0);\r\n\r\n  return encoded;\r\n}\r\n\r\n/**\r\n * Return the integer value specified by the given string.\r\n *\r\n * @param {String} str The string to convert.\r\n * @returns {Number} The integer value represented by the string.\r\n * @api public\r\n */\r\nfunction decode(str) {\r\n  var decoded = 0;\r\n\r\n  for (i = 0; i < str.length; i++) {\r\n    decoded = decoded * length + map[str.charAt(i)];\r\n  }\r\n\r\n  return decoded;\r\n}\r\n\r\n/**\r\n * Yeast: A tiny growing id generator.\r\n *\r\n * @returns {String} A unique id.\r\n * @api public\r\n */\r\nfunction yeast() {\r\n  var now = encode(+new Date());\r\n\r\n  if (now !== prev) return seed = 0, prev = now;\r\n  return now +'.'+ encode(seed++);\r\n}\r\n\r\n//\r\n// Map each character to its index.\r\n//\r\nfor (; i < length; i++) map[alphabet[i]] = i;\r\n\r\n//\r\n// Expose the `yeast`, `encode` and `decode` functions.\r\n//\r\nyeast.encode = encode;\r\nyeast.decode = decode;\r\nmodule.exports = yeast;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveWVhc3QvaW5kZXguanM/MDI5OSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XHJcblxyXG52YXIgYWxwaGFiZXQgPSAnMDEyMzQ1Njc4OUFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXotXycuc3BsaXQoJycpXHJcbiAgLCBsZW5ndGggPSA2NFxyXG4gICwgbWFwID0ge31cclxuICAsIHNlZWQgPSAwXHJcbiAgLCBpID0gMFxyXG4gICwgcHJldjtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm4gYSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBzcGVjaWZpZWQgbnVtYmVyLlxyXG4gKlxyXG4gKiBAcGFyYW0ge051bWJlcn0gbnVtIFRoZSBudW1iZXIgdG8gY29udmVydC5cclxuICogQHJldHVybnMge1N0cmluZ30gVGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgbnVtYmVyLlxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuZnVuY3Rpb24gZW5jb2RlKG51bSkge1xyXG4gIHZhciBlbmNvZGVkID0gJyc7XHJcblxyXG4gIGRvIHtcclxuICAgIGVuY29kZWQgPSBhbHBoYWJldFtudW0gJSBsZW5ndGhdICsgZW5jb2RlZDtcclxuICAgIG51bSA9IE1hdGguZmxvb3IobnVtIC8gbGVuZ3RoKTtcclxuICB9IHdoaWxlIChudW0gPiAwKTtcclxuXHJcbiAgcmV0dXJuIGVuY29kZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm4gdGhlIGludGVnZXIgdmFsdWUgc3BlY2lmaWVkIGJ5IHRoZSBnaXZlbiBzdHJpbmcuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxyXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgaW50ZWdlciB2YWx1ZSByZXByZXNlbnRlZCBieSB0aGUgc3RyaW5nLlxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuZnVuY3Rpb24gZGVjb2RlKHN0cikge1xyXG4gIHZhciBkZWNvZGVkID0gMDtcclxuXHJcbiAgZm9yIChpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xyXG4gICAgZGVjb2RlZCA9IGRlY29kZWQgKiBsZW5ndGggKyBtYXBbc3RyLmNoYXJBdChpKV07XHJcbiAgfVxyXG5cclxuICByZXR1cm4gZGVjb2RlZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFllYXN0OiBBIHRpbnkgZ3Jvd2luZyBpZCBnZW5lcmF0b3IuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtTdHJpbmd9IEEgdW5pcXVlIGlkLlxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuZnVuY3Rpb24geWVhc3QoKSB7XHJcbiAgdmFyIG5vdyA9IGVuY29kZSgrbmV3IERhdGUoKSk7XHJcblxyXG4gIGlmIChub3cgIT09IHByZXYpIHJldHVybiBzZWVkID0gMCwgcHJldiA9IG5vdztcclxuICByZXR1cm4gbm93ICsnLicrIGVuY29kZShzZWVkKyspO1xyXG59XHJcblxyXG4vL1xyXG4vLyBNYXAgZWFjaCBjaGFyYWN0ZXIgdG8gaXRzIGluZGV4LlxyXG4vL1xyXG5mb3IgKDsgaSA8IGxlbmd0aDsgaSsrKSBtYXBbYWxwaGFiZXRbaV1dID0gaTtcclxuXHJcbi8vXHJcbi8vIEV4cG9zZSB0aGUgYHllYXN0YCwgYGVuY29kZWAgYW5kIGBkZWNvZGVgIGZ1bmN0aW9ucy5cclxuLy9cclxueWVhc3QuZW5jb2RlID0gZW5jb2RlO1xyXG55ZWFzdC5kZWNvZGUgPSBkZWNvZGU7XHJcbm1vZHVsZS5leHBvcnRzID0geWVhc3Q7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///19\n")},function(module,exports){eval("\r\nvar indexOf = [].indexOf;\r\n\r\nmodule.exports = function(arr, obj){\r\n  if (indexOf) return arr.indexOf(obj);\r\n  for (var i = 0; i < arr.length; ++i) {\r\n    if (arr[i] === obj) return i;\r\n  }\r\n  return -1;\r\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5kZXhvZi9pbmRleC5qcz9lZTM0Il0sInNvdXJjZXNDb250ZW50IjpbIlxyXG52YXIgaW5kZXhPZiA9IFtdLmluZGV4T2Y7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGFyciwgb2JqKXtcclxuICBpZiAoaW5kZXhPZikgcmV0dXJuIGFyci5pbmRleE9mKG9iaik7XHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyArK2kpIHtcclxuICAgIGlmIChhcnJbaV0gPT09IG9iaikgcmV0dXJuIGk7XHJcbiAgfVxyXG4gIHJldHVybiAtMTtcclxufTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///20\n")},function(module,exports,__webpack_require__){eval("\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nvar parser = __webpack_require__(7);\r\nvar Emitter = __webpack_require__(0);\r\nvar toArray = __webpack_require__(51);\r\nvar on = __webpack_require__(22);\r\nvar bind = __webpack_require__(23);\r\nvar debug = __webpack_require__(2)('socket.io-client:socket');\r\nvar parseqs = __webpack_require__(3);\r\nvar hasBin = __webpack_require__(18);\r\n\r\n/**\r\n * Module exports.\r\n */\r\n\r\nmodule.exports = exports = Socket;\r\n\r\n/**\r\n * Internal events (blacklisted).\r\n * These events can't be emitted by the user.\r\n *\r\n * @api private\r\n */\r\n\r\nvar events = {\r\n  connect: 1,\r\n  connect_error: 1,\r\n  connect_timeout: 1,\r\n  connecting: 1,\r\n  disconnect: 1,\r\n  error: 1,\r\n  reconnect: 1,\r\n  reconnect_attempt: 1,\r\n  reconnect_failed: 1,\r\n  reconnect_error: 1,\r\n  reconnecting: 1,\r\n  ping: 1,\r\n  pong: 1\r\n};\r\n\r\n/**\r\n * Shortcut to `Emitter#emit`.\r\n */\r\n\r\nvar emit = Emitter.prototype.emit;\r\n\r\n/**\r\n * `Socket` constructor.\r\n *\r\n * @api public\r\n */\r\n\r\nfunction Socket (io, nsp, opts) {\r\n  this.io = io;\r\n  this.nsp = nsp;\r\n  this.json = this; // compat\r\n  this.ids = 0;\r\n  this.acks = {};\r\n  this.receiveBuffer = [];\r\n  this.sendBuffer = [];\r\n  this.connected = false;\r\n  this.disconnected = true;\r\n  this.flags = {};\r\n  if (opts && opts.query) {\r\n    this.query = opts.query;\r\n  }\r\n  if (this.io.autoConnect) this.open();\r\n}\r\n\r\n/**\r\n * Mix in `Emitter`.\r\n */\r\n\r\nEmitter(Socket.prototype);\r\n\r\n/**\r\n * Subscribe to open, close and packet events\r\n *\r\n * @api private\r\n */\r\n\r\nSocket.prototype.subEvents = function () {\r\n  if (this.subs) return;\r\n\r\n  var io = this.io;\r\n  this.subs = [\r\n    on(io, 'open', bind(this, 'onopen')),\r\n    on(io, 'packet', bind(this, 'onpacket')),\r\n    on(io, 'close', bind(this, 'onclose'))\r\n  ];\r\n};\r\n\r\n/**\r\n * \"Opens\" the socket.\r\n *\r\n * @api public\r\n */\r\n\r\nSocket.prototype.open =\r\nSocket.prototype.connect = function () {\r\n  if (this.connected) return this;\r\n\r\n  this.subEvents();\r\n  this.io.open(); // ensure open\r\n  if ('open' === this.io.readyState) this.onopen();\r\n  this.emit('connecting');\r\n  return this;\r\n};\r\n\r\n/**\r\n * Sends a `message` event.\r\n *\r\n * @return {Socket} self\r\n * @api public\r\n */\r\n\r\nSocket.prototype.send = function () {\r\n  var args = toArray(arguments);\r\n  args.unshift('message');\r\n  this.emit.apply(this, args);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Override `emit`.\r\n * If the event is in `events`, it's emitted normally.\r\n *\r\n * @param {String} event name\r\n * @return {Socket} self\r\n * @api public\r\n */\r\n\r\nSocket.prototype.emit = function (ev) {\r\n  if (events.hasOwnProperty(ev)) {\r\n    emit.apply(this, arguments);\r\n    return this;\r\n  }\r\n\r\n  var args = toArray(arguments);\r\n  var packet = {\r\n    type: (this.flags.binary !== undefined ? this.flags.binary : hasBin(args)) ? parser.BINARY_EVENT : parser.EVENT,\r\n    data: args\r\n  };\r\n\r\n  packet.options = {};\r\n  packet.options.compress = !this.flags || false !== this.flags.compress;\r\n\r\n  // event ack callback\r\n  if ('function' === typeof args[args.length - 1]) {\r\n    debug('emitting packet with ack id %d', this.ids);\r\n    this.acks[this.ids] = args.pop();\r\n    packet.id = this.ids++;\r\n  }\r\n\r\n  if (this.connected) {\r\n    this.packet(packet);\r\n  } else {\r\n    this.sendBuffer.push(packet);\r\n  }\r\n\r\n  this.flags = {};\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Sends a packet.\r\n *\r\n * @param {Object} packet\r\n * @api private\r\n */\r\n\r\nSocket.prototype.packet = function (packet) {\r\n  packet.nsp = this.nsp;\r\n  this.io.packet(packet);\r\n};\r\n\r\n/**\r\n * Called upon engine `open`.\r\n *\r\n * @api private\r\n */\r\n\r\nSocket.prototype.onopen = function () {\r\n  debug('transport is open - connecting');\r\n\r\n  // write connect packet if necessary\r\n  if ('/' !== this.nsp) {\r\n    if (this.query) {\r\n      var query = typeof this.query === 'object' ? parseqs.encode(this.query) : this.query;\r\n      debug('sending connect packet with query %s', query);\r\n      this.packet({type: parser.CONNECT, query: query});\r\n    } else {\r\n      this.packet({type: parser.CONNECT});\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Called upon engine `close`.\r\n *\r\n * @param {String} reason\r\n * @api private\r\n */\r\n\r\nSocket.prototype.onclose = function (reason) {\r\n  debug('close (%s)', reason);\r\n  this.connected = false;\r\n  this.disconnected = true;\r\n  delete this.id;\r\n  this.emit('disconnect', reason);\r\n};\r\n\r\n/**\r\n * Called with socket packet.\r\n *\r\n * @param {Object} packet\r\n * @api private\r\n */\r\n\r\nSocket.prototype.onpacket = function (packet) {\r\n  var sameNamespace = packet.nsp === this.nsp;\r\n  var rootNamespaceError = packet.type === parser.ERROR && packet.nsp === '/';\r\n\r\n  if (!sameNamespace && !rootNamespaceError) return;\r\n\r\n  switch (packet.type) {\r\n    case parser.CONNECT:\r\n      this.onconnect();\r\n      break;\r\n\r\n    case parser.EVENT:\r\n      this.onevent(packet);\r\n      break;\r\n\r\n    case parser.BINARY_EVENT:\r\n      this.onevent(packet);\r\n      break;\r\n\r\n    case parser.ACK:\r\n      this.onack(packet);\r\n      break;\r\n\r\n    case parser.BINARY_ACK:\r\n      this.onack(packet);\r\n      break;\r\n\r\n    case parser.DISCONNECT:\r\n      this.ondisconnect();\r\n      break;\r\n\r\n    case parser.ERROR:\r\n      this.emit('error', packet.data);\r\n      break;\r\n  }\r\n};\r\n\r\n/**\r\n * Called upon a server event.\r\n *\r\n * @param {Object} packet\r\n * @api private\r\n */\r\n\r\nSocket.prototype.onevent = function (packet) {\r\n  var args = packet.data || [];\r\n  debug('emitting event %j', args);\r\n\r\n  if (null != packet.id) {\r\n    debug('attaching ack callback to event');\r\n    args.push(this.ack(packet.id));\r\n  }\r\n\r\n  if (this.connected) {\r\n    emit.apply(this, args);\r\n  } else {\r\n    this.receiveBuffer.push(args);\r\n  }\r\n};\r\n\r\n/**\r\n * Produces an ack callback to emit with an event.\r\n *\r\n * @api private\r\n */\r\n\r\nSocket.prototype.ack = function (id) {\r\n  var self = this;\r\n  var sent = false;\r\n  return function () {\r\n    // prevent double callbacks\r\n    if (sent) return;\r\n    sent = true;\r\n    var args = toArray(arguments);\r\n    debug('sending ack %j', args);\r\n\r\n    self.packet({\r\n      type: hasBin(args) ? parser.BINARY_ACK : parser.ACK,\r\n      id: id,\r\n      data: args\r\n    });\r\n  };\r\n};\r\n\r\n/**\r\n * Called upon a server acknowlegement.\r\n *\r\n * @param {Object} packet\r\n * @api private\r\n */\r\n\r\nSocket.prototype.onack = function (packet) {\r\n  var ack = this.acks[packet.id];\r\n  if ('function' === typeof ack) {\r\n    debug('calling ack %s with %j', packet.id, packet.data);\r\n    ack.apply(this, packet.data);\r\n    delete this.acks[packet.id];\r\n  } else {\r\n    debug('bad ack %s', packet.id);\r\n  }\r\n};\r\n\r\n/**\r\n * Called upon server connect.\r\n *\r\n * @api private\r\n */\r\n\r\nSocket.prototype.onconnect = function () {\r\n  this.connected = true;\r\n  this.disconnected = false;\r\n  this.emit('connect');\r\n  this.emitBuffered();\r\n};\r\n\r\n/**\r\n * Emit buffered events (received and emitted).\r\n *\r\n * @api private\r\n */\r\n\r\nSocket.prototype.emitBuffered = function () {\r\n  var i;\r\n  for (i = 0; i < this.receiveBuffer.length; i++) {\r\n    emit.apply(this, this.receiveBuffer[i]);\r\n  }\r\n  this.receiveBuffer = [];\r\n\r\n  for (i = 0; i < this.sendBuffer.length; i++) {\r\n    this.packet(this.sendBuffer[i]);\r\n  }\r\n  this.sendBuffer = [];\r\n};\r\n\r\n/**\r\n * Called upon server disconnect.\r\n *\r\n * @api private\r\n */\r\n\r\nSocket.prototype.ondisconnect = function () {\r\n  debug('server disconnect (%s)', this.nsp);\r\n  this.destroy();\r\n  this.onclose('io server disconnect');\r\n};\r\n\r\n/**\r\n * Called upon forced client/server side disconnections,\r\n * this method ensures the manager stops tracking us and\r\n * that reconnections don't get triggered for this.\r\n *\r\n * @api private.\r\n */\r\n\r\nSocket.prototype.destroy = function () {\r\n  if (this.subs) {\r\n    // clean subscriptions to avoid reconnections\r\n    for (var i = 0; i < this.subs.length; i++) {\r\n      this.subs[i].destroy();\r\n    }\r\n    this.subs = null;\r\n  }\r\n\r\n  this.io.destroy(this);\r\n};\r\n\r\n/**\r\n * Disconnects the socket manually.\r\n *\r\n * @return {Socket} self\r\n * @api public\r\n */\r\n\r\nSocket.prototype.close =\r\nSocket.prototype.disconnect = function () {\r\n  if (this.connected) {\r\n    debug('performing disconnect (%s)', this.nsp);\r\n    this.packet({ type: parser.DISCONNECT });\r\n  }\r\n\r\n  // remove socket from pool\r\n  this.destroy();\r\n\r\n  if (this.connected) {\r\n    // fire events\r\n    this.onclose('io client disconnect');\r\n  }\r\n  return this;\r\n};\r\n\r\n/**\r\n * Sets the compress flag.\r\n *\r\n * @param {Boolean} if `true`, compresses the sending data\r\n * @return {Socket} self\r\n * @api public\r\n */\r\n\r\nSocket.prototype.compress = function (compress) {\r\n  this.flags.compress = compress;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Sets the binary flag\r\n *\r\n * @param {Boolean} whether the emitted data contains binary\r\n * @return {Socket} self\r\n * @api public\r\n */\r\n\r\nSocket.prototype.binary = function (binary) {\r\n  this.flags.binary = binary;\r\n  return this;\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///21\n")},function(module,exports){eval("\r\n/**\r\n * Module exports.\r\n */\r\n\r\nmodule.exports = on;\r\n\r\n/**\r\n * Helper for subscriptions.\r\n *\r\n * @param {Object|EventEmitter} obj with `Emitter` mixin or `EventEmitter`\r\n * @param {String} event name\r\n * @param {Function} callback\r\n * @api public\r\n */\r\n\r\nfunction on (obj, ev, fn) {\r\n  obj.on(ev, fn);\r\n  return {\r\n    destroy: function () {\r\n      obj.removeListener(ev, fn);\r\n    }\r\n  };\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9saWIvb24uanM/ZDgzOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcclxuLyoqXHJcbiAqIE1vZHVsZSBleHBvcnRzLlxyXG4gKi9cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gb247XHJcblxyXG4vKipcclxuICogSGVscGVyIGZvciBzdWJzY3JpcHRpb25zLlxyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdHxFdmVudEVtaXR0ZXJ9IG9iaiB3aXRoIGBFbWl0dGVyYCBtaXhpbiBvciBgRXZlbnRFbWl0dGVyYFxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnQgbmFtZVxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIG9uIChvYmosIGV2LCBmbikge1xyXG4gIG9iai5vbihldiwgZm4pO1xyXG4gIHJldHVybiB7XHJcbiAgICBkZXN0cm95OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIG9iai5yZW1vdmVMaXN0ZW5lcihldiwgZm4pO1xyXG4gICAgfVxyXG4gIH07XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///22\n")},function(module,exports){eval("/**\r\n * Slice reference.\r\n */\r\n\r\nvar slice = [].slice;\r\n\r\n/**\r\n * Bind `obj` to `fn`.\r\n *\r\n * @param {Object} obj\r\n * @param {Function|String} fn or string\r\n * @return {Function}\r\n * @api public\r\n */\r\n\r\nmodule.exports = function(obj, fn){\r\n  if ('string' == typeof fn) fn = obj[fn];\r\n  if ('function' != typeof fn) throw new Error('bind() requires a function');\r\n  var args = slice.call(arguments, 2);\r\n  return function(){\r\n    return fn.apply(obj, args.concat(slice.call(arguments)));\r\n  }\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50LWJpbmQvaW5kZXguanM/NDBkZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogU2xpY2UgcmVmZXJlbmNlLlxyXG4gKi9cclxuXHJcbnZhciBzbGljZSA9IFtdLnNsaWNlO1xyXG5cclxuLyoqXHJcbiAqIEJpbmQgYG9iamAgdG8gYGZuYC5cclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IG9ialxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufFN0cmluZ30gZm4gb3Igc3RyaW5nXHJcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqLCBmbil7XHJcbiAgaWYgKCdzdHJpbmcnID09IHR5cGVvZiBmbikgZm4gPSBvYmpbZm5dO1xyXG4gIGlmICgnZnVuY3Rpb24nICE9IHR5cGVvZiBmbikgdGhyb3cgbmV3IEVycm9yKCdiaW5kKCkgcmVxdWlyZXMgYSBmdW5jdGlvbicpO1xyXG4gIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpO1xyXG4gIHJldHVybiBmdW5jdGlvbigpe1xyXG4gICAgcmV0dXJuIGZuLmFwcGx5KG9iaiwgYXJncy5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMpKSk7XHJcbiAgfVxyXG59O1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///23\n")},function(module,exports,__webpack_require__){eval("\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nvar url = __webpack_require__(25);\r\nvar parser = __webpack_require__(7);\r\nvar Manager = __webpack_require__(15);\r\nvar debug = __webpack_require__(2)('socket.io-client');\r\n\r\n/**\r\n * Module exports.\r\n */\r\n\r\nmodule.exports = exports = lookup;\r\n\r\n/**\r\n * Managers cache.\r\n */\r\n\r\nvar cache = exports.managers = {};\r\n\r\n/**\r\n * Looks up an existing `Manager` for multiplexing.\r\n * If the user summons:\r\n *\r\n *   `io('http://localhost/a');`\r\n *   `io('http://localhost/b');`\r\n *\r\n * We reuse the existing instance based on same scheme/port/host,\r\n * and we initialize sockets for each namespace.\r\n *\r\n * @api public\r\n */\r\n\r\nfunction lookup (uri, opts) {\r\n  if (typeof uri === 'object') {\r\n    opts = uri;\r\n    uri = undefined;\r\n  }\r\n\r\n  opts = opts || {};\r\n\r\n  var parsed = url(uri);\r\n  var source = parsed.source;\r\n  var id = parsed.id;\r\n  var path = parsed.path;\r\n  var sameNamespace = cache[id] && path in cache[id].nsps;\r\n  var newConnection = opts.forceNew || opts['force new connection'] ||\r\n                      false === opts.multiplex || sameNamespace;\r\n\r\n  var io;\r\n\r\n  if (newConnection) {\r\n    debug('ignoring socket cache for %s', source);\r\n    io = Manager(source, opts);\r\n  } else {\r\n    if (!cache[id]) {\r\n      debug('new io instance for %s', source);\r\n      cache[id] = Manager(source, opts);\r\n    }\r\n    io = cache[id];\r\n  }\r\n  if (parsed.query && !opts.query) {\r\n    opts.query = parsed.query;\r\n  }\r\n  return io.socket(parsed.path, opts);\r\n}\r\n\r\n/**\r\n * Protocol version.\r\n *\r\n * @api public\r\n */\r\n\r\nexports.protocol = parser.protocol;\r\n\r\n/**\r\n * `connect`.\r\n *\r\n * @param {String} uri\r\n * @api public\r\n */\r\n\r\nexports.connect = lookup;\r\n\r\n/**\r\n * Expose constructors for standalone build.\r\n *\r\n * @api public\r\n */\r\n\r\nexports.Manager = __webpack_require__(15);\r\nexports.Socket = __webpack_require__(21);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9saWIvaW5kZXguanM/ODA1NSJdLCJzb3VyY2VzQ29udGVudCI6WyJcclxuLyoqXHJcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXHJcbiAqL1xyXG5cclxudmFyIHVybCA9IHJlcXVpcmUoJy4vdXJsJyk7XHJcbnZhciBwYXJzZXIgPSByZXF1aXJlKCdzb2NrZXQuaW8tcGFyc2VyJyk7XHJcbnZhciBNYW5hZ2VyID0gcmVxdWlyZSgnLi9tYW5hZ2VyJyk7XHJcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tldC5pby1jbGllbnQnKTtcclxuXHJcbi8qKlxyXG4gKiBNb2R1bGUgZXhwb3J0cy5cclxuICovXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBsb29rdXA7XHJcblxyXG4vKipcclxuICogTWFuYWdlcnMgY2FjaGUuXHJcbiAqL1xyXG5cclxudmFyIGNhY2hlID0gZXhwb3J0cy5tYW5hZ2VycyA9IHt9O1xyXG5cclxuLyoqXHJcbiAqIExvb2tzIHVwIGFuIGV4aXN0aW5nIGBNYW5hZ2VyYCBmb3IgbXVsdGlwbGV4aW5nLlxyXG4gKiBJZiB0aGUgdXNlciBzdW1tb25zOlxyXG4gKlxyXG4gKiAgIGBpbygnaHR0cDovL2xvY2FsaG9zdC9hJyk7YFxyXG4gKiAgIGBpbygnaHR0cDovL2xvY2FsaG9zdC9iJyk7YFxyXG4gKlxyXG4gKiBXZSByZXVzZSB0aGUgZXhpc3RpbmcgaW5zdGFuY2UgYmFzZWQgb24gc2FtZSBzY2hlbWUvcG9ydC9ob3N0LFxyXG4gKiBhbmQgd2UgaW5pdGlhbGl6ZSBzb2NrZXRzIGZvciBlYWNoIG5hbWVzcGFjZS5cclxuICpcclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5mdW5jdGlvbiBsb29rdXAgKHVyaSwgb3B0cykge1xyXG4gIGlmICh0eXBlb2YgdXJpID09PSAnb2JqZWN0Jykge1xyXG4gICAgb3B0cyA9IHVyaTtcclxuICAgIHVyaSA9IHVuZGVmaW5lZDtcclxuICB9XHJcblxyXG4gIG9wdHMgPSBvcHRzIHx8IHt9O1xyXG5cclxuICB2YXIgcGFyc2VkID0gdXJsKHVyaSk7XHJcbiAgdmFyIHNvdXJjZSA9IHBhcnNlZC5zb3VyY2U7XHJcbiAgdmFyIGlkID0gcGFyc2VkLmlkO1xyXG4gIHZhciBwYXRoID0gcGFyc2VkLnBhdGg7XHJcbiAgdmFyIHNhbWVOYW1lc3BhY2UgPSBjYWNoZVtpZF0gJiYgcGF0aCBpbiBjYWNoZVtpZF0ubnNwcztcclxuICB2YXIgbmV3Q29ubmVjdGlvbiA9IG9wdHMuZm9yY2VOZXcgfHwgb3B0c1snZm9yY2UgbmV3IGNvbm5lY3Rpb24nXSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgZmFsc2UgPT09IG9wdHMubXVsdGlwbGV4IHx8IHNhbWVOYW1lc3BhY2U7XHJcblxyXG4gIHZhciBpbztcclxuXHJcbiAgaWYgKG5ld0Nvbm5lY3Rpb24pIHtcclxuICAgIGRlYnVnKCdpZ25vcmluZyBzb2NrZXQgY2FjaGUgZm9yICVzJywgc291cmNlKTtcclxuICAgIGlvID0gTWFuYWdlcihzb3VyY2UsIG9wdHMpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBpZiAoIWNhY2hlW2lkXSkge1xyXG4gICAgICBkZWJ1ZygnbmV3IGlvIGluc3RhbmNlIGZvciAlcycsIHNvdXJjZSk7XHJcbiAgICAgIGNhY2hlW2lkXSA9IE1hbmFnZXIoc291cmNlLCBvcHRzKTtcclxuICAgIH1cclxuICAgIGlvID0gY2FjaGVbaWRdO1xyXG4gIH1cclxuICBpZiAocGFyc2VkLnF1ZXJ5ICYmICFvcHRzLnF1ZXJ5KSB7XHJcbiAgICBvcHRzLnF1ZXJ5ID0gcGFyc2VkLnF1ZXJ5O1xyXG4gIH1cclxuICByZXR1cm4gaW8uc29ja2V0KHBhcnNlZC5wYXRoLCBvcHRzKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFByb3RvY29sIHZlcnNpb24uXHJcbiAqXHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuZXhwb3J0cy5wcm90b2NvbCA9IHBhcnNlci5wcm90b2NvbDtcclxuXHJcbi8qKlxyXG4gKiBgY29ubmVjdGAuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSB1cmlcclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5leHBvcnRzLmNvbm5lY3QgPSBsb29rdXA7XHJcblxyXG4vKipcclxuICogRXhwb3NlIGNvbnN0cnVjdG9ycyBmb3Igc3RhbmRhbG9uZSBidWlsZC5cclxuICpcclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5leHBvcnRzLk1hbmFnZXIgPSByZXF1aXJlKCcuL21hbmFnZXInKTtcclxuZXhwb3J0cy5Tb2NrZXQgPSByZXF1aXJlKCcuL3NvY2tldCcpO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///24\n")},function(module,exports,__webpack_require__){eval("\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nvar parseuri = __webpack_require__(11);\r\nvar debug = __webpack_require__(2)('socket.io-client:url');\r\n\r\n/**\r\n * Module exports.\r\n */\r\n\r\nmodule.exports = url;\r\n\r\n/**\r\n * URL parser.\r\n *\r\n * @param {String} url\r\n * @param {Object} An object meant to mimic window.location.\r\n *                 Defaults to window.location.\r\n * @api public\r\n */\r\n\r\nfunction url (uri, loc) {\r\n  var obj = uri;\r\n\r\n  // default to window.location\r\n  loc = loc || (typeof location !== 'undefined' && location);\r\n  if (null == uri) uri = loc.protocol + '//' + loc.host;\r\n\r\n  // relative path support\r\n  if ('string' === typeof uri) {\r\n    if ('/' === uri.charAt(0)) {\r\n      if ('/' === uri.charAt(1)) {\r\n        uri = loc.protocol + uri;\r\n      } else {\r\n        uri = loc.host + uri;\r\n      }\r\n    }\r\n\r\n    if (!/^(https?|wss?):\\/\\//.test(uri)) {\r\n      debug('protocol-less url %s', uri);\r\n      if ('undefined' !== typeof loc) {\r\n        uri = loc.protocol + '//' + uri;\r\n      } else {\r\n        uri = 'https://' + uri;\r\n      }\r\n    }\r\n\r\n    // parse\r\n    debug('parse %s', uri);\r\n    obj = parseuri(uri);\r\n  }\r\n\r\n  // make sure we treat `localhost:80` and `localhost` equally\r\n  if (!obj.port) {\r\n    if (/^(http|ws)$/.test(obj.protocol)) {\r\n      obj.port = '80';\r\n    } else if (/^(http|ws)s$/.test(obj.protocol)) {\r\n      obj.port = '443';\r\n    }\r\n  }\r\n\r\n  obj.path = obj.path || '/';\r\n\r\n  var ipv6 = obj.host.indexOf(':') !== -1;\r\n  var host = ipv6 ? '[' + obj.host + ']' : obj.host;\r\n\r\n  // define unique id\r\n  obj.id = obj.protocol + '://' + host + ':' + obj.port;\r\n  // define href\r\n  obj.href = obj.protocol + '://' + host + (loc && loc.port === obj.port ? '' : (':' + obj.port));\r\n\r\n  return obj;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9saWIvdXJsLmpzP2NjOWUiXSwic291cmNlc0NvbnRlbnQiOlsiXHJcbi8qKlxyXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxyXG4gKi9cclxuXHJcbnZhciBwYXJzZXVyaSA9IHJlcXVpcmUoJ3BhcnNldXJpJyk7XHJcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tldC5pby1jbGllbnQ6dXJsJyk7XHJcblxyXG4vKipcclxuICogTW9kdWxlIGV4cG9ydHMuXHJcbiAqL1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB1cmw7XHJcblxyXG4vKipcclxuICogVVJMIHBhcnNlci5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IHVybFxyXG4gKiBAcGFyYW0ge09iamVjdH0gQW4gb2JqZWN0IG1lYW50IHRvIG1pbWljIHdpbmRvdy5sb2NhdGlvbi5cclxuICogICAgICAgICAgICAgICAgIERlZmF1bHRzIHRvIHdpbmRvdy5sb2NhdGlvbi5cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5mdW5jdGlvbiB1cmwgKHVyaSwgbG9jKSB7XHJcbiAgdmFyIG9iaiA9IHVyaTtcclxuXHJcbiAgLy8gZGVmYXVsdCB0byB3aW5kb3cubG9jYXRpb25cclxuICBsb2MgPSBsb2MgfHwgKHR5cGVvZiBsb2NhdGlvbiAhPT0gJ3VuZGVmaW5lZCcgJiYgbG9jYXRpb24pO1xyXG4gIGlmIChudWxsID09IHVyaSkgdXJpID0gbG9jLnByb3RvY29sICsgJy8vJyArIGxvYy5ob3N0O1xyXG5cclxuICAvLyByZWxhdGl2ZSBwYXRoIHN1cHBvcnRcclxuICBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiB1cmkpIHtcclxuICAgIGlmICgnLycgPT09IHVyaS5jaGFyQXQoMCkpIHtcclxuICAgICAgaWYgKCcvJyA9PT0gdXJpLmNoYXJBdCgxKSkge1xyXG4gICAgICAgIHVyaSA9IGxvYy5wcm90b2NvbCArIHVyaTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB1cmkgPSBsb2MuaG9zdCArIHVyaTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmICghL14oaHR0cHM/fHdzcz8pOlxcL1xcLy8udGVzdCh1cmkpKSB7XHJcbiAgICAgIGRlYnVnKCdwcm90b2NvbC1sZXNzIHVybCAlcycsIHVyaSk7XHJcbiAgICAgIGlmICgndW5kZWZpbmVkJyAhPT0gdHlwZW9mIGxvYykge1xyXG4gICAgICAgIHVyaSA9IGxvYy5wcm90b2NvbCArICcvLycgKyB1cmk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdXJpID0gJ2h0dHBzOi8vJyArIHVyaTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIHBhcnNlXHJcbiAgICBkZWJ1ZygncGFyc2UgJXMnLCB1cmkpO1xyXG4gICAgb2JqID0gcGFyc2V1cmkodXJpKTtcclxuICB9XHJcblxyXG4gIC8vIG1ha2Ugc3VyZSB3ZSB0cmVhdCBgbG9jYWxob3N0OjgwYCBhbmQgYGxvY2FsaG9zdGAgZXF1YWxseVxyXG4gIGlmICghb2JqLnBvcnQpIHtcclxuICAgIGlmICgvXihodHRwfHdzKSQvLnRlc3Qob2JqLnByb3RvY29sKSkge1xyXG4gICAgICBvYmoucG9ydCA9ICc4MCc7XHJcbiAgICB9IGVsc2UgaWYgKC9eKGh0dHB8d3MpcyQvLnRlc3Qob2JqLnByb3RvY29sKSkge1xyXG4gICAgICBvYmoucG9ydCA9ICc0NDMnO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgb2JqLnBhdGggPSBvYmoucGF0aCB8fCAnLyc7XHJcblxyXG4gIHZhciBpcHY2ID0gb2JqLmhvc3QuaW5kZXhPZignOicpICE9PSAtMTtcclxuICB2YXIgaG9zdCA9IGlwdjYgPyAnWycgKyBvYmouaG9zdCArICddJyA6IG9iai5ob3N0O1xyXG5cclxuICAvLyBkZWZpbmUgdW5pcXVlIGlkXHJcbiAgb2JqLmlkID0gb2JqLnByb3RvY29sICsgJzovLycgKyBob3N0ICsgJzonICsgb2JqLnBvcnQ7XHJcbiAgLy8gZGVmaW5lIGhyZWZcclxuICBvYmouaHJlZiA9IG9iai5wcm90b2NvbCArICc6Ly8nICsgaG9zdCArIChsb2MgJiYgbG9jLnBvcnQgPT09IG9iai5wb3J0ID8gJycgOiAoJzonICsgb2JqLnBvcnQpKTtcclxuXHJcbiAgcmV0dXJuIG9iajtcclxufVxyXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///25\n")},function(module,exports,__webpack_require__){eval("\r\n/**\r\n * This is the common logic for both the Node.js and web browser\r\n * implementations of `debug()`.\r\n *\r\n * Expose `debug()` as the module.\r\n */\r\n\r\nexports = module.exports = createDebug.debug = createDebug['default'] = createDebug;\r\nexports.coerce = coerce;\r\nexports.disable = disable;\r\nexports.enable = enable;\r\nexports.enabled = enabled;\r\nexports.humanize = __webpack_require__(27);\r\n\r\n/**\r\n * Active `debug` instances.\r\n */\r\nexports.instances = [];\r\n\r\n/**\r\n * The currently active debug mode names, and names to skip.\r\n */\r\n\r\nexports.names = [];\r\nexports.skips = [];\r\n\r\n/**\r\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.\r\n *\r\n * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\r\n */\r\n\r\nexports.formatters = {};\r\n\r\n/**\r\n * Select a color.\r\n * @param {String} namespace\r\n * @return {Number}\r\n * @api private\r\n */\r\n\r\nfunction selectColor(namespace) {\r\n  var hash = 0, i;\r\n\r\n  for (i in namespace) {\r\n    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);\r\n    hash |= 0; // Convert to 32bit integer\r\n  }\r\n\r\n  return exports.colors[Math.abs(hash) % exports.colors.length];\r\n}\r\n\r\n/**\r\n * Create a debugger with the given `namespace`.\r\n *\r\n * @param {String} namespace\r\n * @return {Function}\r\n * @api public\r\n */\r\n\r\nfunction createDebug(namespace) {\r\n\r\n  var prevTime;\r\n\r\n  function debug() {\r\n    // disabled?\r\n    if (!debug.enabled) return;\r\n\r\n    var self = debug;\r\n\r\n    // set `diff` timestamp\r\n    var curr = +new Date();\r\n    var ms = curr - (prevTime || curr);\r\n    self.diff = ms;\r\n    self.prev = prevTime;\r\n    self.curr = curr;\r\n    prevTime = curr;\r\n\r\n    // turn the `arguments` into a proper Array\r\n    var args = new Array(arguments.length);\r\n    for (var i = 0; i < args.length; i++) {\r\n      args[i] = arguments[i];\r\n    }\r\n\r\n    args[0] = exports.coerce(args[0]);\r\n\r\n    if ('string' !== typeof args[0]) {\r\n      // anything else let's inspect with %O\r\n      args.unshift('%O');\r\n    }\r\n\r\n    // apply any `formatters` transformations\r\n    var index = 0;\r\n    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {\r\n      // if we encounter an escaped % then don't increase the array index\r\n      if (match === '%%') return match;\r\n      index++;\r\n      var formatter = exports.formatters[format];\r\n      if ('function' === typeof formatter) {\r\n        var val = args[index];\r\n        match = formatter.call(self, val);\r\n\r\n        // now we need to remove `args[index]` since it's inlined in the `format`\r\n        args.splice(index, 1);\r\n        index--;\r\n      }\r\n      return match;\r\n    });\r\n\r\n    // apply env-specific formatting (colors, etc.)\r\n    exports.formatArgs.call(self, args);\r\n\r\n    var logFn = debug.log || exports.log || console.log.bind(console);\r\n    logFn.apply(self, args);\r\n  }\r\n\r\n  debug.namespace = namespace;\r\n  debug.enabled = exports.enabled(namespace);\r\n  debug.useColors = exports.useColors();\r\n  debug.color = selectColor(namespace);\r\n  debug.destroy = destroy;\r\n\r\n  // env-specific initialization logic for debug instances\r\n  if ('function' === typeof exports.init) {\r\n    exports.init(debug);\r\n  }\r\n\r\n  exports.instances.push(debug);\r\n\r\n  return debug;\r\n}\r\n\r\nfunction destroy () {\r\n  var index = exports.instances.indexOf(this);\r\n  if (index !== -1) {\r\n    exports.instances.splice(index, 1);\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Enables a debug mode by namespaces. This can include modes\r\n * separated by a colon and wildcards.\r\n *\r\n * @param {String} namespaces\r\n * @api public\r\n */\r\n\r\nfunction enable(namespaces) {\r\n  exports.save(namespaces);\r\n\r\n  exports.names = [];\r\n  exports.skips = [];\r\n\r\n  var i;\r\n  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\r\n  var len = split.length;\r\n\r\n  for (i = 0; i < len; i++) {\r\n    if (!split[i]) continue; // ignore empty strings\r\n    namespaces = split[i].replace(/\\*/g, '.*?');\r\n    if (namespaces[0] === '-') {\r\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\r\n    } else {\r\n      exports.names.push(new RegExp('^' + namespaces + '$'));\r\n    }\r\n  }\r\n\r\n  for (i = 0; i < exports.instances.length; i++) {\r\n    var instance = exports.instances[i];\r\n    instance.enabled = exports.enabled(instance.namespace);\r\n  }\r\n}\r\n\r\n/**\r\n * Disable debug output.\r\n *\r\n * @api public\r\n */\r\n\r\nfunction disable() {\r\n  exports.enable('');\r\n}\r\n\r\n/**\r\n * Returns true if the given mode name is enabled, false otherwise.\r\n *\r\n * @param {String} name\r\n * @return {Boolean}\r\n * @api public\r\n */\r\n\r\nfunction enabled(name) {\r\n  if (name[name.length - 1] === '*') {\r\n    return true;\r\n  }\r\n  var i, len;\r\n  for (i = 0, len = exports.skips.length; i < len; i++) {\r\n    if (exports.skips[i].test(name)) {\r\n      return false;\r\n    }\r\n  }\r\n  for (i = 0, len = exports.names.length; i < len; i++) {\r\n    if (exports.names[i].test(name)) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * Coerce `val`.\r\n *\r\n * @param {Mixed} val\r\n * @return {Mixed}\r\n * @api private\r\n */\r\n\r\nfunction coerce(val) {\r\n  if (val instanceof Error) return val.stack || val.message;\r\n  return val;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///26\n")},function(module,exports){eval("/**\r\n * Helpers.\r\n */\r\n\r\nvar s = 1000;\r\nvar m = s * 60;\r\nvar h = m * 60;\r\nvar d = h * 24;\r\nvar y = d * 365.25;\r\n\r\n/**\r\n * Parse or format the given `val`.\r\n *\r\n * Options:\r\n *\r\n *  - `long` verbose formatting [false]\r\n *\r\n * @param {String|Number} val\r\n * @param {Object} [options]\r\n * @throws {Error} throw an error if val is not a non-empty string or a number\r\n * @return {String|Number}\r\n * @api public\r\n */\r\n\r\nmodule.exports = function(val, options) {\r\n  options = options || {};\r\n  var type = typeof val;\r\n  if (type === 'string' && val.length > 0) {\r\n    return parse(val);\r\n  } else if (type === 'number' && isNaN(val) === false) {\r\n    return options.long ? fmtLong(val) : fmtShort(val);\r\n  }\r\n  throw new Error(\r\n    'val is not a non-empty string or a valid number. val=' +\r\n      JSON.stringify(val)\r\n  );\r\n};\r\n\r\n/**\r\n * Parse the given `str` and return milliseconds.\r\n *\r\n * @param {String} str\r\n * @return {Number}\r\n * @api private\r\n */\r\n\r\nfunction parse(str) {\r\n  str = String(str);\r\n  if (str.length > 100) {\r\n    return;\r\n  }\r\n  var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(\r\n    str\r\n  );\r\n  if (!match) {\r\n    return;\r\n  }\r\n  var n = parseFloat(match[1]);\r\n  var type = (match[2] || 'ms').toLowerCase();\r\n  switch (type) {\r\n    case 'years':\r\n    case 'year':\r\n    case 'yrs':\r\n    case 'yr':\r\n    case 'y':\r\n      return n * y;\r\n    case 'days':\r\n    case 'day':\r\n    case 'd':\r\n      return n * d;\r\n    case 'hours':\r\n    case 'hour':\r\n    case 'hrs':\r\n    case 'hr':\r\n    case 'h':\r\n      return n * h;\r\n    case 'minutes':\r\n    case 'minute':\r\n    case 'mins':\r\n    case 'min':\r\n    case 'm':\r\n      return n * m;\r\n    case 'seconds':\r\n    case 'second':\r\n    case 'secs':\r\n    case 'sec':\r\n    case 's':\r\n      return n * s;\r\n    case 'milliseconds':\r\n    case 'millisecond':\r\n    case 'msecs':\r\n    case 'msec':\r\n    case 'ms':\r\n      return n;\r\n    default:\r\n      return undefined;\r\n  }\r\n}\r\n\r\n/**\r\n * Short format for `ms`.\r\n *\r\n * @param {Number} ms\r\n * @return {String}\r\n * @api private\r\n */\r\n\r\nfunction fmtShort(ms) {\r\n  if (ms >= d) {\r\n    return Math.round(ms / d) + 'd';\r\n  }\r\n  if (ms >= h) {\r\n    return Math.round(ms / h) + 'h';\r\n  }\r\n  if (ms >= m) {\r\n    return Math.round(ms / m) + 'm';\r\n  }\r\n  if (ms >= s) {\r\n    return Math.round(ms / s) + 's';\r\n  }\r\n  return ms + 'ms';\r\n}\r\n\r\n/**\r\n * Long format for `ms`.\r\n *\r\n * @param {Number} ms\r\n * @return {String}\r\n * @api private\r\n */\r\n\r\nfunction fmtLong(ms) {\r\n  return plural(ms, d, 'day') ||\r\n    plural(ms, h, 'hour') ||\r\n    plural(ms, m, 'minute') ||\r\n    plural(ms, s, 'second') ||\r\n    ms + ' ms';\r\n}\r\n\r\n/**\r\n * Pluralization helper.\r\n */\r\n\r\nfunction plural(ms, n, name) {\r\n  if (ms < n) {\r\n    return;\r\n  }\r\n  if (ms < n * 1.5) {\r\n    return Math.floor(ms / n) + ' ' + name;\r\n  }\r\n  return Math.ceil(ms / n) + ' ' + name + 's';\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9ub2RlX21vZHVsZXMvbXMvaW5kZXguanM/ZTRiMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogSGVscGVycy5cclxuICovXHJcblxyXG52YXIgcyA9IDEwMDA7XHJcbnZhciBtID0gcyAqIDYwO1xyXG52YXIgaCA9IG0gKiA2MDtcclxudmFyIGQgPSBoICogMjQ7XHJcbnZhciB5ID0gZCAqIDM2NS4yNTtcclxuXHJcbi8qKlxyXG4gKiBQYXJzZSBvciBmb3JtYXQgdGhlIGdpdmVuIGB2YWxgLlxyXG4gKlxyXG4gKiBPcHRpb25zOlxyXG4gKlxyXG4gKiAgLSBgbG9uZ2AgdmVyYm9zZSBmb3JtYXR0aW5nIFtmYWxzZV1cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSB2YWxcclxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gKiBAdGhyb3dzIHtFcnJvcn0gdGhyb3cgYW4gZXJyb3IgaWYgdmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSBudW1iZXJcclxuICogQHJldHVybiB7U3RyaW5nfE51bWJlcn1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHZhbCwgb3B0aW9ucykge1xyXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xyXG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbDtcclxuICBpZiAodHlwZSA9PT0gJ3N0cmluZycgJiYgdmFsLmxlbmd0aCA+IDApIHtcclxuICAgIHJldHVybiBwYXJzZSh2YWwpO1xyXG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ251bWJlcicgJiYgaXNOYU4odmFsKSA9PT0gZmFsc2UpIHtcclxuICAgIHJldHVybiBvcHRpb25zLmxvbmcgPyBmbXRMb25nKHZhbCkgOiBmbXRTaG9ydCh2YWwpO1xyXG4gIH1cclxuICB0aHJvdyBuZXcgRXJyb3IoXHJcbiAgICAndmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSB2YWxpZCBudW1iZXIuIHZhbD0nICtcclxuICAgICAgSlNPTi5zdHJpbmdpZnkodmFsKVxyXG4gICk7XHJcbn07XHJcblxyXG4vKipcclxuICogUGFyc2UgdGhlIGdpdmVuIGBzdHJgIGFuZCByZXR1cm4gbWlsbGlzZWNvbmRzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXHJcbiAqIEByZXR1cm4ge051bWJlcn1cclxuICogQGFwaSBwcml2YXRlXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gcGFyc2Uoc3RyKSB7XHJcbiAgc3RyID0gU3RyaW5nKHN0cik7XHJcbiAgaWYgKHN0ci5sZW5ndGggPiAxMDApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgdmFyIG1hdGNoID0gL14oKD86XFxkKyk/XFwuP1xcZCspICoobWlsbGlzZWNvbmRzP3xtc2Vjcz98bXN8c2Vjb25kcz98c2Vjcz98c3xtaW51dGVzP3xtaW5zP3xtfGhvdXJzP3xocnM/fGh8ZGF5cz98ZHx5ZWFycz98eXJzP3x5KT8kL2kuZXhlYyhcclxuICAgIHN0clxyXG4gICk7XHJcbiAgaWYgKCFtYXRjaCkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICB2YXIgbiA9IHBhcnNlRmxvYXQobWF0Y2hbMV0pO1xyXG4gIHZhciB0eXBlID0gKG1hdGNoWzJdIHx8ICdtcycpLnRvTG93ZXJDYXNlKCk7XHJcbiAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICBjYXNlICd5ZWFycyc6XHJcbiAgICBjYXNlICd5ZWFyJzpcclxuICAgIGNhc2UgJ3lycyc6XHJcbiAgICBjYXNlICd5cic6XHJcbiAgICBjYXNlICd5JzpcclxuICAgICAgcmV0dXJuIG4gKiB5O1xyXG4gICAgY2FzZSAnZGF5cyc6XHJcbiAgICBjYXNlICdkYXknOlxyXG4gICAgY2FzZSAnZCc6XHJcbiAgICAgIHJldHVybiBuICogZDtcclxuICAgIGNhc2UgJ2hvdXJzJzpcclxuICAgIGNhc2UgJ2hvdXInOlxyXG4gICAgY2FzZSAnaHJzJzpcclxuICAgIGNhc2UgJ2hyJzpcclxuICAgIGNhc2UgJ2gnOlxyXG4gICAgICByZXR1cm4gbiAqIGg7XHJcbiAgICBjYXNlICdtaW51dGVzJzpcclxuICAgIGNhc2UgJ21pbnV0ZSc6XHJcbiAgICBjYXNlICdtaW5zJzpcclxuICAgIGNhc2UgJ21pbic6XHJcbiAgICBjYXNlICdtJzpcclxuICAgICAgcmV0dXJuIG4gKiBtO1xyXG4gICAgY2FzZSAnc2Vjb25kcyc6XHJcbiAgICBjYXNlICdzZWNvbmQnOlxyXG4gICAgY2FzZSAnc2Vjcyc6XHJcbiAgICBjYXNlICdzZWMnOlxyXG4gICAgY2FzZSAncyc6XHJcbiAgICAgIHJldHVybiBuICogcztcclxuICAgIGNhc2UgJ21pbGxpc2Vjb25kcyc6XHJcbiAgICBjYXNlICdtaWxsaXNlY29uZCc6XHJcbiAgICBjYXNlICdtc2Vjcyc6XHJcbiAgICBjYXNlICdtc2VjJzpcclxuICAgIGNhc2UgJ21zJzpcclxuICAgICAgcmV0dXJuIG47XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFNob3J0IGZvcm1hdCBmb3IgYG1zYC5cclxuICpcclxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXHJcbiAqIEByZXR1cm4ge1N0cmluZ31cclxuICogQGFwaSBwcml2YXRlXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gZm10U2hvcnQobXMpIHtcclxuICBpZiAobXMgPj0gZCkge1xyXG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBkKSArICdkJztcclxuICB9XHJcbiAgaWYgKG1zID49IGgpIHtcclxuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gaCkgKyAnaCc7XHJcbiAgfVxyXG4gIGlmIChtcyA+PSBtKSB7XHJcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIG0pICsgJ20nO1xyXG4gIH1cclxuICBpZiAobXMgPj0gcykge1xyXG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBzKSArICdzJztcclxuICB9XHJcbiAgcmV0dXJuIG1zICsgJ21zJztcclxufVxyXG5cclxuLyoqXHJcbiAqIExvbmcgZm9ybWF0IGZvciBgbXNgLlxyXG4gKlxyXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcclxuICogQHJldHVybiB7U3RyaW5nfVxyXG4gKiBAYXBpIHByaXZhdGVcclxuICovXHJcblxyXG5mdW5jdGlvbiBmbXRMb25nKG1zKSB7XHJcbiAgcmV0dXJuIHBsdXJhbChtcywgZCwgJ2RheScpIHx8XHJcbiAgICBwbHVyYWwobXMsIGgsICdob3VyJykgfHxcclxuICAgIHBsdXJhbChtcywgbSwgJ21pbnV0ZScpIHx8XHJcbiAgICBwbHVyYWwobXMsIHMsICdzZWNvbmQnKSB8fFxyXG4gICAgbXMgKyAnIG1zJztcclxufVxyXG5cclxuLyoqXHJcbiAqIFBsdXJhbGl6YXRpb24gaGVscGVyLlxyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIHBsdXJhbChtcywgbiwgbmFtZSkge1xyXG4gIGlmIChtcyA8IG4pIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgaWYgKG1zIDwgbiAqIDEuNSkge1xyXG4gICAgcmV0dXJuIE1hdGguZmxvb3IobXMgLyBuKSArICcgJyArIG5hbWU7XHJcbiAgfVxyXG4gIHJldHVybiBNYXRoLmNlaWwobXMgLyBuKSArICcgJyArIG5hbWUgKyAncyc7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///27\n")},function(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function(process) {/**\r\n * This is the web browser implementation of `debug()`.\r\n *\r\n * Expose `debug()` as the module.\r\n */\r\n\r\nexports = module.exports = __webpack_require__(29);\r\nexports.log = log;\r\nexports.formatArgs = formatArgs;\r\nexports.save = save;\r\nexports.load = load;\r\nexports.useColors = useColors;\r\nexports.storage = 'undefined' != typeof chrome\r\n               && 'undefined' != typeof chrome.storage\r\n                  ? chrome.storage.local\r\n                  : localstorage();\r\n\r\n/**\r\n * Colors.\r\n */\r\n\r\nexports.colors = [\r\n  '#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC',\r\n  '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF',\r\n  '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC',\r\n  '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF',\r\n  '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC',\r\n  '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033',\r\n  '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366',\r\n  '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933',\r\n  '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC',\r\n  '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF',\r\n  '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'\r\n];\r\n\r\n/**\r\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\r\n * and the Firebug extension (any Firefox version) are known\r\n * to support \"%c\" CSS customizations.\r\n *\r\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\r\n */\r\n\r\nfunction useColors() {\r\n  // NB: In an Electron preload script, document will be defined but not fully\r\n  // initialized. Since we know we're in Chrome, we'll just detect this case\r\n  // explicitly\r\n  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {\r\n    return true;\r\n  }\r\n\r\n  // Internet Explorer and Edge do not support colors.\r\n  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\r\n    return false;\r\n  }\r\n\r\n  // is webkit? http://stackoverflow.com/a/16459606/376773\r\n  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\r\n  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\r\n    // is firebug? http://stackoverflow.com/a/398120/376773\r\n    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\r\n    // is firefox >= v31?\r\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\r\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\r\n    // double check webkit in userAgent just in case we are in a worker\r\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\r\n}\r\n\r\n/**\r\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\r\n */\r\n\r\nexports.formatters.j = function(v) {\r\n  try {\r\n    return JSON.stringify(v);\r\n  } catch (err) {\r\n    return '[UnexpectedJSONParseError]: ' + err.message;\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Colorize log arguments if enabled.\r\n *\r\n * @api public\r\n */\r\n\r\nfunction formatArgs(args) {\r\n  var useColors = this.useColors;\r\n\r\n  args[0] = (useColors ? '%c' : '')\r\n    + this.namespace\r\n    + (useColors ? ' %c' : ' ')\r\n    + args[0]\r\n    + (useColors ? '%c ' : ' ')\r\n    + '+' + exports.humanize(this.diff);\r\n\r\n  if (!useColors) return;\r\n\r\n  var c = 'color: ' + this.color;\r\n  args.splice(1, 0, c, 'color: inherit')\r\n\r\n  // the final \"%c\" is somewhat tricky, because there could be other\r\n  // arguments passed either before or after the %c, so we need to\r\n  // figure out the correct index to insert the CSS into\r\n  var index = 0;\r\n  var lastC = 0;\r\n  args[0].replace(/%[a-zA-Z%]/g, function(match) {\r\n    if ('%%' === match) return;\r\n    index++;\r\n    if ('%c' === match) {\r\n      // we only are interested in the *last* %c\r\n      // (the user may have provided their own)\r\n      lastC = index;\r\n    }\r\n  });\r\n\r\n  args.splice(lastC, 0, c);\r\n}\r\n\r\n/**\r\n * Invokes `console.log()` when available.\r\n * No-op when `console.log` is not a \"function\".\r\n *\r\n * @api public\r\n */\r\n\r\nfunction log() {\r\n  // this hackery is required for IE8/9, where\r\n  // the `console.log` function doesn't have 'apply'\r\n  return 'object' === typeof console\r\n    && console.log\r\n    && Function.prototype.apply.call(console.log, console, arguments);\r\n}\r\n\r\n/**\r\n * Save `namespaces`.\r\n *\r\n * @param {String} namespaces\r\n * @api private\r\n */\r\n\r\nfunction save(namespaces) {\r\n  try {\r\n    if (null == namespaces) {\r\n      exports.storage.removeItem('debug');\r\n    } else {\r\n      exports.storage.debug = namespaces;\r\n    }\r\n  } catch(e) {}\r\n}\r\n\r\n/**\r\n * Load `namespaces`.\r\n *\r\n * @return {String} returns the previously persisted debug modes\r\n * @api private\r\n */\r\n\r\nfunction load() {\r\n  var r;\r\n  try {\r\n    r = exports.storage.debug;\r\n  } catch(e) {}\r\n\r\n  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\r\n  if (!r && typeof process !== 'undefined' && 'env' in process) {\r\n    r = process.env.DEBUG;\r\n  }\r\n\r\n  return r;\r\n}\r\n\r\n/**\r\n * Enable namespaces listed in `localStorage.debug` initially.\r\n */\r\n\r\nexports.enable(load());\r\n\r\n/**\r\n * Localstorage attempts to return the localstorage.\r\n *\r\n * This is necessary because safari throws\r\n * when a user disables cookies/localstorage\r\n * and you attempt to access it.\r\n *\r\n * @return {LocalStorage}\r\n * @api private\r\n */\r\n\r\nfunction localstorage() {\r\n  try {\r\n    return window.localStorage;\r\n  } catch (e) {}\r\n}\r\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(6)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///28\n")},function(module,exports,__webpack_require__){eval("\r\n/**\r\n * This is the common logic for both the Node.js and web browser\r\n * implementations of `debug()`.\r\n *\r\n * Expose `debug()` as the module.\r\n */\r\n\r\nexports = module.exports = createDebug.debug = createDebug['default'] = createDebug;\r\nexports.coerce = coerce;\r\nexports.disable = disable;\r\nexports.enable = enable;\r\nexports.enabled = enabled;\r\nexports.humanize = __webpack_require__(30);\r\n\r\n/**\r\n * Active `debug` instances.\r\n */\r\nexports.instances = [];\r\n\r\n/**\r\n * The currently active debug mode names, and names to skip.\r\n */\r\n\r\nexports.names = [];\r\nexports.skips = [];\r\n\r\n/**\r\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.\r\n *\r\n * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\r\n */\r\n\r\nexports.formatters = {};\r\n\r\n/**\r\n * Select a color.\r\n * @param {String} namespace\r\n * @return {Number}\r\n * @api private\r\n */\r\n\r\nfunction selectColor(namespace) {\r\n  var hash = 0, i;\r\n\r\n  for (i in namespace) {\r\n    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);\r\n    hash |= 0; // Convert to 32bit integer\r\n  }\r\n\r\n  return exports.colors[Math.abs(hash) % exports.colors.length];\r\n}\r\n\r\n/**\r\n * Create a debugger with the given `namespace`.\r\n *\r\n * @param {String} namespace\r\n * @return {Function}\r\n * @api public\r\n */\r\n\r\nfunction createDebug(namespace) {\r\n\r\n  var prevTime;\r\n\r\n  function debug() {\r\n    // disabled?\r\n    if (!debug.enabled) return;\r\n\r\n    var self = debug;\r\n\r\n    // set `diff` timestamp\r\n    var curr = +new Date();\r\n    var ms = curr - (prevTime || curr);\r\n    self.diff = ms;\r\n    self.prev = prevTime;\r\n    self.curr = curr;\r\n    prevTime = curr;\r\n\r\n    // turn the `arguments` into a proper Array\r\n    var args = new Array(arguments.length);\r\n    for (var i = 0; i < args.length; i++) {\r\n      args[i] = arguments[i];\r\n    }\r\n\r\n    args[0] = exports.coerce(args[0]);\r\n\r\n    if ('string' !== typeof args[0]) {\r\n      // anything else let's inspect with %O\r\n      args.unshift('%O');\r\n    }\r\n\r\n    // apply any `formatters` transformations\r\n    var index = 0;\r\n    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {\r\n      // if we encounter an escaped % then don't increase the array index\r\n      if (match === '%%') return match;\r\n      index++;\r\n      var formatter = exports.formatters[format];\r\n      if ('function' === typeof formatter) {\r\n        var val = args[index];\r\n        match = formatter.call(self, val);\r\n\r\n        // now we need to remove `args[index]` since it's inlined in the `format`\r\n        args.splice(index, 1);\r\n        index--;\r\n      }\r\n      return match;\r\n    });\r\n\r\n    // apply env-specific formatting (colors, etc.)\r\n    exports.formatArgs.call(self, args);\r\n\r\n    var logFn = debug.log || exports.log || console.log.bind(console);\r\n    logFn.apply(self, args);\r\n  }\r\n\r\n  debug.namespace = namespace;\r\n  debug.enabled = exports.enabled(namespace);\r\n  debug.useColors = exports.useColors();\r\n  debug.color = selectColor(namespace);\r\n  debug.destroy = destroy;\r\n\r\n  // env-specific initialization logic for debug instances\r\n  if ('function' === typeof exports.init) {\r\n    exports.init(debug);\r\n  }\r\n\r\n  exports.instances.push(debug);\r\n\r\n  return debug;\r\n}\r\n\r\nfunction destroy () {\r\n  var index = exports.instances.indexOf(this);\r\n  if (index !== -1) {\r\n    exports.instances.splice(index, 1);\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Enables a debug mode by namespaces. This can include modes\r\n * separated by a colon and wildcards.\r\n *\r\n * @param {String} namespaces\r\n * @api public\r\n */\r\n\r\nfunction enable(namespaces) {\r\n  exports.save(namespaces);\r\n\r\n  exports.names = [];\r\n  exports.skips = [];\r\n\r\n  var i;\r\n  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\r\n  var len = split.length;\r\n\r\n  for (i = 0; i < len; i++) {\r\n    if (!split[i]) continue; // ignore empty strings\r\n    namespaces = split[i].replace(/\\*/g, '.*?');\r\n    if (namespaces[0] === '-') {\r\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\r\n    } else {\r\n      exports.names.push(new RegExp('^' + namespaces + '$'));\r\n    }\r\n  }\r\n\r\n  for (i = 0; i < exports.instances.length; i++) {\r\n    var instance = exports.instances[i];\r\n    instance.enabled = exports.enabled(instance.namespace);\r\n  }\r\n}\r\n\r\n/**\r\n * Disable debug output.\r\n *\r\n * @api public\r\n */\r\n\r\nfunction disable() {\r\n  exports.enable('');\r\n}\r\n\r\n/**\r\n * Returns true if the given mode name is enabled, false otherwise.\r\n *\r\n * @param {String} name\r\n * @return {Boolean}\r\n * @api public\r\n */\r\n\r\nfunction enabled(name) {\r\n  if (name[name.length - 1] === '*') {\r\n    return true;\r\n  }\r\n  var i, len;\r\n  for (i = 0, len = exports.skips.length; i < len; i++) {\r\n    if (exports.skips[i].test(name)) {\r\n      return false;\r\n    }\r\n  }\r\n  for (i = 0, len = exports.names.length; i < len; i++) {\r\n    if (exports.names[i].test(name)) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * Coerce `val`.\r\n *\r\n * @param {Mixed} val\r\n * @return {Mixed}\r\n * @api private\r\n */\r\n\r\nfunction coerce(val) {\r\n  if (val instanceof Error) return val.stack || val.message;\r\n  return val;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///29\n")},function(module,exports){eval("/**\r\n * Helpers.\r\n */\r\n\r\nvar s = 1000;\r\nvar m = s * 60;\r\nvar h = m * 60;\r\nvar d = h * 24;\r\nvar y = d * 365.25;\r\n\r\n/**\r\n * Parse or format the given `val`.\r\n *\r\n * Options:\r\n *\r\n *  - `long` verbose formatting [false]\r\n *\r\n * @param {String|Number} val\r\n * @param {Object} [options]\r\n * @throws {Error} throw an error if val is not a non-empty string or a number\r\n * @return {String|Number}\r\n * @api public\r\n */\r\n\r\nmodule.exports = function(val, options) {\r\n  options = options || {};\r\n  var type = typeof val;\r\n  if (type === 'string' && val.length > 0) {\r\n    return parse(val);\r\n  } else if (type === 'number' && isNaN(val) === false) {\r\n    return options.long ? fmtLong(val) : fmtShort(val);\r\n  }\r\n  throw new Error(\r\n    'val is not a non-empty string or a valid number. val=' +\r\n      JSON.stringify(val)\r\n  );\r\n};\r\n\r\n/**\r\n * Parse the given `str` and return milliseconds.\r\n *\r\n * @param {String} str\r\n * @return {Number}\r\n * @api private\r\n */\r\n\r\nfunction parse(str) {\r\n  str = String(str);\r\n  if (str.length > 100) {\r\n    return;\r\n  }\r\n  var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(\r\n    str\r\n  );\r\n  if (!match) {\r\n    return;\r\n  }\r\n  var n = parseFloat(match[1]);\r\n  var type = (match[2] || 'ms').toLowerCase();\r\n  switch (type) {\r\n    case 'years':\r\n    case 'year':\r\n    case 'yrs':\r\n    case 'yr':\r\n    case 'y':\r\n      return n * y;\r\n    case 'days':\r\n    case 'day':\r\n    case 'd':\r\n      return n * d;\r\n    case 'hours':\r\n    case 'hour':\r\n    case 'hrs':\r\n    case 'hr':\r\n    case 'h':\r\n      return n * h;\r\n    case 'minutes':\r\n    case 'minute':\r\n    case 'mins':\r\n    case 'min':\r\n    case 'm':\r\n      return n * m;\r\n    case 'seconds':\r\n    case 'second':\r\n    case 'secs':\r\n    case 'sec':\r\n    case 's':\r\n      return n * s;\r\n    case 'milliseconds':\r\n    case 'millisecond':\r\n    case 'msecs':\r\n    case 'msec':\r\n    case 'ms':\r\n      return n;\r\n    default:\r\n      return undefined;\r\n  }\r\n}\r\n\r\n/**\r\n * Short format for `ms`.\r\n *\r\n * @param {Number} ms\r\n * @return {String}\r\n * @api private\r\n */\r\n\r\nfunction fmtShort(ms) {\r\n  if (ms >= d) {\r\n    return Math.round(ms / d) + 'd';\r\n  }\r\n  if (ms >= h) {\r\n    return Math.round(ms / h) + 'h';\r\n  }\r\n  if (ms >= m) {\r\n    return Math.round(ms / m) + 'm';\r\n  }\r\n  if (ms >= s) {\r\n    return Math.round(ms / s) + 's';\r\n  }\r\n  return ms + 'ms';\r\n}\r\n\r\n/**\r\n * Long format for `ms`.\r\n *\r\n * @param {Number} ms\r\n * @return {String}\r\n * @api private\r\n */\r\n\r\nfunction fmtLong(ms) {\r\n  return plural(ms, d, 'day') ||\r\n    plural(ms, h, 'hour') ||\r\n    plural(ms, m, 'minute') ||\r\n    plural(ms, s, 'second') ||\r\n    ms + ' ms';\r\n}\r\n\r\n/**\r\n * Pluralization helper.\r\n */\r\n\r\nfunction plural(ms, n, name) {\r\n  if (ms < n) {\r\n    return;\r\n  }\r\n  if (ms < n * 1.5) {\r\n    return Math.floor(ms / n) + ' ' + name;\r\n  }\r\n  return Math.ceil(ms / n) + ' ' + name + 's';\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9ub2RlX21vZHVsZXMvbXMvaW5kZXguanM/YjgzNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogSGVscGVycy5cclxuICovXHJcblxyXG52YXIgcyA9IDEwMDA7XHJcbnZhciBtID0gcyAqIDYwO1xyXG52YXIgaCA9IG0gKiA2MDtcclxudmFyIGQgPSBoICogMjQ7XHJcbnZhciB5ID0gZCAqIDM2NS4yNTtcclxuXHJcbi8qKlxyXG4gKiBQYXJzZSBvciBmb3JtYXQgdGhlIGdpdmVuIGB2YWxgLlxyXG4gKlxyXG4gKiBPcHRpb25zOlxyXG4gKlxyXG4gKiAgLSBgbG9uZ2AgdmVyYm9zZSBmb3JtYXR0aW5nIFtmYWxzZV1cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSB2YWxcclxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gKiBAdGhyb3dzIHtFcnJvcn0gdGhyb3cgYW4gZXJyb3IgaWYgdmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSBudW1iZXJcclxuICogQHJldHVybiB7U3RyaW5nfE51bWJlcn1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHZhbCwgb3B0aW9ucykge1xyXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xyXG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbDtcclxuICBpZiAodHlwZSA9PT0gJ3N0cmluZycgJiYgdmFsLmxlbmd0aCA+IDApIHtcclxuICAgIHJldHVybiBwYXJzZSh2YWwpO1xyXG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ251bWJlcicgJiYgaXNOYU4odmFsKSA9PT0gZmFsc2UpIHtcclxuICAgIHJldHVybiBvcHRpb25zLmxvbmcgPyBmbXRMb25nKHZhbCkgOiBmbXRTaG9ydCh2YWwpO1xyXG4gIH1cclxuICB0aHJvdyBuZXcgRXJyb3IoXHJcbiAgICAndmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSB2YWxpZCBudW1iZXIuIHZhbD0nICtcclxuICAgICAgSlNPTi5zdHJpbmdpZnkodmFsKVxyXG4gICk7XHJcbn07XHJcblxyXG4vKipcclxuICogUGFyc2UgdGhlIGdpdmVuIGBzdHJgIGFuZCByZXR1cm4gbWlsbGlzZWNvbmRzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXHJcbiAqIEByZXR1cm4ge051bWJlcn1cclxuICogQGFwaSBwcml2YXRlXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gcGFyc2Uoc3RyKSB7XHJcbiAgc3RyID0gU3RyaW5nKHN0cik7XHJcbiAgaWYgKHN0ci5sZW5ndGggPiAxMDApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgdmFyIG1hdGNoID0gL14oKD86XFxkKyk/XFwuP1xcZCspICoobWlsbGlzZWNvbmRzP3xtc2Vjcz98bXN8c2Vjb25kcz98c2Vjcz98c3xtaW51dGVzP3xtaW5zP3xtfGhvdXJzP3xocnM/fGh8ZGF5cz98ZHx5ZWFycz98eXJzP3x5KT8kL2kuZXhlYyhcclxuICAgIHN0clxyXG4gICk7XHJcbiAgaWYgKCFtYXRjaCkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICB2YXIgbiA9IHBhcnNlRmxvYXQobWF0Y2hbMV0pO1xyXG4gIHZhciB0eXBlID0gKG1hdGNoWzJdIHx8ICdtcycpLnRvTG93ZXJDYXNlKCk7XHJcbiAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICBjYXNlICd5ZWFycyc6XHJcbiAgICBjYXNlICd5ZWFyJzpcclxuICAgIGNhc2UgJ3lycyc6XHJcbiAgICBjYXNlICd5cic6XHJcbiAgICBjYXNlICd5JzpcclxuICAgICAgcmV0dXJuIG4gKiB5O1xyXG4gICAgY2FzZSAnZGF5cyc6XHJcbiAgICBjYXNlICdkYXknOlxyXG4gICAgY2FzZSAnZCc6XHJcbiAgICAgIHJldHVybiBuICogZDtcclxuICAgIGNhc2UgJ2hvdXJzJzpcclxuICAgIGNhc2UgJ2hvdXInOlxyXG4gICAgY2FzZSAnaHJzJzpcclxuICAgIGNhc2UgJ2hyJzpcclxuICAgIGNhc2UgJ2gnOlxyXG4gICAgICByZXR1cm4gbiAqIGg7XHJcbiAgICBjYXNlICdtaW51dGVzJzpcclxuICAgIGNhc2UgJ21pbnV0ZSc6XHJcbiAgICBjYXNlICdtaW5zJzpcclxuICAgIGNhc2UgJ21pbic6XHJcbiAgICBjYXNlICdtJzpcclxuICAgICAgcmV0dXJuIG4gKiBtO1xyXG4gICAgY2FzZSAnc2Vjb25kcyc6XHJcbiAgICBjYXNlICdzZWNvbmQnOlxyXG4gICAgY2FzZSAnc2Vjcyc6XHJcbiAgICBjYXNlICdzZWMnOlxyXG4gICAgY2FzZSAncyc6XHJcbiAgICAgIHJldHVybiBuICogcztcclxuICAgIGNhc2UgJ21pbGxpc2Vjb25kcyc6XHJcbiAgICBjYXNlICdtaWxsaXNlY29uZCc6XHJcbiAgICBjYXNlICdtc2Vjcyc6XHJcbiAgICBjYXNlICdtc2VjJzpcclxuICAgIGNhc2UgJ21zJzpcclxuICAgICAgcmV0dXJuIG47XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFNob3J0IGZvcm1hdCBmb3IgYG1zYC5cclxuICpcclxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXHJcbiAqIEByZXR1cm4ge1N0cmluZ31cclxuICogQGFwaSBwcml2YXRlXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gZm10U2hvcnQobXMpIHtcclxuICBpZiAobXMgPj0gZCkge1xyXG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBkKSArICdkJztcclxuICB9XHJcbiAgaWYgKG1zID49IGgpIHtcclxuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gaCkgKyAnaCc7XHJcbiAgfVxyXG4gIGlmIChtcyA+PSBtKSB7XHJcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIG0pICsgJ20nO1xyXG4gIH1cclxuICBpZiAobXMgPj0gcykge1xyXG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBzKSArICdzJztcclxuICB9XHJcbiAgcmV0dXJuIG1zICsgJ21zJztcclxufVxyXG5cclxuLyoqXHJcbiAqIExvbmcgZm9ybWF0IGZvciBgbXNgLlxyXG4gKlxyXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcclxuICogQHJldHVybiB7U3RyaW5nfVxyXG4gKiBAYXBpIHByaXZhdGVcclxuICovXHJcblxyXG5mdW5jdGlvbiBmbXRMb25nKG1zKSB7XHJcbiAgcmV0dXJuIHBsdXJhbChtcywgZCwgJ2RheScpIHx8XHJcbiAgICBwbHVyYWwobXMsIGgsICdob3VyJykgfHxcclxuICAgIHBsdXJhbChtcywgbSwgJ21pbnV0ZScpIHx8XHJcbiAgICBwbHVyYWwobXMsIHMsICdzZWNvbmQnKSB8fFxyXG4gICAgbXMgKyAnIG1zJztcclxufVxyXG5cclxuLyoqXHJcbiAqIFBsdXJhbGl6YXRpb24gaGVscGVyLlxyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIHBsdXJhbChtcywgbiwgbmFtZSkge1xyXG4gIGlmIChtcyA8IG4pIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgaWYgKG1zIDwgbiAqIDEuNSkge1xyXG4gICAgcmV0dXJuIE1hdGguZmxvb3IobXMgLyBuKSArICcgJyArIG5hbWU7XHJcbiAgfVxyXG4gIHJldHVybiBNYXRoLmNlaWwobXMgLyBuKSArICcgJyArIG5hbWUgKyAncyc7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///30\n")},function(module,exports,__webpack_require__){eval("/*global Blob,File*/\r\n\r\n/**\r\n * Module requirements\r\n */\r\n\r\nvar isArray = __webpack_require__(12);\r\nvar isBuf = __webpack_require__(13);\r\nvar toString = Object.prototype.toString;\r\nvar withNativeBlob = typeof Blob === 'function' || (typeof Blob !== 'undefined' && toString.call(Blob) === '[object BlobConstructor]');\r\nvar withNativeFile = typeof File === 'function' || (typeof File !== 'undefined' && toString.call(File) === '[object FileConstructor]');\r\n\r\n/**\r\n * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.\r\n * Anything with blobs or files should be fed through removeBlobs before coming\r\n * here.\r\n *\r\n * @param {Object} packet - socket.io event packet\r\n * @return {Object} with deconstructed packet and list of buffers\r\n * @api public\r\n */\r\n\r\nexports.deconstructPacket = function(packet) {\r\n  var buffers = [];\r\n  var packetData = packet.data;\r\n  var pack = packet;\r\n  pack.data = _deconstructPacket(packetData, buffers);\r\n  pack.attachments = buffers.length; // number of binary 'attachments'\r\n  return {packet: pack, buffers: buffers};\r\n};\r\n\r\nfunction _deconstructPacket(data, buffers) {\r\n  if (!data) return data;\r\n\r\n  if (isBuf(data)) {\r\n    var placeholder = { _placeholder: true, num: buffers.length };\r\n    buffers.push(data);\r\n    return placeholder;\r\n  } else if (isArray(data)) {\r\n    var newData = new Array(data.length);\r\n    for (var i = 0; i < data.length; i++) {\r\n      newData[i] = _deconstructPacket(data[i], buffers);\r\n    }\r\n    return newData;\r\n  } else if (typeof data === 'object' && !(data instanceof Date)) {\r\n    var newData = {};\r\n    for (var key in data) {\r\n      newData[key] = _deconstructPacket(data[key], buffers);\r\n    }\r\n    return newData;\r\n  }\r\n  return data;\r\n}\r\n\r\n/**\r\n * Reconstructs a binary packet from its placeholder packet and buffers\r\n *\r\n * @param {Object} packet - event packet with placeholders\r\n * @param {Array} buffers - binary buffers to put in placeholder positions\r\n * @return {Object} reconstructed packet\r\n * @api public\r\n */\r\n\r\nexports.reconstructPacket = function(packet, buffers) {\r\n  packet.data = _reconstructPacket(packet.data, buffers);\r\n  packet.attachments = undefined; // no longer useful\r\n  return packet;\r\n};\r\n\r\nfunction _reconstructPacket(data, buffers) {\r\n  if (!data) return data;\r\n\r\n  if (data && data._placeholder) {\r\n    return buffers[data.num]; // appropriate buffer (should be natural order anyway)\r\n  } else if (isArray(data)) {\r\n    for (var i = 0; i < data.length; i++) {\r\n      data[i] = _reconstructPacket(data[i], buffers);\r\n    }\r\n  } else if (typeof data === 'object') {\r\n    for (var key in data) {\r\n      data[key] = _reconstructPacket(data[key], buffers);\r\n    }\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\n/**\r\n * Asynchronously removes Blobs or Files from data via\r\n * FileReader's readAsArrayBuffer method. Used before encoding\r\n * data as msgpack. Calls callback with the blobless data.\r\n *\r\n * @param {Object} data\r\n * @param {Function} callback\r\n * @api private\r\n */\r\n\r\nexports.removeBlobs = function(data, callback) {\r\n  function _removeBlobs(obj, curKey, containingObject) {\r\n    if (!obj) return obj;\r\n\r\n    // convert any blob\r\n    if ((withNativeBlob && obj instanceof Blob) ||\r\n        (withNativeFile && obj instanceof File)) {\r\n      pendingBlobs++;\r\n\r\n      // async filereader\r\n      var fileReader = new FileReader();\r\n      fileReader.onload = function() { // this.result == arraybuffer\r\n        if (containingObject) {\r\n          containingObject[curKey] = this.result;\r\n        }\r\n        else {\r\n          bloblessData = this.result;\r\n        }\r\n\r\n        // if nothing pending its callback time\r\n        if(! --pendingBlobs) {\r\n          callback(bloblessData);\r\n        }\r\n      };\r\n\r\n      fileReader.readAsArrayBuffer(obj); // blob -> arraybuffer\r\n    } else if (isArray(obj)) { // handle array\r\n      for (var i = 0; i < obj.length; i++) {\r\n        _removeBlobs(obj[i], i, obj);\r\n      }\r\n    } else if (typeof obj === 'object' && !isBuf(obj)) { // and object\r\n      for (var key in obj) {\r\n        _removeBlobs(obj[key], key, obj);\r\n      }\r\n    }\r\n  }\r\n\r\n  var pendingBlobs = 0;\r\n  var bloblessData = data;\r\n  _removeBlobs(bloblessData);\r\n  if (!pendingBlobs) {\r\n    callback(bloblessData);\r\n  }\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9iaW5hcnkuanM/NzAzZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKmdsb2JhbCBCbG9iLEZpbGUqL1xyXG5cclxuLyoqXHJcbiAqIE1vZHVsZSByZXF1aXJlbWVudHNcclxuICovXHJcblxyXG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKTtcclxudmFyIGlzQnVmID0gcmVxdWlyZSgnLi9pcy1idWZmZXInKTtcclxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcclxudmFyIHdpdGhOYXRpdmVCbG9iID0gdHlwZW9mIEJsb2IgPT09ICdmdW5jdGlvbicgfHwgKHR5cGVvZiBCbG9iICE9PSAndW5kZWZpbmVkJyAmJiB0b1N0cmluZy5jYWxsKEJsb2IpID09PSAnW29iamVjdCBCbG9iQ29uc3RydWN0b3JdJyk7XHJcbnZhciB3aXRoTmF0aXZlRmlsZSA9IHR5cGVvZiBGaWxlID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgRmlsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdG9TdHJpbmcuY2FsbChGaWxlKSA9PT0gJ1tvYmplY3QgRmlsZUNvbnN0cnVjdG9yXScpO1xyXG5cclxuLyoqXHJcbiAqIFJlcGxhY2VzIGV2ZXJ5IEJ1ZmZlciB8IEFycmF5QnVmZmVyIGluIHBhY2tldCB3aXRoIGEgbnVtYmVyZWQgcGxhY2Vob2xkZXIuXHJcbiAqIEFueXRoaW5nIHdpdGggYmxvYnMgb3IgZmlsZXMgc2hvdWxkIGJlIGZlZCB0aHJvdWdoIHJlbW92ZUJsb2JzIGJlZm9yZSBjb21pbmdcclxuICogaGVyZS5cclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldCAtIHNvY2tldC5pbyBldmVudCBwYWNrZXRcclxuICogQHJldHVybiB7T2JqZWN0fSB3aXRoIGRlY29uc3RydWN0ZWQgcGFja2V0IGFuZCBsaXN0IG9mIGJ1ZmZlcnNcclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5leHBvcnRzLmRlY29uc3RydWN0UGFja2V0ID0gZnVuY3Rpb24ocGFja2V0KSB7XHJcbiAgdmFyIGJ1ZmZlcnMgPSBbXTtcclxuICB2YXIgcGFja2V0RGF0YSA9IHBhY2tldC5kYXRhO1xyXG4gIHZhciBwYWNrID0gcGFja2V0O1xyXG4gIHBhY2suZGF0YSA9IF9kZWNvbnN0cnVjdFBhY2tldChwYWNrZXREYXRhLCBidWZmZXJzKTtcclxuICBwYWNrLmF0dGFjaG1lbnRzID0gYnVmZmVycy5sZW5ndGg7IC8vIG51bWJlciBvZiBiaW5hcnkgJ2F0dGFjaG1lbnRzJ1xyXG4gIHJldHVybiB7cGFja2V0OiBwYWNrLCBidWZmZXJzOiBidWZmZXJzfTtcclxufTtcclxuXHJcbmZ1bmN0aW9uIF9kZWNvbnN0cnVjdFBhY2tldChkYXRhLCBidWZmZXJzKSB7XHJcbiAgaWYgKCFkYXRhKSByZXR1cm4gZGF0YTtcclxuXHJcbiAgaWYgKGlzQnVmKGRhdGEpKSB7XHJcbiAgICB2YXIgcGxhY2Vob2xkZXIgPSB7IF9wbGFjZWhvbGRlcjogdHJ1ZSwgbnVtOiBidWZmZXJzLmxlbmd0aCB9O1xyXG4gICAgYnVmZmVycy5wdXNoKGRhdGEpO1xyXG4gICAgcmV0dXJuIHBsYWNlaG9sZGVyO1xyXG4gIH0gZWxzZSBpZiAoaXNBcnJheShkYXRhKSkge1xyXG4gICAgdmFyIG5ld0RhdGEgPSBuZXcgQXJyYXkoZGF0YS5sZW5ndGgpO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIG5ld0RhdGFbaV0gPSBfZGVjb25zdHJ1Y3RQYWNrZXQoZGF0YVtpXSwgYnVmZmVycyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV3RGF0YTtcclxuICB9IGVsc2UgaWYgKHR5cGVvZiBkYXRhID09PSAnb2JqZWN0JyAmJiAhKGRhdGEgaW5zdGFuY2VvZiBEYXRlKSkge1xyXG4gICAgdmFyIG5ld0RhdGEgPSB7fTtcclxuICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7XHJcbiAgICAgIG5ld0RhdGFba2V5XSA9IF9kZWNvbnN0cnVjdFBhY2tldChkYXRhW2tleV0sIGJ1ZmZlcnMpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5ld0RhdGE7XHJcbiAgfVxyXG4gIHJldHVybiBkYXRhO1xyXG59XHJcblxyXG4vKipcclxuICogUmVjb25zdHJ1Y3RzIGEgYmluYXJ5IHBhY2tldCBmcm9tIGl0cyBwbGFjZWhvbGRlciBwYWNrZXQgYW5kIGJ1ZmZlcnNcclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldCAtIGV2ZW50IHBhY2tldCB3aXRoIHBsYWNlaG9sZGVyc1xyXG4gKiBAcGFyYW0ge0FycmF5fSBidWZmZXJzIC0gYmluYXJ5IGJ1ZmZlcnMgdG8gcHV0IGluIHBsYWNlaG9sZGVyIHBvc2l0aW9uc1xyXG4gKiBAcmV0dXJuIHtPYmplY3R9IHJlY29uc3RydWN0ZWQgcGFja2V0XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuZXhwb3J0cy5yZWNvbnN0cnVjdFBhY2tldCA9IGZ1bmN0aW9uKHBhY2tldCwgYnVmZmVycykge1xyXG4gIHBhY2tldC5kYXRhID0gX3JlY29uc3RydWN0UGFja2V0KHBhY2tldC5kYXRhLCBidWZmZXJzKTtcclxuICBwYWNrZXQuYXR0YWNobWVudHMgPSB1bmRlZmluZWQ7IC8vIG5vIGxvbmdlciB1c2VmdWxcclxuICByZXR1cm4gcGFja2V0O1xyXG59O1xyXG5cclxuZnVuY3Rpb24gX3JlY29uc3RydWN0UGFja2V0KGRhdGEsIGJ1ZmZlcnMpIHtcclxuICBpZiAoIWRhdGEpIHJldHVybiBkYXRhO1xyXG5cclxuICBpZiAoZGF0YSAmJiBkYXRhLl9wbGFjZWhvbGRlcikge1xyXG4gICAgcmV0dXJuIGJ1ZmZlcnNbZGF0YS5udW1dOyAvLyBhcHByb3ByaWF0ZSBidWZmZXIgKHNob3VsZCBiZSBuYXR1cmFsIG9yZGVyIGFueXdheSlcclxuICB9IGVsc2UgaWYgKGlzQXJyYXkoZGF0YSkpIHtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xyXG4gICAgICBkYXRhW2ldID0gX3JlY29uc3RydWN0UGFja2V0KGRhdGFbaV0sIGJ1ZmZlcnMpO1xyXG4gICAgfVxyXG4gIH0gZWxzZSBpZiAodHlwZW9mIGRhdGEgPT09ICdvYmplY3QnKSB7XHJcbiAgICBmb3IgKHZhciBrZXkgaW4gZGF0YSkge1xyXG4gICAgICBkYXRhW2tleV0gPSBfcmVjb25zdHJ1Y3RQYWNrZXQoZGF0YVtrZXldLCBidWZmZXJzKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiBkYXRhO1xyXG59XHJcblxyXG4vKipcclxuICogQXN5bmNocm9ub3VzbHkgcmVtb3ZlcyBCbG9icyBvciBGaWxlcyBmcm9tIGRhdGEgdmlhXHJcbiAqIEZpbGVSZWFkZXIncyByZWFkQXNBcnJheUJ1ZmZlciBtZXRob2QuIFVzZWQgYmVmb3JlIGVuY29kaW5nXHJcbiAqIGRhdGEgYXMgbXNncGFjay4gQ2FsbHMgY2FsbGJhY2sgd2l0aCB0aGUgYmxvYmxlc3MgZGF0YS5cclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IGRhdGFcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcclxuICogQGFwaSBwcml2YXRlXHJcbiAqL1xyXG5cclxuZXhwb3J0cy5yZW1vdmVCbG9icyA9IGZ1bmN0aW9uKGRhdGEsIGNhbGxiYWNrKSB7XHJcbiAgZnVuY3Rpb24gX3JlbW92ZUJsb2JzKG9iaiwgY3VyS2V5LCBjb250YWluaW5nT2JqZWN0KSB7XHJcbiAgICBpZiAoIW9iaikgcmV0dXJuIG9iajtcclxuXHJcbiAgICAvLyBjb252ZXJ0IGFueSBibG9iXHJcbiAgICBpZiAoKHdpdGhOYXRpdmVCbG9iICYmIG9iaiBpbnN0YW5jZW9mIEJsb2IpIHx8XHJcbiAgICAgICAgKHdpdGhOYXRpdmVGaWxlICYmIG9iaiBpbnN0YW5jZW9mIEZpbGUpKSB7XHJcbiAgICAgIHBlbmRpbmdCbG9icysrO1xyXG5cclxuICAgICAgLy8gYXN5bmMgZmlsZXJlYWRlclxyXG4gICAgICB2YXIgZmlsZVJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XHJcbiAgICAgIGZpbGVSZWFkZXIub25sb2FkID0gZnVuY3Rpb24oKSB7IC8vIHRoaXMucmVzdWx0ID09IGFycmF5YnVmZmVyXHJcbiAgICAgICAgaWYgKGNvbnRhaW5pbmdPYmplY3QpIHtcclxuICAgICAgICAgIGNvbnRhaW5pbmdPYmplY3RbY3VyS2V5XSA9IHRoaXMucmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIGJsb2JsZXNzRGF0YSA9IHRoaXMucmVzdWx0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gaWYgbm90aGluZyBwZW5kaW5nIGl0cyBjYWxsYmFjayB0aW1lXHJcbiAgICAgICAgaWYoISAtLXBlbmRpbmdCbG9icykge1xyXG4gICAgICAgICAgY2FsbGJhY2soYmxvYmxlc3NEYXRhKTtcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBmaWxlUmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKG9iaik7IC8vIGJsb2IgLT4gYXJyYXlidWZmZXJcclxuICAgIH0gZWxzZSBpZiAoaXNBcnJheShvYmopKSB7IC8vIGhhbmRsZSBhcnJheVxyXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iai5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIF9yZW1vdmVCbG9icyhvYmpbaV0sIGksIG9iaik7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgIWlzQnVmKG9iaikpIHsgLy8gYW5kIG9iamVjdFxyXG4gICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XHJcbiAgICAgICAgX3JlbW92ZUJsb2JzKG9ialtrZXldLCBrZXksIG9iaik7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHZhciBwZW5kaW5nQmxvYnMgPSAwO1xyXG4gIHZhciBibG9ibGVzc0RhdGEgPSBkYXRhO1xyXG4gIF9yZW1vdmVCbG9icyhibG9ibGVzc0RhdGEpO1xyXG4gIGlmICghcGVuZGluZ0Jsb2JzKSB7XHJcbiAgICBjYWxsYmFjayhibG9ibGVzc0RhdGEpO1xyXG4gIH1cclxufTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///31\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  for (var i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL25vZGVfbW9kdWxlcy9iYXNlNjQtanMvaW5kZXguanM/NzZiMiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuZXhwb3J0cy5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuZXhwb3J0cy50b0J5dGVBcnJheSA9IHRvQnl0ZUFycmF5XG5leHBvcnRzLmZyb21CeXRlQXJyYXkgPSBmcm9tQnl0ZUFycmF5XG5cbnZhciBsb29rdXAgPSBbXVxudmFyIHJldkxvb2t1cCA9IFtdXG52YXIgQXJyID0gdHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnID8gVWludDhBcnJheSA6IEFycmF5XG5cbnZhciBjb2RlID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nXG5mb3IgKHZhciBpID0gMCwgbGVuID0gY29kZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICBsb29rdXBbaV0gPSBjb2RlW2ldXG4gIHJldkxvb2t1cFtjb2RlLmNoYXJDb2RlQXQoaSldID0gaVxufVxuXG4vLyBTdXBwb3J0IGRlY29kaW5nIFVSTC1zYWZlIGJhc2U2NCBzdHJpbmdzLCBhcyBOb2RlLmpzIGRvZXMuXG4vLyBTZWU6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Jhc2U2NCNVUkxfYXBwbGljYXRpb25zXG5yZXZMb29rdXBbJy0nLmNoYXJDb2RlQXQoMCldID0gNjJcbnJldkxvb2t1cFsnXycuY2hhckNvZGVBdCgwKV0gPSA2M1xuXG5mdW5jdGlvbiBnZXRMZW5zIChiNjQpIHtcbiAgdmFyIGxlbiA9IGI2NC5sZW5ndGhcblxuICBpZiAobGVuICUgNCA+IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQnKVxuICB9XG5cbiAgLy8gVHJpbSBvZmYgZXh0cmEgYnl0ZXMgYWZ0ZXIgcGxhY2Vob2xkZXIgYnl0ZXMgYXJlIGZvdW5kXG4gIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2JlYXRnYW1taXQvYmFzZTY0LWpzL2lzc3Vlcy80MlxuICB2YXIgdmFsaWRMZW4gPSBiNjQuaW5kZXhPZignPScpXG4gIGlmICh2YWxpZExlbiA9PT0gLTEpIHZhbGlkTGVuID0gbGVuXG5cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IHZhbGlkTGVuID09PSBsZW5cbiAgICA/IDBcbiAgICA6IDQgLSAodmFsaWRMZW4gJSA0KVxuXG4gIHJldHVybiBbdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbl1cbn1cblxuLy8gYmFzZTY0IGlzIDQvMyArIHVwIHRvIHR3byBjaGFyYWN0ZXJzIG9mIHRoZSBvcmlnaW5hbCBkYXRhXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChiNjQpIHtcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gX2J5dGVMZW5ndGggKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikge1xuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gdG9CeXRlQXJyYXkgKGI2NCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cblxuICB2YXIgYXJyID0gbmV3IEFycihfYnl0ZUxlbmd0aChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pKVxuXG4gIHZhciBjdXJCeXRlID0gMFxuXG4gIC8vIGlmIHRoZXJlIGFyZSBwbGFjZWhvbGRlcnMsIG9ubHkgZ2V0IHVwIHRvIHRoZSBsYXN0IGNvbXBsZXRlIDQgY2hhcnNcbiAgdmFyIGxlbiA9IHBsYWNlSG9sZGVyc0xlbiA+IDBcbiAgICA/IHZhbGlkTGVuIC0gNFxuICAgIDogdmFsaWRMZW5cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDE4KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgMTIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA8PCA2KSB8XG4gICAgICByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDMpXVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiAxNikgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMikge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPj4gNClcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDEpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTApIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCA0KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPj4gMilcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIHRyaXBsZXRUb0Jhc2U2NCAobnVtKSB7XG4gIHJldHVybiBsb29rdXBbbnVtID4+IDE4ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gMTIgJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiA2ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gJiAweDNGXVxufVxuXG5mdW5jdGlvbiBlbmNvZGVDaHVuayAodWludDgsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHRtcFxuICB2YXIgb3V0cHV0ID0gW11cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IDMpIHtcbiAgICB0bXAgPVxuICAgICAgKCh1aW50OFtpXSA8PCAxNikgJiAweEZGMDAwMCkgK1xuICAgICAgKCh1aW50OFtpICsgMV0gPDwgOCkgJiAweEZGMDApICtcbiAgICAgICh1aW50OFtpICsgMl0gJiAweEZGKVxuICAgIG91dHB1dC5wdXNoKHRyaXBsZXRUb0Jhc2U2NCh0bXApKVxuICB9XG4gIHJldHVybiBvdXRwdXQuam9pbignJylcbn1cblxuZnVuY3Rpb24gZnJvbUJ5dGVBcnJheSAodWludDgpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVuID0gdWludDgubGVuZ3RoXG4gIHZhciBleHRyYUJ5dGVzID0gbGVuICUgMyAvLyBpZiB3ZSBoYXZlIDEgYnl0ZSBsZWZ0LCBwYWQgMiBieXRlc1xuICB2YXIgcGFydHMgPSBbXVxuICB2YXIgbWF4Q2h1bmtMZW5ndGggPSAxNjM4MyAvLyBtdXN0IGJlIG11bHRpcGxlIG9mIDNcblxuICAvLyBnbyB0aHJvdWdoIHRoZSBhcnJheSBldmVyeSB0aHJlZSBieXRlcywgd2UnbGwgZGVhbCB3aXRoIHRyYWlsaW5nIHN0dWZmIGxhdGVyXG4gIGZvciAodmFyIGkgPSAwLCBsZW4yID0gbGVuIC0gZXh0cmFCeXRlczsgaSA8IGxlbjI7IGkgKz0gbWF4Q2h1bmtMZW5ndGgpIHtcbiAgICBwYXJ0cy5wdXNoKGVuY29kZUNodW5rKFxuICAgICAgdWludDgsIGksIChpICsgbWF4Q2h1bmtMZW5ndGgpID4gbGVuMiA/IGxlbjIgOiAoaSArIG1heENodW5rTGVuZ3RoKVxuICAgICkpXG4gIH1cblxuICAvLyBwYWQgdGhlIGVuZCB3aXRoIHplcm9zLCBidXQgbWFrZSBzdXJlIHRvIG5vdCBmb3JnZXQgdGhlIGV4dHJhIGJ5dGVzXG4gIGlmIChleHRyYUJ5dGVzID09PSAxKSB7XG4gICAgdG1wID0gdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAyXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCA0KSAmIDB4M0ZdICtcbiAgICAgICc9PSdcbiAgICApXG4gIH0gZWxzZSBpZiAoZXh0cmFCeXRlcyA9PT0gMikge1xuICAgIHRtcCA9ICh1aW50OFtsZW4gLSAyXSA8PCA4KSArIHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMTBdICtcbiAgICAgIGxvb2t1cFsodG1wID4+IDQpICYgMHgzRl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgMikgJiAweDNGXSArXG4gICAgICAnPSdcbiAgICApXG4gIH1cblxuICByZXR1cm4gcGFydHMuam9pbignJylcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///32\n")},function(module,exports){eval("exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL25vZGVfbW9kdWxlcy9pZWVlNzU0L2luZGV4LmpzPzlkMGYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG1cbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSAoZSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSAobSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXNcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKVxuICAgIGUgPSBlIC0gZUJpYXNcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICgodmFsdWUgKiBjKSAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///33\n")},function(module,exports){eval("var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzP2Q3NzQiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///34\n")},function(module,exports,__webpack_require__){eval("\r\nmodule.exports = __webpack_require__(36);\r\n\r\n/**\r\n * Exports parser\r\n *\r\n * @api public\r\n *\r\n */\r\nmodule.exports.parser = __webpack_require__(1);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvaW5kZXguanM/OTRhYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcclxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL3NvY2tldCcpO1xyXG5cclxuLyoqXHJcbiAqIEV4cG9ydHMgcGFyc2VyXHJcbiAqXHJcbiAqIEBhcGkgcHVibGljXHJcbiAqXHJcbiAqL1xyXG5tb2R1bGUuZXhwb3J0cy5wYXJzZXIgPSByZXF1aXJlKCdlbmdpbmUuaW8tcGFyc2VyJyk7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///35\n")},function(module,exports,__webpack_require__){eval("/**\r\n * Module dependencies.\r\n */\r\n\r\nvar transports = __webpack_require__(16);\r\nvar Emitter = __webpack_require__(0);\r\nvar debug = __webpack_require__(5)('engine.io-client:socket');\r\nvar index = __webpack_require__(20);\r\nvar parser = __webpack_require__(1);\r\nvar parseuri = __webpack_require__(11);\r\nvar parseqs = __webpack_require__(3);\r\n\r\n/**\r\n * Module exports.\r\n */\r\n\r\nmodule.exports = Socket;\r\n\r\n/**\r\n * Socket constructor.\r\n *\r\n * @param {String|Object} uri or options\r\n * @param {Object} options\r\n * @api public\r\n */\r\n\r\nfunction Socket (uri, opts) {\r\n  if (!(this instanceof Socket)) return new Socket(uri, opts);\r\n\r\n  opts = opts || {};\r\n\r\n  if (uri && 'object' === typeof uri) {\r\n    opts = uri;\r\n    uri = null;\r\n  }\r\n\r\n  if (uri) {\r\n    uri = parseuri(uri);\r\n    opts.hostname = uri.host;\r\n    opts.secure = uri.protocol === 'https' || uri.protocol === 'wss';\r\n    opts.port = uri.port;\r\n    if (uri.query) opts.query = uri.query;\r\n  } else if (opts.host) {\r\n    opts.hostname = parseuri(opts.host).host;\r\n  }\r\n\r\n  this.secure = null != opts.secure ? opts.secure\r\n    : (typeof location !== 'undefined' && 'https:' === location.protocol);\r\n\r\n  if (opts.hostname && !opts.port) {\r\n    // if no port is specified manually, use the protocol default\r\n    opts.port = this.secure ? '443' : '80';\r\n  }\r\n\r\n  this.agent = opts.agent || false;\r\n  this.hostname = opts.hostname ||\r\n    (typeof location !== 'undefined' ? location.hostname : 'localhost');\r\n  this.port = opts.port || (typeof location !== 'undefined' && location.port\r\n      ? location.port\r\n      : (this.secure ? 443 : 80));\r\n  this.query = opts.query || {};\r\n  if ('string' === typeof this.query) this.query = parseqs.decode(this.query);\r\n  this.upgrade = false !== opts.upgrade;\r\n  this.path = (opts.path || '/engine.io').replace(/\\/$/, '') + '/';\r\n  this.forceJSONP = !!opts.forceJSONP;\r\n  this.jsonp = false !== opts.jsonp;\r\n  this.forceBase64 = !!opts.forceBase64;\r\n  this.enablesXDR = !!opts.enablesXDR;\r\n  this.timestampParam = opts.timestampParam || 't';\r\n  this.timestampRequests = opts.timestampRequests;\r\n  this.transports = opts.transports || ['polling', 'websocket'];\r\n  this.transportOptions = opts.transportOptions || {};\r\n  this.readyState = '';\r\n  this.writeBuffer = [];\r\n  this.prevBufferLen = 0;\r\n  this.policyPort = opts.policyPort || 843;\r\n  this.rememberUpgrade = opts.rememberUpgrade || false;\r\n  this.binaryType = null;\r\n  this.onlyBinaryUpgrades = opts.onlyBinaryUpgrades;\r\n  this.perMessageDeflate = false !== opts.perMessageDeflate ? (opts.perMessageDeflate || {}) : false;\r\n\r\n  if (true === this.perMessageDeflate) this.perMessageDeflate = {};\r\n  if (this.perMessageDeflate && null == this.perMessageDeflate.threshold) {\r\n    this.perMessageDeflate.threshold = 1024;\r\n  }\r\n\r\n  // SSL options for Node.js client\r\n  this.pfx = opts.pfx || null;\r\n  this.key = opts.key || null;\r\n  this.passphrase = opts.passphrase || null;\r\n  this.cert = opts.cert || null;\r\n  this.ca = opts.ca || null;\r\n  this.ciphers = opts.ciphers || null;\r\n  this.rejectUnauthorized = opts.rejectUnauthorized === undefined ? true : opts.rejectUnauthorized;\r\n  this.forceNode = !!opts.forceNode;\r\n\r\n  // detect ReactNative environment\r\n  this.isReactNative = (typeof navigator !== 'undefined' && typeof navigator.product === 'string' && navigator.product.toLowerCase() === 'reactnative');\r\n\r\n  // other options for Node.js or ReactNative client\r\n  if (typeof self === 'undefined' || this.isReactNative) {\r\n    if (opts.extraHeaders && Object.keys(opts.extraHeaders).length > 0) {\r\n      this.extraHeaders = opts.extraHeaders;\r\n    }\r\n\r\n    if (opts.localAddress) {\r\n      this.localAddress = opts.localAddress;\r\n    }\r\n  }\r\n\r\n  // set on handshake\r\n  this.id = null;\r\n  this.upgrades = null;\r\n  this.pingInterval = null;\r\n  this.pingTimeout = null;\r\n\r\n  // set on heartbeat\r\n  this.pingIntervalTimer = null;\r\n  this.pingTimeoutTimer = null;\r\n\r\n  this.open();\r\n}\r\n\r\nSocket.priorWebsocketSuccess = false;\r\n\r\n/**\r\n * Mix in `Emitter`.\r\n */\r\n\r\nEmitter(Socket.prototype);\r\n\r\n/**\r\n * Protocol version.\r\n *\r\n * @api public\r\n */\r\n\r\nSocket.protocol = parser.protocol; // this is an int\r\n\r\n/**\r\n * Expose deps for legacy compatibility\r\n * and standalone browser access.\r\n */\r\n\r\nSocket.Socket = Socket;\r\nSocket.Transport = __webpack_require__(10);\r\nSocket.transports = __webpack_require__(16);\r\nSocket.parser = __webpack_require__(1);\r\n\r\n/**\r\n * Creates transport of the given type.\r\n *\r\n * @param {String} transport name\r\n * @return {Transport}\r\n * @api private\r\n */\r\n\r\nSocket.prototype.createTransport = function (name) {\r\n  debug('creating transport \"%s\"', name);\r\n  var query = clone(this.query);\r\n\r\n  // append engine.io protocol identifier\r\n  query.EIO = parser.protocol;\r\n\r\n  // transport name\r\n  query.transport = name;\r\n\r\n  // per-transport options\r\n  var options = this.transportOptions[name] || {};\r\n\r\n  // session id if we already have one\r\n  if (this.id) query.sid = this.id;\r\n\r\n  var transport = new transports[name]({\r\n    query: query,\r\n    socket: this,\r\n    agent: options.agent || this.agent,\r\n    hostname: options.hostname || this.hostname,\r\n    port: options.port || this.port,\r\n    secure: options.secure || this.secure,\r\n    path: options.path || this.path,\r\n    forceJSONP: options.forceJSONP || this.forceJSONP,\r\n    jsonp: options.jsonp || this.jsonp,\r\n    forceBase64: options.forceBase64 || this.forceBase64,\r\n    enablesXDR: options.enablesXDR || this.enablesXDR,\r\n    timestampRequests: options.timestampRequests || this.timestampRequests,\r\n    timestampParam: options.timestampParam || this.timestampParam,\r\n    policyPort: options.policyPort || this.policyPort,\r\n    pfx: options.pfx || this.pfx,\r\n    key: options.key || this.key,\r\n    passphrase: options.passphrase || this.passphrase,\r\n    cert: options.cert || this.cert,\r\n    ca: options.ca || this.ca,\r\n    ciphers: options.ciphers || this.ciphers,\r\n    rejectUnauthorized: options.rejectUnauthorized || this.rejectUnauthorized,\r\n    perMessageDeflate: options.perMessageDeflate || this.perMessageDeflate,\r\n    extraHeaders: options.extraHeaders || this.extraHeaders,\r\n    forceNode: options.forceNode || this.forceNode,\r\n    localAddress: options.localAddress || this.localAddress,\r\n    requestTimeout: options.requestTimeout || this.requestTimeout,\r\n    protocols: options.protocols || void (0),\r\n    isReactNative: this.isReactNative\r\n  });\r\n\r\n  return transport;\r\n};\r\n\r\nfunction clone (obj) {\r\n  var o = {};\r\n  for (var i in obj) {\r\n    if (obj.hasOwnProperty(i)) {\r\n      o[i] = obj[i];\r\n    }\r\n  }\r\n  return o;\r\n}\r\n\r\n/**\r\n * Initializes transport to use and starts probe.\r\n *\r\n * @api private\r\n */\r\nSocket.prototype.open = function () {\r\n  var transport;\r\n  if (this.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf('websocket') !== -1) {\r\n    transport = 'websocket';\r\n  } else if (0 === this.transports.length) {\r\n    // Emit error on next tick so it can be listened to\r\n    var self = this;\r\n    setTimeout(function () {\r\n      self.emit('error', 'No transports available');\r\n    }, 0);\r\n    return;\r\n  } else {\r\n    transport = this.transports[0];\r\n  }\r\n  this.readyState = 'opening';\r\n\r\n  // Retry with the next transport if the transport is disabled (jsonp: false)\r\n  try {\r\n    transport = this.createTransport(transport);\r\n  } catch (e) {\r\n    this.transports.shift();\r\n    this.open();\r\n    return;\r\n  }\r\n\r\n  transport.open();\r\n  this.setTransport(transport);\r\n};\r\n\r\n/**\r\n * Sets the current transport. Disables the existing one (if any).\r\n *\r\n * @api private\r\n */\r\n\r\nSocket.prototype.setTransport = function (transport) {\r\n  debug('setting transport %s', transport.name);\r\n  var self = this;\r\n\r\n  if (this.transport) {\r\n    debug('clearing existing transport %s', this.transport.name);\r\n    this.transport.removeAllListeners();\r\n  }\r\n\r\n  // set up transport\r\n  this.transport = transport;\r\n\r\n  // set up transport listeners\r\n  transport\r\n  .on('drain', function () {\r\n    self.onDrain();\r\n  })\r\n  .on('packet', function (packet) {\r\n    self.onPacket(packet);\r\n  })\r\n  .on('error', function (e) {\r\n    self.onError(e);\r\n  })\r\n  .on('close', function () {\r\n    self.onClose('transport close');\r\n  });\r\n};\r\n\r\n/**\r\n * Probes a transport.\r\n *\r\n * @param {String} transport name\r\n * @api private\r\n */\r\n\r\nSocket.prototype.probe = function (name) {\r\n  debug('probing transport \"%s\"', name);\r\n  var transport = this.createTransport(name, { probe: 1 });\r\n  var failed = false;\r\n  var self = this;\r\n\r\n  Socket.priorWebsocketSuccess = false;\r\n\r\n  function onTransportOpen () {\r\n    if (self.onlyBinaryUpgrades) {\r\n      var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;\r\n      failed = failed || upgradeLosesBinary;\r\n    }\r\n    if (failed) return;\r\n\r\n    debug('probe transport \"%s\" opened', name);\r\n    transport.send([{ type: 'ping', data: 'probe' }]);\r\n    transport.once('packet', function (msg) {\r\n      if (failed) return;\r\n      if ('pong' === msg.type && 'probe' === msg.data) {\r\n        debug('probe transport \"%s\" pong', name);\r\n        self.upgrading = true;\r\n        self.emit('upgrading', transport);\r\n        if (!transport) return;\r\n        Socket.priorWebsocketSuccess = 'websocket' === transport.name;\r\n\r\n        debug('pausing current transport \"%s\"', self.transport.name);\r\n        self.transport.pause(function () {\r\n          if (failed) return;\r\n          if ('closed' === self.readyState) return;\r\n          debug('changing transport and sending upgrade packet');\r\n\r\n          cleanup();\r\n\r\n          self.setTransport(transport);\r\n          transport.send([{ type: 'upgrade' }]);\r\n          self.emit('upgrade', transport);\r\n          transport = null;\r\n          self.upgrading = false;\r\n          self.flush();\r\n        });\r\n      } else {\r\n        debug('probe transport \"%s\" failed', name);\r\n        var err = new Error('probe error');\r\n        err.transport = transport.name;\r\n        self.emit('upgradeError', err);\r\n      }\r\n    });\r\n  }\r\n\r\n  function freezeTransport () {\r\n    if (failed) return;\r\n\r\n    // Any callback called by transport should be ignored since now\r\n    failed = true;\r\n\r\n    cleanup();\r\n\r\n    transport.close();\r\n    transport = null;\r\n  }\r\n\r\n  // Handle any error that happens while probing\r\n  function onerror (err) {\r\n    var error = new Error('probe error: ' + err);\r\n    error.transport = transport.name;\r\n\r\n    freezeTransport();\r\n\r\n    debug('probe transport \"%s\" failed because of error: %s', name, err);\r\n\r\n    self.emit('upgradeError', error);\r\n  }\r\n\r\n  function onTransportClose () {\r\n    onerror('transport closed');\r\n  }\r\n\r\n  // When the socket is closed while we're probing\r\n  function onclose () {\r\n    onerror('socket closed');\r\n  }\r\n\r\n  // When the socket is upgraded while we're probing\r\n  function onupgrade (to) {\r\n    if (transport && to.name !== transport.name) {\r\n      debug('\"%s\" works - aborting \"%s\"', to.name, transport.name);\r\n      freezeTransport();\r\n    }\r\n  }\r\n\r\n  // Remove all listeners on the transport and on self\r\n  function cleanup () {\r\n    transport.removeListener('open', onTransportOpen);\r\n    transport.removeListener('error', onerror);\r\n    transport.removeListener('close', onTransportClose);\r\n    self.removeListener('close', onclose);\r\n    self.removeListener('upgrading', onupgrade);\r\n  }\r\n\r\n  transport.once('open', onTransportOpen);\r\n  transport.once('error', onerror);\r\n  transport.once('close', onTransportClose);\r\n\r\n  this.once('close', onclose);\r\n  this.once('upgrading', onupgrade);\r\n\r\n  transport.open();\r\n};\r\n\r\n/**\r\n * Called when connection is deemed open.\r\n *\r\n * @api public\r\n */\r\n\r\nSocket.prototype.onOpen = function () {\r\n  debug('socket open');\r\n  this.readyState = 'open';\r\n  Socket.priorWebsocketSuccess = 'websocket' === this.transport.name;\r\n  this.emit('open');\r\n  this.flush();\r\n\r\n  // we check for `readyState` in case an `open`\r\n  // listener already closed the socket\r\n  if ('open' === this.readyState && this.upgrade && this.transport.pause) {\r\n    debug('starting upgrade probes');\r\n    for (var i = 0, l = this.upgrades.length; i < l; i++) {\r\n      this.probe(this.upgrades[i]);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Handles a packet.\r\n *\r\n * @api private\r\n */\r\n\r\nSocket.prototype.onPacket = function (packet) {\r\n  if ('opening' === this.readyState || 'open' === this.readyState ||\r\n      'closing' === this.readyState) {\r\n    debug('socket receive: type \"%s\", data \"%s\"', packet.type, packet.data);\r\n\r\n    this.emit('packet', packet);\r\n\r\n    // Socket is live - any packet counts\r\n    this.emit('heartbeat');\r\n\r\n    switch (packet.type) {\r\n      case 'open':\r\n        this.onHandshake(JSON.parse(packet.data));\r\n        break;\r\n\r\n      case 'pong':\r\n        this.setPing();\r\n        this.emit('pong');\r\n        break;\r\n\r\n      case 'error':\r\n        var err = new Error('server error');\r\n        err.code = packet.data;\r\n        this.onError(err);\r\n        break;\r\n\r\n      case 'message':\r\n        this.emit('data', packet.data);\r\n        this.emit('message', packet.data);\r\n        break;\r\n    }\r\n  } else {\r\n    debug('packet received with socket readyState \"%s\"', this.readyState);\r\n  }\r\n};\r\n\r\n/**\r\n * Called upon handshake completion.\r\n *\r\n * @param {Object} handshake obj\r\n * @api private\r\n */\r\n\r\nSocket.prototype.onHandshake = function (data) {\r\n  this.emit('handshake', data);\r\n  this.id = data.sid;\r\n  this.transport.query.sid = data.sid;\r\n  this.upgrades = this.filterUpgrades(data.upgrades);\r\n  this.pingInterval = data.pingInterval;\r\n  this.pingTimeout = data.pingTimeout;\r\n  this.onOpen();\r\n  // In case open handler closes socket\r\n  if ('closed' === this.readyState) return;\r\n  this.setPing();\r\n\r\n  // Prolong liveness of socket on heartbeat\r\n  this.removeListener('heartbeat', this.onHeartbeat);\r\n  this.on('heartbeat', this.onHeartbeat);\r\n};\r\n\r\n/**\r\n * Resets ping timeout.\r\n *\r\n * @api private\r\n */\r\n\r\nSocket.prototype.onHeartbeat = function (timeout) {\r\n  clearTimeout(this.pingTimeoutTimer);\r\n  var self = this;\r\n  self.pingTimeoutTimer = setTimeout(function () {\r\n    if ('closed' === self.readyState) return;\r\n    self.onClose('ping timeout');\r\n  }, timeout || (self.pingInterval + self.pingTimeout));\r\n};\r\n\r\n/**\r\n * Pings server every `this.pingInterval` and expects response\r\n * within `this.pingTimeout` or closes connection.\r\n *\r\n * @api private\r\n */\r\n\r\nSocket.prototype.setPing = function () {\r\n  var self = this;\r\n  clearTimeout(self.pingIntervalTimer);\r\n  self.pingIntervalTimer = setTimeout(function () {\r\n    debug('writing ping packet - expecting pong within %sms', self.pingTimeout);\r\n    self.ping();\r\n    self.onHeartbeat(self.pingTimeout);\r\n  }, self.pingInterval);\r\n};\r\n\r\n/**\r\n* Sends a ping packet.\r\n*\r\n* @api private\r\n*/\r\n\r\nSocket.prototype.ping = function () {\r\n  var self = this;\r\n  this.sendPacket('ping', function () {\r\n    self.emit('ping');\r\n  });\r\n};\r\n\r\n/**\r\n * Called on `drain` event\r\n *\r\n * @api private\r\n */\r\n\r\nSocket.prototype.onDrain = function () {\r\n  this.writeBuffer.splice(0, this.prevBufferLen);\r\n\r\n  // setting prevBufferLen = 0 is very important\r\n  // for example, when upgrading, upgrade packet is sent over,\r\n  // and a nonzero prevBufferLen could cause problems on `drain`\r\n  this.prevBufferLen = 0;\r\n\r\n  if (0 === this.writeBuffer.length) {\r\n    this.emit('drain');\r\n  } else {\r\n    this.flush();\r\n  }\r\n};\r\n\r\n/**\r\n * Flush write buffers.\r\n *\r\n * @api private\r\n */\r\n\r\nSocket.prototype.flush = function () {\r\n  if ('closed' !== this.readyState && this.transport.writable &&\r\n    !this.upgrading && this.writeBuffer.length) {\r\n    debug('flushing %d packets in socket', this.writeBuffer.length);\r\n    this.transport.send(this.writeBuffer);\r\n    // keep track of current length of writeBuffer\r\n    // splice writeBuffer and callbackBuffer on `drain`\r\n    this.prevBufferLen = this.writeBuffer.length;\r\n    this.emit('flush');\r\n  }\r\n};\r\n\r\n/**\r\n * Sends a message.\r\n *\r\n * @param {String} message.\r\n * @param {Function} callback function.\r\n * @param {Object} options.\r\n * @return {Socket} for chaining.\r\n * @api public\r\n */\r\n\r\nSocket.prototype.write =\r\nSocket.prototype.send = function (msg, options, fn) {\r\n  this.sendPacket('message', msg, options, fn);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Sends a packet.\r\n *\r\n * @param {String} packet type.\r\n * @param {String} data.\r\n * @param {Object} options.\r\n * @param {Function} callback function.\r\n * @api private\r\n */\r\n\r\nSocket.prototype.sendPacket = function (type, data, options, fn) {\r\n  if ('function' === typeof data) {\r\n    fn = data;\r\n    data = undefined;\r\n  }\r\n\r\n  if ('function' === typeof options) {\r\n    fn = options;\r\n    options = null;\r\n  }\r\n\r\n  if ('closing' === this.readyState || 'closed' === this.readyState) {\r\n    return;\r\n  }\r\n\r\n  options = options || {};\r\n  options.compress = false !== options.compress;\r\n\r\n  var packet = {\r\n    type: type,\r\n    data: data,\r\n    options: options\r\n  };\r\n  this.emit('packetCreate', packet);\r\n  this.writeBuffer.push(packet);\r\n  if (fn) this.once('flush', fn);\r\n  this.flush();\r\n};\r\n\r\n/**\r\n * Closes the connection.\r\n *\r\n * @api private\r\n */\r\n\r\nSocket.prototype.close = function () {\r\n  if ('opening' === this.readyState || 'open' === this.readyState) {\r\n    this.readyState = 'closing';\r\n\r\n    var self = this;\r\n\r\n    if (this.writeBuffer.length) {\r\n      this.once('drain', function () {\r\n        if (this.upgrading) {\r\n          waitForUpgrade();\r\n        } else {\r\n          close();\r\n        }\r\n      });\r\n    } else if (this.upgrading) {\r\n      waitForUpgrade();\r\n    } else {\r\n      close();\r\n    }\r\n  }\r\n\r\n  function close () {\r\n    self.onClose('forced close');\r\n    debug('socket closing - telling transport to close');\r\n    self.transport.close();\r\n  }\r\n\r\n  function cleanupAndClose () {\r\n    self.removeListener('upgrade', cleanupAndClose);\r\n    self.removeListener('upgradeError', cleanupAndClose);\r\n    close();\r\n  }\r\n\r\n  function waitForUpgrade () {\r\n    // wait for upgrade to finish since we can't send packets while pausing a transport\r\n    self.once('upgrade', cleanupAndClose);\r\n    self.once('upgradeError', cleanupAndClose);\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Called upon transport error\r\n *\r\n * @api private\r\n */\r\n\r\nSocket.prototype.onError = function (err) {\r\n  debug('socket error %j', err);\r\n  Socket.priorWebsocketSuccess = false;\r\n  this.emit('error', err);\r\n  this.onClose('transport error', err);\r\n};\r\n\r\n/**\r\n * Called upon transport close.\r\n *\r\n * @api private\r\n */\r\n\r\nSocket.prototype.onClose = function (reason, desc) {\r\n  if ('opening' === this.readyState || 'open' === this.readyState || 'closing' === this.readyState) {\r\n    debug('socket close with reason: \"%s\"', reason);\r\n    var self = this;\r\n\r\n    // clear timers\r\n    clearTimeout(this.pingIntervalTimer);\r\n    clearTimeout(this.pingTimeoutTimer);\r\n\r\n    // stop event from firing again for transport\r\n    this.transport.removeAllListeners('close');\r\n\r\n    // ensure transport won't stay open\r\n    this.transport.close();\r\n\r\n    // ignore further transport communication\r\n    this.transport.removeAllListeners();\r\n\r\n    // set ready state\r\n    this.readyState = 'closed';\r\n\r\n    // clear session id\r\n    this.id = null;\r\n\r\n    // emit close event\r\n    this.emit('close', reason, desc);\r\n\r\n    // clean buffers after, so users can still\r\n    // grab the buffers on `close` event\r\n    self.writeBuffer = [];\r\n    self.prevBufferLen = 0;\r\n  }\r\n};\r\n\r\n/**\r\n * Filters upgrades, returning only those matching client transports.\r\n *\r\n * @param {Array} server upgrades\r\n * @api private\r\n *\r\n */\r\n\r\nSocket.prototype.filterUpgrades = function (upgrades) {\r\n  var filteredUpgrades = [];\r\n  for (var i = 0, j = upgrades.length; i < j; i++) {\r\n    if (~index(this.transports, upgrades[i])) filteredUpgrades.push(upgrades[i]);\r\n  }\r\n  return filteredUpgrades;\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///36\n")},function(module,exports){eval("\r\n/**\r\n * Module exports.\r\n *\r\n * Logic borrowed from Modernizr:\r\n *\r\n *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js\r\n */\r\n\r\ntry {\r\n  module.exports = typeof XMLHttpRequest !== 'undefined' &&\r\n    'withCredentials' in new XMLHttpRequest();\r\n} catch (err) {\r\n  // if XMLHttp support is disabled in IE then it will throw\r\n  // when trying to create\r\n  module.exports = false;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFzLWNvcnMvaW5kZXguanM/YzllYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcclxuLyoqXHJcbiAqIE1vZHVsZSBleHBvcnRzLlxyXG4gKlxyXG4gKiBMb2dpYyBib3Jyb3dlZCBmcm9tIE1vZGVybml6cjpcclxuICpcclxuICogICAtIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9jb3JzLmpzXHJcbiAqL1xyXG5cclxudHJ5IHtcclxuICBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAhPT0gJ3VuZGVmaW5lZCcgJiZcclxuICAgICd3aXRoQ3JlZGVudGlhbHMnIGluIG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xyXG59IGNhdGNoIChlcnIpIHtcclxuICAvLyBpZiBYTUxIdHRwIHN1cHBvcnQgaXMgZGlzYWJsZWQgaW4gSUUgdGhlbiBpdCB3aWxsIHRocm93XHJcbiAgLy8gd2hlbiB0cnlpbmcgdG8gY3JlYXRlXHJcbiAgbW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcclxufVxyXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///37\n")},function(module,exports,__webpack_require__){eval("/* global attachEvent */\r\n\r\n/**\r\n * Module requirements.\r\n */\r\n\r\nvar XMLHttpRequest = __webpack_require__(9);\r\nvar Polling = __webpack_require__(17);\r\nvar Emitter = __webpack_require__(0);\r\nvar inherit = __webpack_require__(4);\r\nvar debug = __webpack_require__(5)('engine.io-client:polling-xhr');\r\n\r\n/**\r\n * Module exports.\r\n */\r\n\r\nmodule.exports = XHR;\r\nmodule.exports.Request = Request;\r\n\r\n/**\r\n * Empty function\r\n */\r\n\r\nfunction empty () {}\r\n\r\n/**\r\n * XHR Polling constructor.\r\n *\r\n * @param {Object} opts\r\n * @api public\r\n */\r\n\r\nfunction XHR (opts) {\r\n  Polling.call(this, opts);\r\n  this.requestTimeout = opts.requestTimeout;\r\n  this.extraHeaders = opts.extraHeaders;\r\n\r\n  if (typeof location !== 'undefined') {\r\n    var isSSL = 'https:' === location.protocol;\r\n    var port = location.port;\r\n\r\n    // some user agents have empty `location.port`\r\n    if (!port) {\r\n      port = isSSL ? 443 : 80;\r\n    }\r\n\r\n    this.xd = (typeof location !== 'undefined' && opts.hostname !== location.hostname) ||\r\n      port !== opts.port;\r\n    this.xs = opts.secure !== isSSL;\r\n  }\r\n}\r\n\r\n/**\r\n * Inherits from Polling.\r\n */\r\n\r\ninherit(XHR, Polling);\r\n\r\n/**\r\n * XHR supports binary\r\n */\r\n\r\nXHR.prototype.supportsBinary = true;\r\n\r\n/**\r\n * Creates a request.\r\n *\r\n * @param {String} method\r\n * @api private\r\n */\r\n\r\nXHR.prototype.request = function (opts) {\r\n  opts = opts || {};\r\n  opts.uri = this.uri();\r\n  opts.xd = this.xd;\r\n  opts.xs = this.xs;\r\n  opts.agent = this.agent || false;\r\n  opts.supportsBinary = this.supportsBinary;\r\n  opts.enablesXDR = this.enablesXDR;\r\n\r\n  // SSL options for Node.js client\r\n  opts.pfx = this.pfx;\r\n  opts.key = this.key;\r\n  opts.passphrase = this.passphrase;\r\n  opts.cert = this.cert;\r\n  opts.ca = this.ca;\r\n  opts.ciphers = this.ciphers;\r\n  opts.rejectUnauthorized = this.rejectUnauthorized;\r\n  opts.requestTimeout = this.requestTimeout;\r\n\r\n  // other options for Node.js client\r\n  opts.extraHeaders = this.extraHeaders;\r\n\r\n  return new Request(opts);\r\n};\r\n\r\n/**\r\n * Sends data.\r\n *\r\n * @param {String} data to send.\r\n * @param {Function} called upon flush.\r\n * @api private\r\n */\r\n\r\nXHR.prototype.doWrite = function (data, fn) {\r\n  var isBinary = typeof data !== 'string' && data !== undefined;\r\n  var req = this.request({ method: 'POST', data: data, isBinary: isBinary });\r\n  var self = this;\r\n  req.on('success', fn);\r\n  req.on('error', function (err) {\r\n    self.onError('xhr post error', err);\r\n  });\r\n  this.sendXhr = req;\r\n};\r\n\r\n/**\r\n * Starts a poll cycle.\r\n *\r\n * @api private\r\n */\r\n\r\nXHR.prototype.doPoll = function () {\r\n  debug('xhr poll');\r\n  var req = this.request();\r\n  var self = this;\r\n  req.on('data', function (data) {\r\n    self.onData(data);\r\n  });\r\n  req.on('error', function (err) {\r\n    self.onError('xhr poll error', err);\r\n  });\r\n  this.pollXhr = req;\r\n};\r\n\r\n/**\r\n * Request constructor\r\n *\r\n * @param {Object} options\r\n * @api public\r\n */\r\n\r\nfunction Request (opts) {\r\n  this.method = opts.method || 'GET';\r\n  this.uri = opts.uri;\r\n  this.xd = !!opts.xd;\r\n  this.xs = !!opts.xs;\r\n  this.async = false !== opts.async;\r\n  this.data = undefined !== opts.data ? opts.data : null;\r\n  this.agent = opts.agent;\r\n  this.isBinary = opts.isBinary;\r\n  this.supportsBinary = opts.supportsBinary;\r\n  this.enablesXDR = opts.enablesXDR;\r\n  this.requestTimeout = opts.requestTimeout;\r\n\r\n  // SSL options for Node.js client\r\n  this.pfx = opts.pfx;\r\n  this.key = opts.key;\r\n  this.passphrase = opts.passphrase;\r\n  this.cert = opts.cert;\r\n  this.ca = opts.ca;\r\n  this.ciphers = opts.ciphers;\r\n  this.rejectUnauthorized = opts.rejectUnauthorized;\r\n\r\n  // other options for Node.js client\r\n  this.extraHeaders = opts.extraHeaders;\r\n\r\n  this.create();\r\n}\r\n\r\n/**\r\n * Mix in `Emitter`.\r\n */\r\n\r\nEmitter(Request.prototype);\r\n\r\n/**\r\n * Creates the XHR object and sends the request.\r\n *\r\n * @api private\r\n */\r\n\r\nRequest.prototype.create = function () {\r\n  var opts = { agent: this.agent, xdomain: this.xd, xscheme: this.xs, enablesXDR: this.enablesXDR };\r\n\r\n  // SSL options for Node.js client\r\n  opts.pfx = this.pfx;\r\n  opts.key = this.key;\r\n  opts.passphrase = this.passphrase;\r\n  opts.cert = this.cert;\r\n  opts.ca = this.ca;\r\n  opts.ciphers = this.ciphers;\r\n  opts.rejectUnauthorized = this.rejectUnauthorized;\r\n\r\n  var xhr = this.xhr = new XMLHttpRequest(opts);\r\n  var self = this;\r\n\r\n  try {\r\n    debug('xhr open %s: %s', this.method, this.uri);\r\n    xhr.open(this.method, this.uri, this.async);\r\n    try {\r\n      if (this.extraHeaders) {\r\n        xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);\r\n        for (var i in this.extraHeaders) {\r\n          if (this.extraHeaders.hasOwnProperty(i)) {\r\n            xhr.setRequestHeader(i, this.extraHeaders[i]);\r\n          }\r\n        }\r\n      }\r\n    } catch (e) {}\r\n\r\n    if ('POST' === this.method) {\r\n      try {\r\n        if (this.isBinary) {\r\n          xhr.setRequestHeader('Content-type', 'application/octet-stream');\r\n        } else {\r\n          xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');\r\n        }\r\n      } catch (e) {}\r\n    }\r\n\r\n    try {\r\n      xhr.setRequestHeader('Accept', '*/*');\r\n    } catch (e) {}\r\n\r\n    // ie6 check\r\n    if ('withCredentials' in xhr) {\r\n      xhr.withCredentials = true;\r\n    }\r\n\r\n    if (this.requestTimeout) {\r\n      xhr.timeout = this.requestTimeout;\r\n    }\r\n\r\n    if (this.hasXDR()) {\r\n      xhr.onload = function () {\r\n        self.onLoad();\r\n      };\r\n      xhr.onerror = function () {\r\n        self.onError(xhr.responseText);\r\n      };\r\n    } else {\r\n      xhr.onreadystatechange = function () {\r\n        if (xhr.readyState === 2) {\r\n          try {\r\n            var contentType = xhr.getResponseHeader('Content-Type');\r\n            if (self.supportsBinary && contentType === 'application/octet-stream') {\r\n              xhr.responseType = 'arraybuffer';\r\n            }\r\n          } catch (e) {}\r\n        }\r\n        if (4 !== xhr.readyState) return;\r\n        if (200 === xhr.status || 1223 === xhr.status) {\r\n          self.onLoad();\r\n        } else {\r\n          // make sure the `error` event handler that's user-set\r\n          // does not throw in the same tick and gets caught here\r\n          setTimeout(function () {\r\n            self.onError(xhr.status);\r\n          }, 0);\r\n        }\r\n      };\r\n    }\r\n\r\n    debug('xhr data %s', this.data);\r\n    xhr.send(this.data);\r\n  } catch (e) {\r\n    // Need to defer since .create() is called directly fhrom the constructor\r\n    // and thus the 'error' event can only be only bound *after* this exception\r\n    // occurs.  Therefore, also, we cannot throw here at all.\r\n    setTimeout(function () {\r\n      self.onError(e);\r\n    }, 0);\r\n    return;\r\n  }\r\n\r\n  if (typeof document !== 'undefined') {\r\n    this.index = Request.requestsCount++;\r\n    Request.requests[this.index] = this;\r\n  }\r\n};\r\n\r\n/**\r\n * Called upon successful response.\r\n *\r\n * @api private\r\n */\r\n\r\nRequest.prototype.onSuccess = function () {\r\n  this.emit('success');\r\n  this.cleanup();\r\n};\r\n\r\n/**\r\n * Called if we have data.\r\n *\r\n * @api private\r\n */\r\n\r\nRequest.prototype.onData = function (data) {\r\n  this.emit('data', data);\r\n  this.onSuccess();\r\n};\r\n\r\n/**\r\n * Called upon error.\r\n *\r\n * @api private\r\n */\r\n\r\nRequest.prototype.onError = function (err) {\r\n  this.emit('error', err);\r\n  this.cleanup(true);\r\n};\r\n\r\n/**\r\n * Cleans up house.\r\n *\r\n * @api private\r\n */\r\n\r\nRequest.prototype.cleanup = function (fromError) {\r\n  if ('undefined' === typeof this.xhr || null === this.xhr) {\r\n    return;\r\n  }\r\n  // xmlhttprequest\r\n  if (this.hasXDR()) {\r\n    this.xhr.onload = this.xhr.onerror = empty;\r\n  } else {\r\n    this.xhr.onreadystatechange = empty;\r\n  }\r\n\r\n  if (fromError) {\r\n    try {\r\n      this.xhr.abort();\r\n    } catch (e) {}\r\n  }\r\n\r\n  if (typeof document !== 'undefined') {\r\n    delete Request.requests[this.index];\r\n  }\r\n\r\n  this.xhr = null;\r\n};\r\n\r\n/**\r\n * Called upon load.\r\n *\r\n * @api private\r\n */\r\n\r\nRequest.prototype.onLoad = function () {\r\n  var data;\r\n  try {\r\n    var contentType;\r\n    try {\r\n      contentType = this.xhr.getResponseHeader('Content-Type');\r\n    } catch (e) {}\r\n    if (contentType === 'application/octet-stream') {\r\n      data = this.xhr.response || this.xhr.responseText;\r\n    } else {\r\n      data = this.xhr.responseText;\r\n    }\r\n  } catch (e) {\r\n    this.onError(e);\r\n  }\r\n  if (null != data) {\r\n    this.onData(data);\r\n  }\r\n};\r\n\r\n/**\r\n * Check if it has XDomainRequest.\r\n *\r\n * @api private\r\n */\r\n\r\nRequest.prototype.hasXDR = function () {\r\n  return typeof XDomainRequest !== 'undefined' && !this.xs && this.enablesXDR;\r\n};\r\n\r\n/**\r\n * Aborts the request.\r\n *\r\n * @api public\r\n */\r\n\r\nRequest.prototype.abort = function () {\r\n  this.cleanup();\r\n};\r\n\r\n/**\r\n * Aborts pending requests when unloading the window. This is needed to prevent\r\n * memory leaks (e.g. when using IE) and to ensure that no spurious error is\r\n * emitted.\r\n */\r\n\r\nRequest.requestsCount = 0;\r\nRequest.requests = {};\r\n\r\nif (typeof document !== 'undefined') {\r\n  if (typeof attachEvent === 'function') {\r\n    attachEvent('onunload', unloadHandler);\r\n  } else if (typeof addEventListener === 'function') {\r\n    var terminationEvent = 'onpagehide' in self ? 'pagehide' : 'unload';\r\n    addEventListener(terminationEvent, unloadHandler, false);\r\n  }\r\n}\r\n\r\nfunction unloadHandler () {\r\n  for (var i in Request.requests) {\r\n    if (Request.requests.hasOwnProperty(i)) {\r\n      Request.requests[i].abort();\r\n    }\r\n  }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///38\n")},function(module,exports){eval("\r\n/**\r\n * Gets the keys for an object.\r\n *\r\n * @return {Array} keys\r\n * @api private\r\n */\r\n\r\nmodule.exports = Object.keys || function keys (obj){\r\n  var arr = [];\r\n  var has = Object.prototype.hasOwnProperty;\r\n\r\n  for (var i in obj) {\r\n    if (has.call(obj, i)) {\r\n      arr.push(i);\r\n    }\r\n  }\r\n  return arr;\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLXBhcnNlci9saWIva2V5cy5qcz83NjRiIl0sInNvdXJjZXNDb250ZW50IjpbIlxyXG4vKipcclxuICogR2V0cyB0aGUga2V5cyBmb3IgYW4gb2JqZWN0LlxyXG4gKlxyXG4gKiBAcmV0dXJuIHtBcnJheX0ga2V5c1xyXG4gKiBAYXBpIHByaXZhdGVcclxuICovXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMgKG9iail7XHJcbiAgdmFyIGFyciA9IFtdO1xyXG4gIHZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xyXG5cclxuICBmb3IgKHZhciBpIGluIG9iaikge1xyXG4gICAgaWYgKGhhcy5jYWxsKG9iaiwgaSkpIHtcclxuICAgICAgYXJyLnB1c2goaSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBhcnI7XHJcbn07XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///39\n")},function(module,exports){eval("var toString = {}.toString;\r\n\r\nmodule.exports = Array.isArray || function (arr) {\r\n  return toString.call(arr) == '[object Array]';\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFzLWJpbmFyeTIvbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanM/ZTgyZSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XHJcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xyXG59O1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///40\n")},function(module,exports){eval("/**\r\n * An abstraction for slicing an arraybuffer even when\r\n * ArrayBuffer.prototype.slice is not supported\r\n *\r\n * @api public\r\n */\r\n\r\nmodule.exports = function(arraybuffer, start, end) {\r\n  var bytes = arraybuffer.byteLength;\r\n  start = start || 0;\r\n  end = end || bytes;\r\n\r\n  if (arraybuffer.slice) { return arraybuffer.slice(start, end); }\r\n\r\n  if (start < 0) { start += bytes; }\r\n  if (end < 0) { end += bytes; }\r\n  if (end > bytes) { end = bytes; }\r\n\r\n  if (start >= bytes || start >= end || bytes === 0) {\r\n    return new ArrayBuffer(0);\r\n  }\r\n\r\n  var abv = new Uint8Array(arraybuffer);\r\n  var result = new Uint8Array(end - start);\r\n  for (var i = start, ii = 0; i < end; i++, ii++) {\r\n    result[ii] = abv[i];\r\n  }\r\n  return result.buffer;\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXJyYXlidWZmZXIuc2xpY2UvaW5kZXguanM/Y2E5OSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQW4gYWJzdHJhY3Rpb24gZm9yIHNsaWNpbmcgYW4gYXJyYXlidWZmZXIgZXZlbiB3aGVuXHJcbiAqIEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZSBpcyBub3Qgc3VwcG9ydGVkXHJcbiAqXHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihhcnJheWJ1ZmZlciwgc3RhcnQsIGVuZCkge1xyXG4gIHZhciBieXRlcyA9IGFycmF5YnVmZmVyLmJ5dGVMZW5ndGg7XHJcbiAgc3RhcnQgPSBzdGFydCB8fCAwO1xyXG4gIGVuZCA9IGVuZCB8fCBieXRlcztcclxuXHJcbiAgaWYgKGFycmF5YnVmZmVyLnNsaWNlKSB7IHJldHVybiBhcnJheWJ1ZmZlci5zbGljZShzdGFydCwgZW5kKTsgfVxyXG5cclxuICBpZiAoc3RhcnQgPCAwKSB7IHN0YXJ0ICs9IGJ5dGVzOyB9XHJcbiAgaWYgKGVuZCA8IDApIHsgZW5kICs9IGJ5dGVzOyB9XHJcbiAgaWYgKGVuZCA+IGJ5dGVzKSB7IGVuZCA9IGJ5dGVzOyB9XHJcblxyXG4gIGlmIChzdGFydCA+PSBieXRlcyB8fCBzdGFydCA+PSBlbmQgfHwgYnl0ZXMgPT09IDApIHtcclxuICAgIHJldHVybiBuZXcgQXJyYXlCdWZmZXIoMCk7XHJcbiAgfVxyXG5cclxuICB2YXIgYWJ2ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlidWZmZXIpO1xyXG4gIHZhciByZXN1bHQgPSBuZXcgVWludDhBcnJheShlbmQgLSBzdGFydCk7XHJcbiAgZm9yICh2YXIgaSA9IHN0YXJ0LCBpaSA9IDA7IGkgPCBlbmQ7IGkrKywgaWkrKykge1xyXG4gICAgcmVzdWx0W2lpXSA9IGFidltpXTtcclxuICB9XHJcbiAgcmV0dXJuIHJlc3VsdC5idWZmZXI7XHJcbn07XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///41\n")},function(module,exports){eval("module.exports = after\r\n\r\nfunction after(count, callback, err_cb) {\r\n    var bail = false\r\n    err_cb = err_cb || noop\r\n    proxy.count = count\r\n\r\n    return (count === 0) ? callback() : proxy\r\n\r\n    function proxy(err, result) {\r\n        if (proxy.count <= 0) {\r\n            throw new Error('after called too many times')\r\n        }\r\n        --proxy.count\r\n\r\n        // after first error, rest are passed to err_cb\r\n        if (err) {\r\n            bail = true\r\n            callback(err)\r\n            // future error callbacks will go to error handler\r\n            callback = err_cb\r\n        } else if (proxy.count === 0 && !bail) {\r\n            callback(null, result)\r\n        }\r\n    }\r\n}\r\n\r\nfunction noop() {}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWZ0ZXIvaW5kZXguanM/Y2NjMSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGFmdGVyXHJcblxyXG5mdW5jdGlvbiBhZnRlcihjb3VudCwgY2FsbGJhY2ssIGVycl9jYikge1xyXG4gICAgdmFyIGJhaWwgPSBmYWxzZVxyXG4gICAgZXJyX2NiID0gZXJyX2NiIHx8IG5vb3BcclxuICAgIHByb3h5LmNvdW50ID0gY291bnRcclxuXHJcbiAgICByZXR1cm4gKGNvdW50ID09PSAwKSA/IGNhbGxiYWNrKCkgOiBwcm94eVxyXG5cclxuICAgIGZ1bmN0aW9uIHByb3h5KGVyciwgcmVzdWx0KSB7XHJcbiAgICAgICAgaWYgKHByb3h5LmNvdW50IDw9IDApIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdhZnRlciBjYWxsZWQgdG9vIG1hbnkgdGltZXMnKVxyXG4gICAgICAgIH1cclxuICAgICAgICAtLXByb3h5LmNvdW50XHJcblxyXG4gICAgICAgIC8vIGFmdGVyIGZpcnN0IGVycm9yLCByZXN0IGFyZSBwYXNzZWQgdG8gZXJyX2NiXHJcbiAgICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgICBiYWlsID0gdHJ1ZVxyXG4gICAgICAgICAgICBjYWxsYmFjayhlcnIpXHJcbiAgICAgICAgICAgIC8vIGZ1dHVyZSBlcnJvciBjYWxsYmFja3Mgd2lsbCBnbyB0byBlcnJvciBoYW5kbGVyXHJcbiAgICAgICAgICAgIGNhbGxiYWNrID0gZXJyX2NiXHJcbiAgICAgICAgfSBlbHNlIGlmIChwcm94eS5jb3VudCA9PT0gMCAmJiAhYmFpbCkge1xyXG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCByZXN1bHQpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBub29wKCkge31cclxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///42\n")},function(module,exports){eval("/*! https://mths.be/utf8js v2.1.2 by @mathias */\r\n\r\nvar stringFromCharCode = String.fromCharCode;\r\n\r\n// Taken from https://mths.be/punycode\r\nfunction ucs2decode(string) {\r\n\tvar output = [];\r\n\tvar counter = 0;\r\n\tvar length = string.length;\r\n\tvar value;\r\n\tvar extra;\r\n\twhile (counter < length) {\r\n\t\tvalue = string.charCodeAt(counter++);\r\n\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\r\n\t\t\t// high surrogate, and there is a next character\r\n\t\t\textra = string.charCodeAt(counter++);\r\n\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\r\n\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\r\n\t\t\t} else {\r\n\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\r\n\t\t\t\t// code unit is the high surrogate of a surrogate pair\r\n\t\t\t\toutput.push(value);\r\n\t\t\t\tcounter--;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\toutput.push(value);\r\n\t\t}\r\n\t}\r\n\treturn output;\r\n}\r\n\r\n// Taken from https://mths.be/punycode\r\nfunction ucs2encode(array) {\r\n\tvar length = array.length;\r\n\tvar index = -1;\r\n\tvar value;\r\n\tvar output = '';\r\n\twhile (++index < length) {\r\n\t\tvalue = array[index];\r\n\t\tif (value > 0xFFFF) {\r\n\t\t\tvalue -= 0x10000;\r\n\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\r\n\t\t\tvalue = 0xDC00 | value & 0x3FF;\r\n\t\t}\r\n\t\toutput += stringFromCharCode(value);\r\n\t}\r\n\treturn output;\r\n}\r\n\r\nfunction checkScalarValue(codePoint, strict) {\r\n\tif (codePoint >= 0xD800 && codePoint <= 0xDFFF) {\r\n\t\tif (strict) {\r\n\t\t\tthrow Error(\r\n\t\t\t\t'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +\r\n\t\t\t\t' is not a scalar value'\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\treturn true;\r\n}\r\n/*--------------------------------------------------------------------------*/\r\n\r\nfunction createByte(codePoint, shift) {\r\n\treturn stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);\r\n}\r\n\r\nfunction encodeCodePoint(codePoint, strict) {\r\n\tif ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence\r\n\t\treturn stringFromCharCode(codePoint);\r\n\t}\r\n\tvar symbol = '';\r\n\tif ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence\r\n\t\tsymbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);\r\n\t}\r\n\telse if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence\r\n\t\tif (!checkScalarValue(codePoint, strict)) {\r\n\t\t\tcodePoint = 0xFFFD;\r\n\t\t}\r\n\t\tsymbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);\r\n\t\tsymbol += createByte(codePoint, 6);\r\n\t}\r\n\telse if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence\r\n\t\tsymbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);\r\n\t\tsymbol += createByte(codePoint, 12);\r\n\t\tsymbol += createByte(codePoint, 6);\r\n\t}\r\n\tsymbol += stringFromCharCode((codePoint & 0x3F) | 0x80);\r\n\treturn symbol;\r\n}\r\n\r\nfunction utf8encode(string, opts) {\r\n\topts = opts || {};\r\n\tvar strict = false !== opts.strict;\r\n\r\n\tvar codePoints = ucs2decode(string);\r\n\tvar length = codePoints.length;\r\n\tvar index = -1;\r\n\tvar codePoint;\r\n\tvar byteString = '';\r\n\twhile (++index < length) {\r\n\t\tcodePoint = codePoints[index];\r\n\t\tbyteString += encodeCodePoint(codePoint, strict);\r\n\t}\r\n\treturn byteString;\r\n}\r\n\r\n/*--------------------------------------------------------------------------*/\r\n\r\nfunction readContinuationByte() {\r\n\tif (byteIndex >= byteCount) {\r\n\t\tthrow Error('Invalid byte index');\r\n\t}\r\n\r\n\tvar continuationByte = byteArray[byteIndex] & 0xFF;\r\n\tbyteIndex++;\r\n\r\n\tif ((continuationByte & 0xC0) == 0x80) {\r\n\t\treturn continuationByte & 0x3F;\r\n\t}\r\n\r\n\t// If we end up here, it’s not a continuation byte\r\n\tthrow Error('Invalid continuation byte');\r\n}\r\n\r\nfunction decodeSymbol(strict) {\r\n\tvar byte1;\r\n\tvar byte2;\r\n\tvar byte3;\r\n\tvar byte4;\r\n\tvar codePoint;\r\n\r\n\tif (byteIndex > byteCount) {\r\n\t\tthrow Error('Invalid byte index');\r\n\t}\r\n\r\n\tif (byteIndex == byteCount) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// Read first byte\r\n\tbyte1 = byteArray[byteIndex] & 0xFF;\r\n\tbyteIndex++;\r\n\r\n\t// 1-byte sequence (no continuation bytes)\r\n\tif ((byte1 & 0x80) == 0) {\r\n\t\treturn byte1;\r\n\t}\r\n\r\n\t// 2-byte sequence\r\n\tif ((byte1 & 0xE0) == 0xC0) {\r\n\t\tbyte2 = readContinuationByte();\r\n\t\tcodePoint = ((byte1 & 0x1F) << 6) | byte2;\r\n\t\tif (codePoint >= 0x80) {\r\n\t\t\treturn codePoint;\r\n\t\t} else {\r\n\t\t\tthrow Error('Invalid continuation byte');\r\n\t\t}\r\n\t}\r\n\r\n\t// 3-byte sequence (may include unpaired surrogates)\r\n\tif ((byte1 & 0xF0) == 0xE0) {\r\n\t\tbyte2 = readContinuationByte();\r\n\t\tbyte3 = readContinuationByte();\r\n\t\tcodePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;\r\n\t\tif (codePoint >= 0x0800) {\r\n\t\t\treturn checkScalarValue(codePoint, strict) ? codePoint : 0xFFFD;\r\n\t\t} else {\r\n\t\t\tthrow Error('Invalid continuation byte');\r\n\t\t}\r\n\t}\r\n\r\n\t// 4-byte sequence\r\n\tif ((byte1 & 0xF8) == 0xF0) {\r\n\t\tbyte2 = readContinuationByte();\r\n\t\tbyte3 = readContinuationByte();\r\n\t\tbyte4 = readContinuationByte();\r\n\t\tcodePoint = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0C) |\r\n\t\t\t(byte3 << 0x06) | byte4;\r\n\t\tif (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {\r\n\t\t\treturn codePoint;\r\n\t\t}\r\n\t}\r\n\r\n\tthrow Error('Invalid UTF-8 detected');\r\n}\r\n\r\nvar byteArray;\r\nvar byteCount;\r\nvar byteIndex;\r\nfunction utf8decode(byteString, opts) {\r\n\topts = opts || {};\r\n\tvar strict = false !== opts.strict;\r\n\r\n\tbyteArray = ucs2decode(byteString);\r\n\tbyteCount = byteArray.length;\r\n\tbyteIndex = 0;\r\n\tvar codePoints = [];\r\n\tvar tmp;\r\n\twhile ((tmp = decodeSymbol(strict)) !== false) {\r\n\t\tcodePoints.push(tmp);\r\n\t}\r\n\treturn ucs2encode(codePoints);\r\n}\r\n\r\nmodule.exports = {\r\n\tversion: '2.1.2',\r\n\tencode: utf8encode,\r\n\tdecode: utf8decode\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///43\n")},function(module,exports){eval('/*\r\n * base64-arraybuffer\r\n * https://github.com/niklasvh/base64-arraybuffer\r\n *\r\n * Copyright (c) 2012 Niklas von Hertzen\r\n * Licensed under the MIT license.\r\n */\r\n(function(){\r\n  "use strict";\r\n\r\n  var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";\r\n\r\n  // Use a lookup table to find the index.\r\n  var lookup = new Uint8Array(256);\r\n  for (var i = 0; i < chars.length; i++) {\r\n    lookup[chars.charCodeAt(i)] = i;\r\n  }\r\n\r\n  exports.encode = function(arraybuffer) {\r\n    var bytes = new Uint8Array(arraybuffer),\r\n    i, len = bytes.length, base64 = "";\r\n\r\n    for (i = 0; i < len; i+=3) {\r\n      base64 += chars[bytes[i] >> 2];\r\n      base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\r\n      base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\r\n      base64 += chars[bytes[i + 2] & 63];\r\n    }\r\n\r\n    if ((len % 3) === 2) {\r\n      base64 = base64.substring(0, base64.length - 1) + "=";\r\n    } else if (len % 3 === 1) {\r\n      base64 = base64.substring(0, base64.length - 2) + "==";\r\n    }\r\n\r\n    return base64;\r\n  };\r\n\r\n  exports.decode =  function(base64) {\r\n    var bufferLength = base64.length * 0.75,\r\n    len = base64.length, i, p = 0,\r\n    encoded1, encoded2, encoded3, encoded4;\r\n\r\n    if (base64[base64.length - 1] === "=") {\r\n      bufferLength--;\r\n      if (base64[base64.length - 2] === "=") {\r\n        bufferLength--;\r\n      }\r\n    }\r\n\r\n    var arraybuffer = new ArrayBuffer(bufferLength),\r\n    bytes = new Uint8Array(arraybuffer);\r\n\r\n    for (i = 0; i < len; i+=4) {\r\n      encoded1 = lookup[base64.charCodeAt(i)];\r\n      encoded2 = lookup[base64.charCodeAt(i+1)];\r\n      encoded3 = lookup[base64.charCodeAt(i+2)];\r\n      encoded4 = lookup[base64.charCodeAt(i+3)];\r\n\r\n      bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\r\n      bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\r\n      bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\r\n    }\r\n\r\n    return arraybuffer;\r\n  };\r\n})();\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFzZTY0LWFycmF5YnVmZmVyL2xpYi9iYXNlNjQtYXJyYXlidWZmZXIuanM/ODM5MCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gKiBiYXNlNjQtYXJyYXlidWZmZXJcclxuICogaHR0cHM6Ly9naXRodWIuY29tL25pa2xhc3ZoL2Jhc2U2NC1hcnJheWJ1ZmZlclxyXG4gKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTIgTmlrbGFzIHZvbiBIZXJ0emVuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cclxuICovXHJcbihmdW5jdGlvbigpe1xyXG4gIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICB2YXIgY2hhcnMgPSBcIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky9cIjtcclxuXHJcbiAgLy8gVXNlIGEgbG9va3VwIHRhYmxlIHRvIGZpbmQgdGhlIGluZGV4LlxyXG4gIHZhciBsb29rdXAgPSBuZXcgVWludDhBcnJheSgyNTYpO1xyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2hhcnMubGVuZ3RoOyBpKyspIHtcclxuICAgIGxvb2t1cFtjaGFycy5jaGFyQ29kZUF0KGkpXSA9IGk7XHJcbiAgfVxyXG5cclxuICBleHBvcnRzLmVuY29kZSA9IGZ1bmN0aW9uKGFycmF5YnVmZmVyKSB7XHJcbiAgICB2YXIgYnl0ZXMgPSBuZXcgVWludDhBcnJheShhcnJheWJ1ZmZlciksXHJcbiAgICBpLCBsZW4gPSBieXRlcy5sZW5ndGgsIGJhc2U2NCA9IFwiXCI7XHJcblxyXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSs9Mykge1xyXG4gICAgICBiYXNlNjQgKz0gY2hhcnNbYnl0ZXNbaV0gPj4gMl07XHJcbiAgICAgIGJhc2U2NCArPSBjaGFyc1soKGJ5dGVzW2ldICYgMykgPDwgNCkgfCAoYnl0ZXNbaSArIDFdID4+IDQpXTtcclxuICAgICAgYmFzZTY0ICs9IGNoYXJzWygoYnl0ZXNbaSArIDFdICYgMTUpIDw8IDIpIHwgKGJ5dGVzW2kgKyAyXSA+PiA2KV07XHJcbiAgICAgIGJhc2U2NCArPSBjaGFyc1tieXRlc1tpICsgMl0gJiA2M107XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKChsZW4gJSAzKSA9PT0gMikge1xyXG4gICAgICBiYXNlNjQgPSBiYXNlNjQuc3Vic3RyaW5nKDAsIGJhc2U2NC5sZW5ndGggLSAxKSArIFwiPVwiO1xyXG4gICAgfSBlbHNlIGlmIChsZW4gJSAzID09PSAxKSB7XHJcbiAgICAgIGJhc2U2NCA9IGJhc2U2NC5zdWJzdHJpbmcoMCwgYmFzZTY0Lmxlbmd0aCAtIDIpICsgXCI9PVwiO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBiYXNlNjQ7XHJcbiAgfTtcclxuXHJcbiAgZXhwb3J0cy5kZWNvZGUgPSAgZnVuY3Rpb24oYmFzZTY0KSB7XHJcbiAgICB2YXIgYnVmZmVyTGVuZ3RoID0gYmFzZTY0Lmxlbmd0aCAqIDAuNzUsXHJcbiAgICBsZW4gPSBiYXNlNjQubGVuZ3RoLCBpLCBwID0gMCxcclxuICAgIGVuY29kZWQxLCBlbmNvZGVkMiwgZW5jb2RlZDMsIGVuY29kZWQ0O1xyXG5cclxuICAgIGlmIChiYXNlNjRbYmFzZTY0Lmxlbmd0aCAtIDFdID09PSBcIj1cIikge1xyXG4gICAgICBidWZmZXJMZW5ndGgtLTtcclxuICAgICAgaWYgKGJhc2U2NFtiYXNlNjQubGVuZ3RoIC0gMl0gPT09IFwiPVwiKSB7XHJcbiAgICAgICAgYnVmZmVyTGVuZ3RoLS07XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB2YXIgYXJyYXlidWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoYnVmZmVyTGVuZ3RoKSxcclxuICAgIGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlidWZmZXIpO1xyXG5cclxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrPTQpIHtcclxuICAgICAgZW5jb2RlZDEgPSBsb29rdXBbYmFzZTY0LmNoYXJDb2RlQXQoaSldO1xyXG4gICAgICBlbmNvZGVkMiA9IGxvb2t1cFtiYXNlNjQuY2hhckNvZGVBdChpKzEpXTtcclxuICAgICAgZW5jb2RlZDMgPSBsb29rdXBbYmFzZTY0LmNoYXJDb2RlQXQoaSsyKV07XHJcbiAgICAgIGVuY29kZWQ0ID0gbG9va3VwW2Jhc2U2NC5jaGFyQ29kZUF0KGkrMyldO1xyXG5cclxuICAgICAgYnl0ZXNbcCsrXSA9IChlbmNvZGVkMSA8PCAyKSB8IChlbmNvZGVkMiA+PiA0KTtcclxuICAgICAgYnl0ZXNbcCsrXSA9ICgoZW5jb2RlZDIgJiAxNSkgPDwgNCkgfCAoZW5jb2RlZDMgPj4gMik7XHJcbiAgICAgIGJ5dGVzW3ArK10gPSAoKGVuY29kZWQzICYgMykgPDwgNikgfCAoZW5jb2RlZDQgJiA2Myk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGFycmF5YnVmZmVyO1xyXG4gIH07XHJcbn0pKCk7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///44\n')},function(module,exports){eval("/**\r\n * Create a blob builder even when vendor prefixes exist\r\n */\r\n\r\nvar BlobBuilder = typeof BlobBuilder !== 'undefined' ? BlobBuilder :\r\n  typeof WebKitBlobBuilder !== 'undefined' ? WebKitBlobBuilder :\r\n  typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder :\r\n  typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder : \r\n  false;\r\n\r\n/**\r\n * Check if Blob constructor is supported\r\n */\r\n\r\nvar blobSupported = (function() {\r\n  try {\r\n    var a = new Blob(['hi']);\r\n    return a.size === 2;\r\n  } catch(e) {\r\n    return false;\r\n  }\r\n})();\r\n\r\n/**\r\n * Check if Blob constructor supports ArrayBufferViews\r\n * Fails in Safari 6, so we need to map to ArrayBuffers there.\r\n */\r\n\r\nvar blobSupportsArrayBufferView = blobSupported && (function() {\r\n  try {\r\n    var b = new Blob([new Uint8Array([1,2])]);\r\n    return b.size === 2;\r\n  } catch(e) {\r\n    return false;\r\n  }\r\n})();\r\n\r\n/**\r\n * Check if BlobBuilder is supported\r\n */\r\n\r\nvar blobBuilderSupported = BlobBuilder\r\n  && BlobBuilder.prototype.append\r\n  && BlobBuilder.prototype.getBlob;\r\n\r\n/**\r\n * Helper function that maps ArrayBufferViews to ArrayBuffers\r\n * Used by BlobBuilder constructor and old browsers that didn't\r\n * support it in the Blob constructor.\r\n */\r\n\r\nfunction mapArrayBufferViews(ary) {\r\n  return ary.map(function(chunk) {\r\n    if (chunk.buffer instanceof ArrayBuffer) {\r\n      var buf = chunk.buffer;\r\n\r\n      // if this is a subarray, make a copy so we only\r\n      // include the subarray region from the underlying buffer\r\n      if (chunk.byteLength !== buf.byteLength) {\r\n        var copy = new Uint8Array(chunk.byteLength);\r\n        copy.set(new Uint8Array(buf, chunk.byteOffset, chunk.byteLength));\r\n        buf = copy.buffer;\r\n      }\r\n\r\n      return buf;\r\n    }\r\n\r\n    return chunk;\r\n  });\r\n}\r\n\r\nfunction BlobBuilderConstructor(ary, options) {\r\n  options = options || {};\r\n\r\n  var bb = new BlobBuilder();\r\n  mapArrayBufferViews(ary).forEach(function(part) {\r\n    bb.append(part);\r\n  });\r\n\r\n  return (options.type) ? bb.getBlob(options.type) : bb.getBlob();\r\n};\r\n\r\nfunction BlobConstructor(ary, options) {\r\n  return new Blob(mapArrayBufferViews(ary), options || {});\r\n};\r\n\r\nif (typeof Blob !== 'undefined') {\r\n  BlobBuilderConstructor.prototype = Blob.prototype;\r\n  BlobConstructor.prototype = Blob.prototype;\r\n}\r\n\r\nmodule.exports = (function() {\r\n  if (blobSupported) {\r\n    return blobSupportsArrayBufferView ? Blob : BlobConstructor;\r\n  } else if (blobBuilderSupported) {\r\n    return BlobBuilderConstructor;\r\n  } else {\r\n    return undefined;\r\n  }\r\n})();\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmxvYi9pbmRleC5qcz9kNzgwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDcmVhdGUgYSBibG9iIGJ1aWxkZXIgZXZlbiB3aGVuIHZlbmRvciBwcmVmaXhlcyBleGlzdFxyXG4gKi9cclxuXHJcbnZhciBCbG9iQnVpbGRlciA9IHR5cGVvZiBCbG9iQnVpbGRlciAhPT0gJ3VuZGVmaW5lZCcgPyBCbG9iQnVpbGRlciA6XHJcbiAgdHlwZW9mIFdlYktpdEJsb2JCdWlsZGVyICE9PSAndW5kZWZpbmVkJyA/IFdlYktpdEJsb2JCdWlsZGVyIDpcclxuICB0eXBlb2YgTVNCbG9iQnVpbGRlciAhPT0gJ3VuZGVmaW5lZCcgPyBNU0Jsb2JCdWlsZGVyIDpcclxuICB0eXBlb2YgTW96QmxvYkJ1aWxkZXIgIT09ICd1bmRlZmluZWQnID8gTW96QmxvYkJ1aWxkZXIgOiBcclxuICBmYWxzZTtcclxuXHJcbi8qKlxyXG4gKiBDaGVjayBpZiBCbG9iIGNvbnN0cnVjdG9yIGlzIHN1cHBvcnRlZFxyXG4gKi9cclxuXHJcbnZhciBibG9iU3VwcG9ydGVkID0gKGZ1bmN0aW9uKCkge1xyXG4gIHRyeSB7XHJcbiAgICB2YXIgYSA9IG5ldyBCbG9iKFsnaGknXSk7XHJcbiAgICByZXR1cm4gYS5zaXplID09PSAyO1xyXG4gIH0gY2F0Y2goZSkge1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxufSkoKTtcclxuXHJcbi8qKlxyXG4gKiBDaGVjayBpZiBCbG9iIGNvbnN0cnVjdG9yIHN1cHBvcnRzIEFycmF5QnVmZmVyVmlld3NcclxuICogRmFpbHMgaW4gU2FmYXJpIDYsIHNvIHdlIG5lZWQgdG8gbWFwIHRvIEFycmF5QnVmZmVycyB0aGVyZS5cclxuICovXHJcblxyXG52YXIgYmxvYlN1cHBvcnRzQXJyYXlCdWZmZXJWaWV3ID0gYmxvYlN1cHBvcnRlZCAmJiAoZnVuY3Rpb24oKSB7XHJcbiAgdHJ5IHtcclxuICAgIHZhciBiID0gbmV3IEJsb2IoW25ldyBVaW50OEFycmF5KFsxLDJdKV0pO1xyXG4gICAgcmV0dXJuIGIuc2l6ZSA9PT0gMjtcclxuICB9IGNhdGNoKGUpIHtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbn0pKCk7XHJcblxyXG4vKipcclxuICogQ2hlY2sgaWYgQmxvYkJ1aWxkZXIgaXMgc3VwcG9ydGVkXHJcbiAqL1xyXG5cclxudmFyIGJsb2JCdWlsZGVyU3VwcG9ydGVkID0gQmxvYkJ1aWxkZXJcclxuICAmJiBCbG9iQnVpbGRlci5wcm90b3R5cGUuYXBwZW5kXHJcbiAgJiYgQmxvYkJ1aWxkZXIucHJvdG90eXBlLmdldEJsb2I7XHJcblxyXG4vKipcclxuICogSGVscGVyIGZ1bmN0aW9uIHRoYXQgbWFwcyBBcnJheUJ1ZmZlclZpZXdzIHRvIEFycmF5QnVmZmVyc1xyXG4gKiBVc2VkIGJ5IEJsb2JCdWlsZGVyIGNvbnN0cnVjdG9yIGFuZCBvbGQgYnJvd3NlcnMgdGhhdCBkaWRuJ3RcclxuICogc3VwcG9ydCBpdCBpbiB0aGUgQmxvYiBjb25zdHJ1Y3Rvci5cclxuICovXHJcblxyXG5mdW5jdGlvbiBtYXBBcnJheUJ1ZmZlclZpZXdzKGFyeSkge1xyXG4gIHJldHVybiBhcnkubWFwKGZ1bmN0aW9uKGNodW5rKSB7XHJcbiAgICBpZiAoY2h1bmsuYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcclxuICAgICAgdmFyIGJ1ZiA9IGNodW5rLmJ1ZmZlcjtcclxuXHJcbiAgICAgIC8vIGlmIHRoaXMgaXMgYSBzdWJhcnJheSwgbWFrZSBhIGNvcHkgc28gd2Ugb25seVxyXG4gICAgICAvLyBpbmNsdWRlIHRoZSBzdWJhcnJheSByZWdpb24gZnJvbSB0aGUgdW5kZXJseWluZyBidWZmZXJcclxuICAgICAgaWYgKGNodW5rLmJ5dGVMZW5ndGggIT09IGJ1Zi5ieXRlTGVuZ3RoKSB7XHJcbiAgICAgICAgdmFyIGNvcHkgPSBuZXcgVWludDhBcnJheShjaHVuay5ieXRlTGVuZ3RoKTtcclxuICAgICAgICBjb3B5LnNldChuZXcgVWludDhBcnJheShidWYsIGNodW5rLmJ5dGVPZmZzZXQsIGNodW5rLmJ5dGVMZW5ndGgpKTtcclxuICAgICAgICBidWYgPSBjb3B5LmJ1ZmZlcjtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIGJ1ZjtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gY2h1bms7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIEJsb2JCdWlsZGVyQ29uc3RydWN0b3IoYXJ5LCBvcHRpb25zKSB7XHJcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcblxyXG4gIHZhciBiYiA9IG5ldyBCbG9iQnVpbGRlcigpO1xyXG4gIG1hcEFycmF5QnVmZmVyVmlld3MoYXJ5KS5mb3JFYWNoKGZ1bmN0aW9uKHBhcnQpIHtcclxuICAgIGJiLmFwcGVuZChwYXJ0KTtcclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIChvcHRpb25zLnR5cGUpID8gYmIuZ2V0QmxvYihvcHRpb25zLnR5cGUpIDogYmIuZ2V0QmxvYigpO1xyXG59O1xyXG5cclxuZnVuY3Rpb24gQmxvYkNvbnN0cnVjdG9yKGFyeSwgb3B0aW9ucykge1xyXG4gIHJldHVybiBuZXcgQmxvYihtYXBBcnJheUJ1ZmZlclZpZXdzKGFyeSksIG9wdGlvbnMgfHwge30pO1xyXG59O1xyXG5cclxuaWYgKHR5cGVvZiBCbG9iICE9PSAndW5kZWZpbmVkJykge1xyXG4gIEJsb2JCdWlsZGVyQ29uc3RydWN0b3IucHJvdG90eXBlID0gQmxvYi5wcm90b3R5cGU7XHJcbiAgQmxvYkNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IEJsb2IucHJvdG90eXBlO1xyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbigpIHtcclxuICBpZiAoYmxvYlN1cHBvcnRlZCkge1xyXG4gICAgcmV0dXJuIGJsb2JTdXBwb3J0c0FycmF5QnVmZmVyVmlldyA/IEJsb2IgOiBCbG9iQ29uc3RydWN0b3I7XHJcbiAgfSBlbHNlIGlmIChibG9iQnVpbGRlclN1cHBvcnRlZCkge1xyXG4gICAgcmV0dXJuIEJsb2JCdWlsZGVyQ29uc3RydWN0b3I7XHJcbiAgfSBlbHNlIHtcclxuICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgfVxyXG59KSgpO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///45\n")},function(module,exports,__webpack_require__){eval("\r\n/**\r\n * This is the common logic for both the Node.js and web browser\r\n * implementations of `debug()`.\r\n *\r\n * Expose `debug()` as the module.\r\n */\r\n\r\nexports = module.exports = createDebug.debug = createDebug['default'] = createDebug;\r\nexports.coerce = coerce;\r\nexports.disable = disable;\r\nexports.enable = enable;\r\nexports.enabled = enabled;\r\nexports.humanize = __webpack_require__(47);\r\n\r\n/**\r\n * Active `debug` instances.\r\n */\r\nexports.instances = [];\r\n\r\n/**\r\n * The currently active debug mode names, and names to skip.\r\n */\r\n\r\nexports.names = [];\r\nexports.skips = [];\r\n\r\n/**\r\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.\r\n *\r\n * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\r\n */\r\n\r\nexports.formatters = {};\r\n\r\n/**\r\n * Select a color.\r\n * @param {String} namespace\r\n * @return {Number}\r\n * @api private\r\n */\r\n\r\nfunction selectColor(namespace) {\r\n  var hash = 0, i;\r\n\r\n  for (i in namespace) {\r\n    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);\r\n    hash |= 0; // Convert to 32bit integer\r\n  }\r\n\r\n  return exports.colors[Math.abs(hash) % exports.colors.length];\r\n}\r\n\r\n/**\r\n * Create a debugger with the given `namespace`.\r\n *\r\n * @param {String} namespace\r\n * @return {Function}\r\n * @api public\r\n */\r\n\r\nfunction createDebug(namespace) {\r\n\r\n  var prevTime;\r\n\r\n  function debug() {\r\n    // disabled?\r\n    if (!debug.enabled) return;\r\n\r\n    var self = debug;\r\n\r\n    // set `diff` timestamp\r\n    var curr = +new Date();\r\n    var ms = curr - (prevTime || curr);\r\n    self.diff = ms;\r\n    self.prev = prevTime;\r\n    self.curr = curr;\r\n    prevTime = curr;\r\n\r\n    // turn the `arguments` into a proper Array\r\n    var args = new Array(arguments.length);\r\n    for (var i = 0; i < args.length; i++) {\r\n      args[i] = arguments[i];\r\n    }\r\n\r\n    args[0] = exports.coerce(args[0]);\r\n\r\n    if ('string' !== typeof args[0]) {\r\n      // anything else let's inspect with %O\r\n      args.unshift('%O');\r\n    }\r\n\r\n    // apply any `formatters` transformations\r\n    var index = 0;\r\n    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {\r\n      // if we encounter an escaped % then don't increase the array index\r\n      if (match === '%%') return match;\r\n      index++;\r\n      var formatter = exports.formatters[format];\r\n      if ('function' === typeof formatter) {\r\n        var val = args[index];\r\n        match = formatter.call(self, val);\r\n\r\n        // now we need to remove `args[index]` since it's inlined in the `format`\r\n        args.splice(index, 1);\r\n        index--;\r\n      }\r\n      return match;\r\n    });\r\n\r\n    // apply env-specific formatting (colors, etc.)\r\n    exports.formatArgs.call(self, args);\r\n\r\n    var logFn = debug.log || exports.log || console.log.bind(console);\r\n    logFn.apply(self, args);\r\n  }\r\n\r\n  debug.namespace = namespace;\r\n  debug.enabled = exports.enabled(namespace);\r\n  debug.useColors = exports.useColors();\r\n  debug.color = selectColor(namespace);\r\n  debug.destroy = destroy;\r\n\r\n  // env-specific initialization logic for debug instances\r\n  if ('function' === typeof exports.init) {\r\n    exports.init(debug);\r\n  }\r\n\r\n  exports.instances.push(debug);\r\n\r\n  return debug;\r\n}\r\n\r\nfunction destroy () {\r\n  var index = exports.instances.indexOf(this);\r\n  if (index !== -1) {\r\n    exports.instances.splice(index, 1);\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Enables a debug mode by namespaces. This can include modes\r\n * separated by a colon and wildcards.\r\n *\r\n * @param {String} namespaces\r\n * @api public\r\n */\r\n\r\nfunction enable(namespaces) {\r\n  exports.save(namespaces);\r\n\r\n  exports.names = [];\r\n  exports.skips = [];\r\n\r\n  var i;\r\n  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\r\n  var len = split.length;\r\n\r\n  for (i = 0; i < len; i++) {\r\n    if (!split[i]) continue; // ignore empty strings\r\n    namespaces = split[i].replace(/\\*/g, '.*?');\r\n    if (namespaces[0] === '-') {\r\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\r\n    } else {\r\n      exports.names.push(new RegExp('^' + namespaces + '$'));\r\n    }\r\n  }\r\n\r\n  for (i = 0; i < exports.instances.length; i++) {\r\n    var instance = exports.instances[i];\r\n    instance.enabled = exports.enabled(instance.namespace);\r\n  }\r\n}\r\n\r\n/**\r\n * Disable debug output.\r\n *\r\n * @api public\r\n */\r\n\r\nfunction disable() {\r\n  exports.enable('');\r\n}\r\n\r\n/**\r\n * Returns true if the given mode name is enabled, false otherwise.\r\n *\r\n * @param {String} name\r\n * @return {Boolean}\r\n * @api public\r\n */\r\n\r\nfunction enabled(name) {\r\n  if (name[name.length - 1] === '*') {\r\n    return true;\r\n  }\r\n  var i, len;\r\n  for (i = 0, len = exports.skips.length; i < len; i++) {\r\n    if (exports.skips[i].test(name)) {\r\n      return false;\r\n    }\r\n  }\r\n  for (i = 0, len = exports.names.length; i < len; i++) {\r\n    if (exports.names[i].test(name)) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * Coerce `val`.\r\n *\r\n * @param {Mixed} val\r\n * @return {Mixed}\r\n * @api private\r\n */\r\n\r\nfunction coerce(val) {\r\n  if (val instanceof Error) return val.stack || val.message;\r\n  return val;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///46\n")},function(module,exports){eval("/**\r\n * Helpers.\r\n */\r\n\r\nvar s = 1000;\r\nvar m = s * 60;\r\nvar h = m * 60;\r\nvar d = h * 24;\r\nvar y = d * 365.25;\r\n\r\n/**\r\n * Parse or format the given `val`.\r\n *\r\n * Options:\r\n *\r\n *  - `long` verbose formatting [false]\r\n *\r\n * @param {String|Number} val\r\n * @param {Object} [options]\r\n * @throws {Error} throw an error if val is not a non-empty string or a number\r\n * @return {String|Number}\r\n * @api public\r\n */\r\n\r\nmodule.exports = function(val, options) {\r\n  options = options || {};\r\n  var type = typeof val;\r\n  if (type === 'string' && val.length > 0) {\r\n    return parse(val);\r\n  } else if (type === 'number' && isNaN(val) === false) {\r\n    return options.long ? fmtLong(val) : fmtShort(val);\r\n  }\r\n  throw new Error(\r\n    'val is not a non-empty string or a valid number. val=' +\r\n      JSON.stringify(val)\r\n  );\r\n};\r\n\r\n/**\r\n * Parse the given `str` and return milliseconds.\r\n *\r\n * @param {String} str\r\n * @return {Number}\r\n * @api private\r\n */\r\n\r\nfunction parse(str) {\r\n  str = String(str);\r\n  if (str.length > 100) {\r\n    return;\r\n  }\r\n  var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(\r\n    str\r\n  );\r\n  if (!match) {\r\n    return;\r\n  }\r\n  var n = parseFloat(match[1]);\r\n  var type = (match[2] || 'ms').toLowerCase();\r\n  switch (type) {\r\n    case 'years':\r\n    case 'year':\r\n    case 'yrs':\r\n    case 'yr':\r\n    case 'y':\r\n      return n * y;\r\n    case 'days':\r\n    case 'day':\r\n    case 'd':\r\n      return n * d;\r\n    case 'hours':\r\n    case 'hour':\r\n    case 'hrs':\r\n    case 'hr':\r\n    case 'h':\r\n      return n * h;\r\n    case 'minutes':\r\n    case 'minute':\r\n    case 'mins':\r\n    case 'min':\r\n    case 'm':\r\n      return n * m;\r\n    case 'seconds':\r\n    case 'second':\r\n    case 'secs':\r\n    case 'sec':\r\n    case 's':\r\n      return n * s;\r\n    case 'milliseconds':\r\n    case 'millisecond':\r\n    case 'msecs':\r\n    case 'msec':\r\n    case 'ms':\r\n      return n;\r\n    default:\r\n      return undefined;\r\n  }\r\n}\r\n\r\n/**\r\n * Short format for `ms`.\r\n *\r\n * @param {Number} ms\r\n * @return {String}\r\n * @api private\r\n */\r\n\r\nfunction fmtShort(ms) {\r\n  if (ms >= d) {\r\n    return Math.round(ms / d) + 'd';\r\n  }\r\n  if (ms >= h) {\r\n    return Math.round(ms / h) + 'h';\r\n  }\r\n  if (ms >= m) {\r\n    return Math.round(ms / m) + 'm';\r\n  }\r\n  if (ms >= s) {\r\n    return Math.round(ms / s) + 's';\r\n  }\r\n  return ms + 'ms';\r\n}\r\n\r\n/**\r\n * Long format for `ms`.\r\n *\r\n * @param {Number} ms\r\n * @return {String}\r\n * @api private\r\n */\r\n\r\nfunction fmtLong(ms) {\r\n  return plural(ms, d, 'day') ||\r\n    plural(ms, h, 'hour') ||\r\n    plural(ms, m, 'minute') ||\r\n    plural(ms, s, 'second') ||\r\n    ms + ' ms';\r\n}\r\n\r\n/**\r\n * Pluralization helper.\r\n */\r\n\r\nfunction plural(ms, n, name) {\r\n  if (ms < n) {\r\n    return;\r\n  }\r\n  if (ms < n * 1.5) {\r\n    return Math.floor(ms / n) + ' ' + name;\r\n  }\r\n  return Math.ceil(ms / n) + ' ' + name + 's';\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9ub2RlX21vZHVsZXMvbXMvaW5kZXguanM/NWEyMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogSGVscGVycy5cclxuICovXHJcblxyXG52YXIgcyA9IDEwMDA7XHJcbnZhciBtID0gcyAqIDYwO1xyXG52YXIgaCA9IG0gKiA2MDtcclxudmFyIGQgPSBoICogMjQ7XHJcbnZhciB5ID0gZCAqIDM2NS4yNTtcclxuXHJcbi8qKlxyXG4gKiBQYXJzZSBvciBmb3JtYXQgdGhlIGdpdmVuIGB2YWxgLlxyXG4gKlxyXG4gKiBPcHRpb25zOlxyXG4gKlxyXG4gKiAgLSBgbG9uZ2AgdmVyYm9zZSBmb3JtYXR0aW5nIFtmYWxzZV1cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSB2YWxcclxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gKiBAdGhyb3dzIHtFcnJvcn0gdGhyb3cgYW4gZXJyb3IgaWYgdmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSBudW1iZXJcclxuICogQHJldHVybiB7U3RyaW5nfE51bWJlcn1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHZhbCwgb3B0aW9ucykge1xyXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xyXG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbDtcclxuICBpZiAodHlwZSA9PT0gJ3N0cmluZycgJiYgdmFsLmxlbmd0aCA+IDApIHtcclxuICAgIHJldHVybiBwYXJzZSh2YWwpO1xyXG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ251bWJlcicgJiYgaXNOYU4odmFsKSA9PT0gZmFsc2UpIHtcclxuICAgIHJldHVybiBvcHRpb25zLmxvbmcgPyBmbXRMb25nKHZhbCkgOiBmbXRTaG9ydCh2YWwpO1xyXG4gIH1cclxuICB0aHJvdyBuZXcgRXJyb3IoXHJcbiAgICAndmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSB2YWxpZCBudW1iZXIuIHZhbD0nICtcclxuICAgICAgSlNPTi5zdHJpbmdpZnkodmFsKVxyXG4gICk7XHJcbn07XHJcblxyXG4vKipcclxuICogUGFyc2UgdGhlIGdpdmVuIGBzdHJgIGFuZCByZXR1cm4gbWlsbGlzZWNvbmRzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXHJcbiAqIEByZXR1cm4ge051bWJlcn1cclxuICogQGFwaSBwcml2YXRlXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gcGFyc2Uoc3RyKSB7XHJcbiAgc3RyID0gU3RyaW5nKHN0cik7XHJcbiAgaWYgKHN0ci5sZW5ndGggPiAxMDApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgdmFyIG1hdGNoID0gL14oKD86XFxkKyk/XFwuP1xcZCspICoobWlsbGlzZWNvbmRzP3xtc2Vjcz98bXN8c2Vjb25kcz98c2Vjcz98c3xtaW51dGVzP3xtaW5zP3xtfGhvdXJzP3xocnM/fGh8ZGF5cz98ZHx5ZWFycz98eXJzP3x5KT8kL2kuZXhlYyhcclxuICAgIHN0clxyXG4gICk7XHJcbiAgaWYgKCFtYXRjaCkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICB2YXIgbiA9IHBhcnNlRmxvYXQobWF0Y2hbMV0pO1xyXG4gIHZhciB0eXBlID0gKG1hdGNoWzJdIHx8ICdtcycpLnRvTG93ZXJDYXNlKCk7XHJcbiAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICBjYXNlICd5ZWFycyc6XHJcbiAgICBjYXNlICd5ZWFyJzpcclxuICAgIGNhc2UgJ3lycyc6XHJcbiAgICBjYXNlICd5cic6XHJcbiAgICBjYXNlICd5JzpcclxuICAgICAgcmV0dXJuIG4gKiB5O1xyXG4gICAgY2FzZSAnZGF5cyc6XHJcbiAgICBjYXNlICdkYXknOlxyXG4gICAgY2FzZSAnZCc6XHJcbiAgICAgIHJldHVybiBuICogZDtcclxuICAgIGNhc2UgJ2hvdXJzJzpcclxuICAgIGNhc2UgJ2hvdXInOlxyXG4gICAgY2FzZSAnaHJzJzpcclxuICAgIGNhc2UgJ2hyJzpcclxuICAgIGNhc2UgJ2gnOlxyXG4gICAgICByZXR1cm4gbiAqIGg7XHJcbiAgICBjYXNlICdtaW51dGVzJzpcclxuICAgIGNhc2UgJ21pbnV0ZSc6XHJcbiAgICBjYXNlICdtaW5zJzpcclxuICAgIGNhc2UgJ21pbic6XHJcbiAgICBjYXNlICdtJzpcclxuICAgICAgcmV0dXJuIG4gKiBtO1xyXG4gICAgY2FzZSAnc2Vjb25kcyc6XHJcbiAgICBjYXNlICdzZWNvbmQnOlxyXG4gICAgY2FzZSAnc2Vjcyc6XHJcbiAgICBjYXNlICdzZWMnOlxyXG4gICAgY2FzZSAncyc6XHJcbiAgICAgIHJldHVybiBuICogcztcclxuICAgIGNhc2UgJ21pbGxpc2Vjb25kcyc6XHJcbiAgICBjYXNlICdtaWxsaXNlY29uZCc6XHJcbiAgICBjYXNlICdtc2Vjcyc6XHJcbiAgICBjYXNlICdtc2VjJzpcclxuICAgIGNhc2UgJ21zJzpcclxuICAgICAgcmV0dXJuIG47XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFNob3J0IGZvcm1hdCBmb3IgYG1zYC5cclxuICpcclxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXHJcbiAqIEByZXR1cm4ge1N0cmluZ31cclxuICogQGFwaSBwcml2YXRlXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gZm10U2hvcnQobXMpIHtcclxuICBpZiAobXMgPj0gZCkge1xyXG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBkKSArICdkJztcclxuICB9XHJcbiAgaWYgKG1zID49IGgpIHtcclxuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gaCkgKyAnaCc7XHJcbiAgfVxyXG4gIGlmIChtcyA+PSBtKSB7XHJcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIG0pICsgJ20nO1xyXG4gIH1cclxuICBpZiAobXMgPj0gcykge1xyXG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBzKSArICdzJztcclxuICB9XHJcbiAgcmV0dXJuIG1zICsgJ21zJztcclxufVxyXG5cclxuLyoqXHJcbiAqIExvbmcgZm9ybWF0IGZvciBgbXNgLlxyXG4gKlxyXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcclxuICogQHJldHVybiB7U3RyaW5nfVxyXG4gKiBAYXBpIHByaXZhdGVcclxuICovXHJcblxyXG5mdW5jdGlvbiBmbXRMb25nKG1zKSB7XHJcbiAgcmV0dXJuIHBsdXJhbChtcywgZCwgJ2RheScpIHx8XHJcbiAgICBwbHVyYWwobXMsIGgsICdob3VyJykgfHxcclxuICAgIHBsdXJhbChtcywgbSwgJ21pbnV0ZScpIHx8XHJcbiAgICBwbHVyYWwobXMsIHMsICdzZWNvbmQnKSB8fFxyXG4gICAgbXMgKyAnIG1zJztcclxufVxyXG5cclxuLyoqXHJcbiAqIFBsdXJhbGl6YXRpb24gaGVscGVyLlxyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIHBsdXJhbChtcywgbiwgbmFtZSkge1xyXG4gIGlmIChtcyA8IG4pIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgaWYgKG1zIDwgbiAqIDEuNSkge1xyXG4gICAgcmV0dXJuIE1hdGguZmxvb3IobXMgLyBuKSArICcgJyArIG5hbWU7XHJcbiAgfVxyXG4gIHJldHVybiBNYXRoLmNlaWwobXMgLyBuKSArICcgJyArIG5hbWUgKyAncyc7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///47\n")},function(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function(global) {/**\r\n * Module requirements.\r\n */\r\n\r\nvar Polling = __webpack_require__(17);\r\nvar inherit = __webpack_require__(4);\r\n\r\n/**\r\n * Module exports.\r\n */\r\n\r\nmodule.exports = JSONPPolling;\r\n\r\n/**\r\n * Cached regular expressions.\r\n */\r\n\r\nvar rNewline = /\\n/g;\r\nvar rEscapedNewline = /\\\\n/g;\r\n\r\n/**\r\n * Global JSONP callbacks.\r\n */\r\n\r\nvar callbacks;\r\n\r\n/**\r\n * Noop.\r\n */\r\n\r\nfunction empty () { }\r\n\r\n/**\r\n * Until https://github.com/tc39/proposal-global is shipped.\r\n */\r\nfunction glob () {\r\n  return typeof self !== 'undefined' ? self\r\n      : typeof window !== 'undefined' ? window\r\n      : typeof global !== 'undefined' ? global : {};\r\n}\r\n\r\n/**\r\n * JSONP Polling constructor.\r\n *\r\n * @param {Object} opts.\r\n * @api public\r\n */\r\n\r\nfunction JSONPPolling (opts) {\r\n  Polling.call(this, opts);\r\n\r\n  this.query = this.query || {};\r\n\r\n  // define global callbacks array if not present\r\n  // we do this here (lazily) to avoid unneeded global pollution\r\n  if (!callbacks) {\r\n    // we need to consider multiple engines in the same page\r\n    var global = glob();\r\n    callbacks = global.___eio = (global.___eio || []);\r\n  }\r\n\r\n  // callback identifier\r\n  this.index = callbacks.length;\r\n\r\n  // add callback to jsonp global\r\n  var self = this;\r\n  callbacks.push(function (msg) {\r\n    self.onData(msg);\r\n  });\r\n\r\n  // append to query string\r\n  this.query.j = this.index;\r\n\r\n  // prevent spurious errors from being emitted when the window is unloaded\r\n  if (typeof addEventListener === 'function') {\r\n    addEventListener('beforeunload', function () {\r\n      if (self.script) self.script.onerror = empty;\r\n    }, false);\r\n  }\r\n}\r\n\r\n/**\r\n * Inherits from Polling.\r\n */\r\n\r\ninherit(JSONPPolling, Polling);\r\n\r\n/*\r\n * JSONP only supports binary as base64 encoded strings\r\n */\r\n\r\nJSONPPolling.prototype.supportsBinary = false;\r\n\r\n/**\r\n * Closes the socket.\r\n *\r\n * @api private\r\n */\r\n\r\nJSONPPolling.prototype.doClose = function () {\r\n  if (this.script) {\r\n    this.script.parentNode.removeChild(this.script);\r\n    this.script = null;\r\n  }\r\n\r\n  if (this.form) {\r\n    this.form.parentNode.removeChild(this.form);\r\n    this.form = null;\r\n    this.iframe = null;\r\n  }\r\n\r\n  Polling.prototype.doClose.call(this);\r\n};\r\n\r\n/**\r\n * Starts a poll cycle.\r\n *\r\n * @api private\r\n */\r\n\r\nJSONPPolling.prototype.doPoll = function () {\r\n  var self = this;\r\n  var script = document.createElement('script');\r\n\r\n  if (this.script) {\r\n    this.script.parentNode.removeChild(this.script);\r\n    this.script = null;\r\n  }\r\n\r\n  script.async = true;\r\n  script.src = this.uri();\r\n  script.onerror = function (e) {\r\n    self.onError('jsonp poll error', e);\r\n  };\r\n\r\n  var insertAt = document.getElementsByTagName('script')[0];\r\n  if (insertAt) {\r\n    insertAt.parentNode.insertBefore(script, insertAt);\r\n  } else {\r\n    (document.head || document.body).appendChild(script);\r\n  }\r\n  this.script = script;\r\n\r\n  var isUAgecko = 'undefined' !== typeof navigator && /gecko/i.test(navigator.userAgent);\r\n\r\n  if (isUAgecko) {\r\n    setTimeout(function () {\r\n      var iframe = document.createElement('iframe');\r\n      document.body.appendChild(iframe);\r\n      document.body.removeChild(iframe);\r\n    }, 100);\r\n  }\r\n};\r\n\r\n/**\r\n * Writes with a hidden iframe.\r\n *\r\n * @param {String} data to send\r\n * @param {Function} called upon flush.\r\n * @api private\r\n */\r\n\r\nJSONPPolling.prototype.doWrite = function (data, fn) {\r\n  var self = this;\r\n\r\n  if (!this.form) {\r\n    var form = document.createElement('form');\r\n    var area = document.createElement('textarea');\r\n    var id = this.iframeId = 'eio_iframe_' + this.index;\r\n    var iframe;\r\n\r\n    form.className = 'socketio';\r\n    form.style.position = 'absolute';\r\n    form.style.top = '-1000px';\r\n    form.style.left = '-1000px';\r\n    form.target = id;\r\n    form.method = 'POST';\r\n    form.setAttribute('accept-charset', 'utf-8');\r\n    area.name = 'd';\r\n    form.appendChild(area);\r\n    document.body.appendChild(form);\r\n\r\n    this.form = form;\r\n    this.area = area;\r\n  }\r\n\r\n  this.form.action = this.uri();\r\n\r\n  function complete () {\r\n    initIframe();\r\n    fn();\r\n  }\r\n\r\n  function initIframe () {\r\n    if (self.iframe) {\r\n      try {\r\n        self.form.removeChild(self.iframe);\r\n      } catch (e) {\r\n        self.onError('jsonp polling iframe removal error', e);\r\n      }\r\n    }\r\n\r\n    try {\r\n      // ie6 dynamic iframes with target=\"\" support (thanks Chris Lambacher)\r\n      var html = '<iframe src=\"javascript:0\" name=\"' + self.iframeId + '\">';\r\n      iframe = document.createElement(html);\r\n    } catch (e) {\r\n      iframe = document.createElement('iframe');\r\n      iframe.name = self.iframeId;\r\n      iframe.src = 'javascript:0';\r\n    }\r\n\r\n    iframe.id = self.iframeId;\r\n\r\n    self.form.appendChild(iframe);\r\n    self.iframe = iframe;\r\n  }\r\n\r\n  initIframe();\r\n\r\n  // escape \\n to prevent it from being converted into \\r\\n by some UAs\r\n  // double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side\r\n  data = data.replace(rEscapedNewline, '\\\\\\n');\r\n  this.area.value = data.replace(rNewline, '\\\\n');\r\n\r\n  try {\r\n    this.form.submit();\r\n  } catch (e) {}\r\n\r\n  if (this.iframe.attachEvent) {\r\n    this.iframe.onreadystatechange = function () {\r\n      if (self.iframe.readyState === 'complete') {\r\n        complete();\r\n      }\r\n    };\r\n  } else {\r\n    this.iframe.onload = complete;\r\n  }\r\n};\r\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(14)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///48\n")},function(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function(Buffer) {/**\r\n * Module dependencies.\r\n */\r\n\r\nvar Transport = __webpack_require__(10);\r\nvar parser = __webpack_require__(1);\r\nvar parseqs = __webpack_require__(3);\r\nvar inherit = __webpack_require__(4);\r\nvar yeast = __webpack_require__(19);\r\nvar debug = __webpack_require__(5)('engine.io-client:websocket');\r\n\r\nvar BrowserWebSocket, NodeWebSocket;\r\n\r\nif (typeof WebSocket !== 'undefined') {\r\n  BrowserWebSocket = WebSocket;\r\n} else if (typeof self !== 'undefined') {\r\n  BrowserWebSocket = self.WebSocket || self.MozWebSocket;\r\n} else {\r\n  try {\r\n    NodeWebSocket = __webpack_require__(50);\r\n  } catch (e) { }\r\n}\r\n\r\n/**\r\n * Get either the `WebSocket` or `MozWebSocket` globals\r\n * in the browser or try to resolve WebSocket-compatible\r\n * interface exposed by `ws` for Node-like environment.\r\n */\r\n\r\nvar WebSocketImpl = BrowserWebSocket || NodeWebSocket;\r\n\r\n/**\r\n * Module exports.\r\n */\r\n\r\nmodule.exports = WS;\r\n\r\n/**\r\n * WebSocket transport constructor.\r\n *\r\n * @api {Object} connection options\r\n * @api public\r\n */\r\n\r\nfunction WS (opts) {\r\n  var forceBase64 = (opts && opts.forceBase64);\r\n  if (forceBase64) {\r\n    this.supportsBinary = false;\r\n  }\r\n  this.perMessageDeflate = opts.perMessageDeflate;\r\n  this.usingBrowserWebSocket = BrowserWebSocket && !opts.forceNode;\r\n  this.protocols = opts.protocols;\r\n  if (!this.usingBrowserWebSocket) {\r\n    WebSocketImpl = NodeWebSocket;\r\n  }\r\n  Transport.call(this, opts);\r\n}\r\n\r\n/**\r\n * Inherits from Transport.\r\n */\r\n\r\ninherit(WS, Transport);\r\n\r\n/**\r\n * Transport name.\r\n *\r\n * @api public\r\n */\r\n\r\nWS.prototype.name = 'websocket';\r\n\r\n/*\r\n * WebSockets support binary\r\n */\r\n\r\nWS.prototype.supportsBinary = true;\r\n\r\n/**\r\n * Opens socket.\r\n *\r\n * @api private\r\n */\r\n\r\nWS.prototype.doOpen = function () {\r\n  if (!this.check()) {\r\n    // let probe timeout\r\n    return;\r\n  }\r\n\r\n  var uri = this.uri();\r\n  var protocols = this.protocols;\r\n  var opts = {\r\n    agent: this.agent,\r\n    perMessageDeflate: this.perMessageDeflate\r\n  };\r\n\r\n  // SSL options for Node.js client\r\n  opts.pfx = this.pfx;\r\n  opts.key = this.key;\r\n  opts.passphrase = this.passphrase;\r\n  opts.cert = this.cert;\r\n  opts.ca = this.ca;\r\n  opts.ciphers = this.ciphers;\r\n  opts.rejectUnauthorized = this.rejectUnauthorized;\r\n  if (this.extraHeaders) {\r\n    opts.headers = this.extraHeaders;\r\n  }\r\n  if (this.localAddress) {\r\n    opts.localAddress = this.localAddress;\r\n  }\r\n\r\n  try {\r\n    this.ws =\r\n      this.usingBrowserWebSocket && !this.isReactNative\r\n        ? protocols\r\n          ? new WebSocketImpl(uri, protocols)\r\n          : new WebSocketImpl(uri)\r\n        : new WebSocketImpl(uri, protocols, opts);\r\n  } catch (err) {\r\n    return this.emit('error', err);\r\n  }\r\n\r\n  if (this.ws.binaryType === undefined) {\r\n    this.supportsBinary = false;\r\n  }\r\n\r\n  if (this.ws.supports && this.ws.supports.binary) {\r\n    this.supportsBinary = true;\r\n    this.ws.binaryType = 'nodebuffer';\r\n  } else {\r\n    this.ws.binaryType = 'arraybuffer';\r\n  }\r\n\r\n  this.addEventListeners();\r\n};\r\n\r\n/**\r\n * Adds event listeners to the socket\r\n *\r\n * @api private\r\n */\r\n\r\nWS.prototype.addEventListeners = function () {\r\n  var self = this;\r\n\r\n  this.ws.onopen = function () {\r\n    self.onOpen();\r\n  };\r\n  this.ws.onclose = function () {\r\n    self.onClose();\r\n  };\r\n  this.ws.onmessage = function (ev) {\r\n    self.onData(ev.data);\r\n  };\r\n  this.ws.onerror = function (e) {\r\n    self.onError('websocket error', e);\r\n  };\r\n};\r\n\r\n/**\r\n * Writes data to socket.\r\n *\r\n * @param {Array} array of packets.\r\n * @api private\r\n */\r\n\r\nWS.prototype.write = function (packets) {\r\n  var self = this;\r\n  this.writable = false;\r\n\r\n  // encodePacket efficient as it uses WS framing\r\n  // no need for encodePayload\r\n  var total = packets.length;\r\n  for (var i = 0, l = total; i < l; i++) {\r\n    (function (packet) {\r\n      parser.encodePacket(packet, self.supportsBinary, function (data) {\r\n        if (!self.usingBrowserWebSocket) {\r\n          // always create a new object (GH-437)\r\n          var opts = {};\r\n          if (packet.options) {\r\n            opts.compress = packet.options.compress;\r\n          }\r\n\r\n          if (self.perMessageDeflate) {\r\n            var len = 'string' === typeof data ? Buffer.byteLength(data) : data.length;\r\n            if (len < self.perMessageDeflate.threshold) {\r\n              opts.compress = false;\r\n            }\r\n          }\r\n        }\r\n\r\n        // Sometimes the websocket has already been closed but the browser didn't\r\n        // have a chance of informing us about it yet, in that case send will\r\n        // throw an error\r\n        try {\r\n          if (self.usingBrowserWebSocket) {\r\n            // TypeError is thrown when passing the second argument on Safari\r\n            self.ws.send(data);\r\n          } else {\r\n            self.ws.send(data, opts);\r\n          }\r\n        } catch (e) {\r\n          debug('websocket closed before onclose event');\r\n        }\r\n\r\n        --total || done();\r\n      });\r\n    })(packets[i]);\r\n  }\r\n\r\n  function done () {\r\n    self.emit('flush');\r\n\r\n    // fake drain\r\n    // defer to next tick to allow Socket to clear writeBuffer\r\n    setTimeout(function () {\r\n      self.writable = true;\r\n      self.emit('drain');\r\n    }, 0);\r\n  }\r\n};\r\n\r\n/**\r\n * Called upon close\r\n *\r\n * @api private\r\n */\r\n\r\nWS.prototype.onClose = function () {\r\n  Transport.prototype.onClose.call(this);\r\n};\r\n\r\n/**\r\n * Closes socket.\r\n *\r\n * @api private\r\n */\r\n\r\nWS.prototype.doClose = function () {\r\n  if (typeof this.ws !== 'undefined') {\r\n    this.ws.close();\r\n  }\r\n};\r\n\r\n/**\r\n * Generates uri for connection.\r\n *\r\n * @api private\r\n */\r\n\r\nWS.prototype.uri = function () {\r\n  var query = this.query || {};\r\n  var schema = this.secure ? 'wss' : 'ws';\r\n  var port = '';\r\n\r\n  // avoid port if default for schema\r\n  if (this.port && (('wss' === schema && Number(this.port) !== 443) ||\r\n    ('ws' === schema && Number(this.port) !== 80))) {\r\n    port = ':' + this.port;\r\n  }\r\n\r\n  // append timestamp to URI\r\n  if (this.timestampRequests) {\r\n    query[this.timestampParam] = yeast();\r\n  }\r\n\r\n  // communicate binary support capabilities\r\n  if (!this.supportsBinary) {\r\n    query.b64 = 1;\r\n  }\r\n\r\n  query = parseqs.encode(query);\r\n\r\n  // prepend ? to query\r\n  if (query.length) {\r\n    query = '?' + query;\r\n  }\r\n\r\n  var ipv6 = this.hostname.indexOf(':') !== -1;\r\n  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;\r\n};\r\n\r\n/**\r\n * Feature detection for WebSocket.\r\n *\r\n * @return {Boolean} whether this transport is available.\r\n * @api public\r\n */\r\n\r\nWS.prototype.check = function () {\r\n  return !!WebSocketImpl && !('__initialize' in WebSocketImpl && this.name === WS.prototype.name);\r\n};\r\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(8).Buffer))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///49\n")},function(module,exports){eval("/* (ignored) *///# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd3MgKGlnbm9yZWQpP2UzYzMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogKGlnbm9yZWQpICovIl0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///50\n")},function(module,exports){eval("module.exports = toArray\r\n\r\nfunction toArray(list, index) {\r\n    var array = []\r\n\r\n    index = index || 0\r\n\r\n    for (var i = index || 0; i < list.length; i++) {\r\n        array[i - index] = list[i]\r\n    }\r\n\r\n    return array\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdG8tYXJyYXkvaW5kZXguanM/OTEyMSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHRvQXJyYXlcclxuXHJcbmZ1bmN0aW9uIHRvQXJyYXkobGlzdCwgaW5kZXgpIHtcclxuICAgIHZhciBhcnJheSA9IFtdXHJcblxyXG4gICAgaW5kZXggPSBpbmRleCB8fCAwXHJcblxyXG4gICAgZm9yICh2YXIgaSA9IGluZGV4IHx8IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgYXJyYXlbaSAtIGluZGV4XSA9IGxpc3RbaV1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gYXJyYXlcclxufVxyXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///51\n")},function(module,exports){eval("\r\n/**\r\n * Expose `Backoff`.\r\n */\r\n\r\nmodule.exports = Backoff;\r\n\r\n/**\r\n * Initialize backoff timer with `opts`.\r\n *\r\n * - `min` initial timeout in milliseconds [100]\r\n * - `max` max timeout [10000]\r\n * - `jitter` [0]\r\n * - `factor` [2]\r\n *\r\n * @param {Object} opts\r\n * @api public\r\n */\r\n\r\nfunction Backoff(opts) {\r\n  opts = opts || {};\r\n  this.ms = opts.min || 100;\r\n  this.max = opts.max || 10000;\r\n  this.factor = opts.factor || 2;\r\n  this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;\r\n  this.attempts = 0;\r\n}\r\n\r\n/**\r\n * Return the backoff duration.\r\n *\r\n * @return {Number}\r\n * @api public\r\n */\r\n\r\nBackoff.prototype.duration = function(){\r\n  var ms = this.ms * Math.pow(this.factor, this.attempts++);\r\n  if (this.jitter) {\r\n    var rand =  Math.random();\r\n    var deviation = Math.floor(rand * this.jitter * ms);\r\n    ms = (Math.floor(rand * 10) & 1) == 0  ? ms - deviation : ms + deviation;\r\n  }\r\n  return Math.min(ms, this.max) | 0;\r\n};\r\n\r\n/**\r\n * Reset the number of attempts.\r\n *\r\n * @api public\r\n */\r\n\r\nBackoff.prototype.reset = function(){\r\n  this.attempts = 0;\r\n};\r\n\r\n/**\r\n * Set the minimum duration\r\n *\r\n * @api public\r\n */\r\n\r\nBackoff.prototype.setMin = function(min){\r\n  this.ms = min;\r\n};\r\n\r\n/**\r\n * Set the maximum duration\r\n *\r\n * @api public\r\n */\r\n\r\nBackoff.prototype.setMax = function(max){\r\n  this.max = max;\r\n};\r\n\r\n/**\r\n * Set the jitter\r\n *\r\n * @api public\r\n */\r\n\r\nBackoff.prototype.setJitter = function(jitter){\r\n  this.jitter = jitter;\r\n};\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFja28yL2luZGV4LmpzPzBiNjQiXSwic291cmNlc0NvbnRlbnQiOlsiXHJcbi8qKlxyXG4gKiBFeHBvc2UgYEJhY2tvZmZgLlxyXG4gKi9cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gQmFja29mZjtcclxuXHJcbi8qKlxyXG4gKiBJbml0aWFsaXplIGJhY2tvZmYgdGltZXIgd2l0aCBgb3B0c2AuXHJcbiAqXHJcbiAqIC0gYG1pbmAgaW5pdGlhbCB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyBbMTAwXVxyXG4gKiAtIGBtYXhgIG1heCB0aW1lb3V0IFsxMDAwMF1cclxuICogLSBgaml0dGVyYCBbMF1cclxuICogLSBgZmFjdG9yYCBbMl1cclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IG9wdHNcclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5mdW5jdGlvbiBCYWNrb2ZmKG9wdHMpIHtcclxuICBvcHRzID0gb3B0cyB8fCB7fTtcclxuICB0aGlzLm1zID0gb3B0cy5taW4gfHwgMTAwO1xyXG4gIHRoaXMubWF4ID0gb3B0cy5tYXggfHwgMTAwMDA7XHJcbiAgdGhpcy5mYWN0b3IgPSBvcHRzLmZhY3RvciB8fCAyO1xyXG4gIHRoaXMuaml0dGVyID0gb3B0cy5qaXR0ZXIgPiAwICYmIG9wdHMuaml0dGVyIDw9IDEgPyBvcHRzLmppdHRlciA6IDA7XHJcbiAgdGhpcy5hdHRlbXB0cyA9IDA7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm4gdGhlIGJhY2tvZmYgZHVyYXRpb24uXHJcbiAqXHJcbiAqIEByZXR1cm4ge051bWJlcn1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5CYWNrb2ZmLnByb3RvdHlwZS5kdXJhdGlvbiA9IGZ1bmN0aW9uKCl7XHJcbiAgdmFyIG1zID0gdGhpcy5tcyAqIE1hdGgucG93KHRoaXMuZmFjdG9yLCB0aGlzLmF0dGVtcHRzKyspO1xyXG4gIGlmICh0aGlzLmppdHRlcikge1xyXG4gICAgdmFyIHJhbmQgPSAgTWF0aC5yYW5kb20oKTtcclxuICAgIHZhciBkZXZpYXRpb24gPSBNYXRoLmZsb29yKHJhbmQgKiB0aGlzLmppdHRlciAqIG1zKTtcclxuICAgIG1zID0gKE1hdGguZmxvb3IocmFuZCAqIDEwKSAmIDEpID09IDAgID8gbXMgLSBkZXZpYXRpb24gOiBtcyArIGRldmlhdGlvbjtcclxuICB9XHJcbiAgcmV0dXJuIE1hdGgubWluKG1zLCB0aGlzLm1heCkgfCAwO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJlc2V0IHRoZSBudW1iZXIgb2YgYXR0ZW1wdHMuXHJcbiAqXHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuQmFja29mZi5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbigpe1xyXG4gIHRoaXMuYXR0ZW1wdHMgPSAwO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFNldCB0aGUgbWluaW11bSBkdXJhdGlvblxyXG4gKlxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkJhY2tvZmYucHJvdG90eXBlLnNldE1pbiA9IGZ1bmN0aW9uKG1pbil7XHJcbiAgdGhpcy5tcyA9IG1pbjtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBTZXQgdGhlIG1heGltdW0gZHVyYXRpb25cclxuICpcclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5CYWNrb2ZmLnByb3RvdHlwZS5zZXRNYXggPSBmdW5jdGlvbihtYXgpe1xyXG4gIHRoaXMubWF4ID0gbWF4O1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFNldCB0aGUgaml0dGVyXHJcbiAqXHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuQmFja29mZi5wcm90b3R5cGUuc2V0Sml0dGVyID0gZnVuY3Rpb24oaml0dGVyKXtcclxuICB0aGlzLmppdHRlciA9IGppdHRlcjtcclxufTtcclxuXHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///52\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./node_modules/socket.io-client/lib/index.js\nvar lib = __webpack_require__(24);\nvar lib_default = /*#__PURE__*/__webpack_require__.n(lib);\n\n// CONCATENATED MODULE: ./dev/csocketio.js\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\nvar globalAddress = {\n  'local': 'localhost',\n  'db': '192.168.10.9',\n  'dl': '192.168.10.21'\n};\nvar IOSettings = {\n  'force new connection': false\n};\n\nvar Msg = function Msg(message, clientID) {\n  return message + '@' + clientID;\n};\n\nvar ClientSocket =\n/*#__PURE__*/\nfunction () {\n  function ClientSocket(parms) {\n    _classCallCheck(this, ClientSocket);\n\n    this.socket = parms['socket'];\n    this.namespace = parms['namespace'];\n  }\n\n  _createClass(ClientSocket, [{\n    key: \"emit\",\n    value: function emit(message, data) {\n      this.socket.emit(Msg(message, this.id), data);\n    }\n  }, {\n    key: \"on\",\n    value: function on(message, callback) {\n      var _this = this;\n\n      switch (message) {\n        case 'connect':\n          this.socket.on('connect', function () {\n            _this.id = _this.socket.id.replace(\"/\".concat(_this.namespace, \"#\"), '');\n\n            _this.emit('__ready__', _this.getInfo());\n\n            _this.autoClose();\n\n            callback();\n          });\n          break;\n\n        case 'disconnect':\n          this.socket.on('disconnect', callback);\n          break;\n\n        default:\n          this.socket.on(Msg(message, this.id), callback);\n          break;\n      }\n    }\n  }, {\n    key: \"getInfo\",\n    value: function getInfo() {\n      // Return the information of this client for registration on server\n      return this.id;\n    }\n  }, {\n    key: \"autoClose\",\n    value: function autoClose() {\n      window.onbeforeunload = function (e) {\n        this.socket.close();\n      };\n    }\n  }]);\n\n  return ClientSocket;\n}();\n\nvar csocketio_ClientIO = function ClientIO(_ref) {\n  var address = _ref.address,\n      port = _ref.port,\n      namespace = _ref.namespace,\n      _ref$setting = _ref.setting,\n      setting = _ref$setting === void 0 ? {} : _ref$setting;\n\n  _classCallCheck(this, ClientIO);\n\n  var realAddress = address;\n\n  if (globalAddress[address] !== undefined) {\n    realAddress = globalAddress[address];\n  }\n\n  this.url = \"http://\".concat(realAddress, \":\").concat(port, \"/\").concat(namespace);\n  this.setting = Object.assign(setting, IOSettings);\n  return new ClientSocket({\n    socket: lib_default()(this.url, this.setting),\n    namespace: namespace\n  });\n};\n\n/* harmony default export */ var csocketio = (csocketio_ClientIO);\n// CONCATENATED MODULE: ./dev/filereader.js\nfunction filereader_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction filereader_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction filereader_createClass(Constructor, protoProps, staticProps) { if (protoProps) filereader_defineProperties(Constructor.prototype, protoProps); if (staticProps) filereader_defineProperties(Constructor, staticProps); return Constructor; }\n\nvar FileReader = window.FileReader;\n\nvar FRead =\n/*#__PURE__*/\nfunction () {\n  function FRead(file) {\n    filereader_classCallCheck(this, FRead);\n\n    this.file = file;\n    this.fread = new FileReader();\n  }\n\n  filereader_createClass(FRead, [{\n    key: \"getFile\",\n    value: function getFile(file) {\n      this.file = file;\n    }\n  }, {\n    key: \"readSuccess\",\n    value: function readSuccess() {\n      console.info(\"Read '\".concat(this.file.name, \"' successfully!\"));\n    }\n  }, {\n    key: \"readFailure\",\n    value: function readFailure() {\n      console.error(\"Failed to read '\".concat(this.file.name, \"'!\"));\n    }\n  }, {\n    key: \"read\",\n    value: function read(callback, errorCallback) {\n      var _this = this;\n\n      var cb = callback;\n      var ecb = errorCallback;\n\n      if (cb === undefined || cb === null) {\n        cb = function cb(data) {\n          console.info(data);\n        };\n      }\n\n      if (ecb === undefined || ecb === null) {\n        ecb = function ecb() {};\n      }\n\n      this.fread.readAsDataURL(this.file);\n\n      this.fread.onload = function () {\n        _this.readSuccess();\n\n        var imgBase64 = _this.fread.result.replace(\"data:\".concat(_this.file.type, \";base64,\"), '');\n\n        var data = {\n          name: _this.file.name,\n          type: _this.file.type,\n          data: imgBase64\n        };\n        cb(data);\n      };\n\n      this.fread.onerror = function () {\n        _this.readFailure();\n\n        ecb();\n      };\n\n      this.fread.onabort = function () {\n        _this.readFailure();\n\n        ecb();\n      };\n    }\n  }]);\n\n  return FRead;\n}();\n\n/* harmony default export */ var filereader = (FRead);\n// CONCATENATED MODULE: ./dev/fileuploader.js\nfunction fileuploader_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction fileuploader_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction fileuploader_createClass(Constructor, protoProps, staticProps) { if (protoProps) fileuploader_defineProperties(Constructor.prototype, protoProps); if (staticProps) fileuploader_defineProperties(Constructor, staticProps); return Constructor; }\n\nvar $ = window.$;\n\nvar FileUploader =\n/*#__PURE__*/\nfunction () {\n  function FileUploader() {\n    fileuploader_classCallCheck(this, FileUploader);\n\n    this.container = '#odtest';\n    this.id = '#odtest-input';\n    this.uploadOptions = {\n      uploadUrl: '/upload',\n      allowedFileExtensions: ['jpg', 'png'],\n      autoOrientImage: false,\n      maxFileCount: 1,\n      dropZoneEnable: true,\n      maxImageWidth: 200,\n      maxImageHeight: 150,\n      resizePreference: 'height',\n      resizeImage: true\n    };\n  }\n\n  fileuploader_createClass(FileUploader, [{\n    key: \"init\",\n    value: function init() {\n      $(this.id).fileinput(this.uploadOptions);\n    }\n  }, {\n    key: \"bind\",\n    value: function bind(event, callback) {\n      if (event === 'upload') {\n        $(\"\".concat(this.container, \" .fileinput-upload-button\")).on('click', callback);\n      } else {\n        $(this.id).on(event, callback);\n      }\n    }\n  }, {\n    key: \"show\",\n    value: function show() {\n      var visible = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      if (visible === true) {\n        $(this.container).show();\n      } else {\n        $(this.container).hide();\n      }\n    }\n  }]);\n\n  return FileUploader;\n}();\n\n/* harmony default export */ var fileuploader = (FileUploader);\n// CONCATENATED MODULE: ./dev/imgviewer.js\nfunction imgviewer_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction imgviewer_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction imgviewer_createClass(Constructor, protoProps, staticProps) { if (protoProps) imgviewer_defineProperties(Constructor.prototype, protoProps); if (staticProps) imgviewer_defineProperties(Constructor, staticProps); return Constructor; }\n\nvar imgviewer_$ = window.$;\n/* message:\r\n  'OD_Image': get the image with masks\r\n  'OD_Mask': get the mask parameters\r\n*/\n\nvar ImgViewer =\n/*#__PURE__*/\nfunction () {\n  function ImgViewer(message) {\n    imgviewer_classCallCheck(this, ImgViewer);\n\n    this.id = '#odresult';\n    this.message = message;\n  }\n\n  imgviewer_createClass(ImgViewer, [{\n    key: \"getOriginal\",\n    value: function getOriginal(img) {\n      switch (this.message) {\n        case 'OD_Image':\n          imgviewer_$(\"\".concat(this.id, \" .img\")).attr('src', \"data:\".concat(img.type, \";base64,\").concat(img.data));\n          break;\n\n        case 'OD_Mask':\n          console.info('Before:', img);\n          break;\n      }\n    }\n  }, {\n    key: \"getResult\",\n    value: function getResult(img) {\n      switch (this.message) {\n        case 'OD_Image':\n          imgviewer_$(\"\".concat(this.id, \" .img\")).attr('src', \"data:\".concat(img.type, \";base64,\").concat(img.data));\n          break;\n\n        case 'OD_Mask':\n          console.info('After:', img);\n          break;\n      }\n    }\n  }, {\n    key: \"show\",\n    value: function show() {\n      var visible = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      if (visible === true) {\n        imgviewer_$(this.id).show();\n      } else {\n        imgviewer_$(this.id).hide();\n      }\n    }\n  }]);\n\n  return ImgViewer;\n}();\n\n/* harmony default export */ var imgviewer = (ImgViewer);\n// CONCATENATED MODULE: ./dev/loading.js\nfunction loading_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction loading_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction loading_createClass(Constructor, protoProps, staticProps) { if (protoProps) loading_defineProperties(Constructor.prototype, protoProps); if (staticProps) loading_defineProperties(Constructor, staticProps); return Constructor; }\n\nvar loading_$ = window.$;\n\nvar Loading =\n/*#__PURE__*/\nfunction () {\n  function Loading() {\n    loading_classCallCheck(this, Loading);\n  }\n\n  loading_createClass(Loading, [{\n    key: \"show\",\n    value: function show() {\n      var visible = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var msg = arguments.length > 1 ? arguments[1] : undefined;\n\n      if (visible === true) {\n        loading_$('body').loadingModal({\n          text: msg\n        }).loadingModal('animation', 'threeBounce').loadingModal('backgroundColor', 'black');\n      } else {\n        loading_$('body').loadingModal('hide');\n        setTimeout(function () {\n          loading_$('body').loadingModal('destroy');\n        }, 200);\n      }\n    }\n  }]);\n\n  return Loading;\n}();\n\n/* harmony default export */ var loading = (Loading);\n// CONCATENATED MODULE: ./dev/filesocket.js\nfunction filesocket_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction filesocket_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction filesocket_createClass(Constructor, protoProps, staticProps) { if (protoProps) filesocket_defineProperties(Constructor.prototype, protoProps); if (staticProps) filesocket_defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n\n\n\nvar filesocket_FSocket =\n/*#__PURE__*/\nfunction () {\n  function FSocket(socket, message) {\n    filesocket_classCallCheck(this, FSocket);\n\n    this.socket = socket;\n    this.message = message;\n    this.data = null;\n    this.fread = new filereader();\n    this.fload = new fileuploader();\n    this.iview = new imgviewer(message);\n    this.mdl = new loading();\n    this.fload.init();\n  }\n\n  filesocket_createClass(FSocket, [{\n    key: \"getData\",\n    value: function getData(data) {\n      this.data = data;\n    }\n  }, {\n    key: \"handleEmit\",\n    value: function handleEmit() {\n      this.socket.emit(this.message, this.data);\n      console.info(\"File '\".concat(this.data.name, \"' uploaded!\"));\n    }\n  }, {\n    key: \"handleUpload\",\n    value: function handleUpload() {\n      var _this = this;\n\n      // Read the file when uploaded\n      this.fload.bind('fileloaded', function (event, file) {\n        _this.fread.getFile(file);\n\n        _this.fread.read(function (data) {\n          _this.getData(data);\n        });\n      }); // Remove the file when cleared\n\n      this.fload.bind('fileclear', function () {\n        console.info(\"File '\".concat(_this.data.name, \"' removed!\"));\n\n        _this.fread.getFile(null);\n      }); // Upload the file\n\n      this.fload.bind('upload', function () {\n        if (_this.data !== null) {\n          // Show the original image\n          _this.fload.show(false);\n\n          _this.iview.getOriginal(_this.data);\n\n          _this.iview.show(); // Upload the original image\n\n\n          _this.handleEmit();\n\n          _this.mdl.show(true, 'Running object detection ...');\n        }\n      });\n    }\n  }, {\n    key: \"handleReceive\",\n    value: function handleReceive() {\n      var _this2 = this;\n\n      this.socket.on(this.message, function (data) {\n        // Show the processed image\n        _this2.iview.getResult(data);\n\n        _this2.iview.show();\n\n        _this2.mdl.show(false);\n      });\n    }\n  }, {\n    key: \"onConnect\",\n    value: function onConnect() {\n      this.handleUpload();\n      this.handleReceive();\n    }\n  }]);\n\n  return FSocket;\n}();\n\n/* harmony default export */ var filesocket = (filesocket_FSocket);\n// CONCATENATED MODULE: ./dev/index.js\n\n\n/* message:\r\n  'OD_Image': get the image with masks\r\n  'OD_Mask': get the mask parameters\r\n*/\n// const MESSAGE = 'OD_Image'\n\nvar MESSAGE = 'OD_Mask';\nvar MACHINE = 'dl'; // const VERSION = 'dev'\n\nvar VERSION = 'public';\nvar dev_$ = window.$;\ndev_$(document).ready(function () {\n  // Socket.io demo\n  var socket = new csocketio({\n    'address': MACHINE,\n    'port': VERSION === 'dev' ? 2021 : 2020,\n    'namespace': 'api/annotation'\n  });\n  var fsocket = new filesocket(socket, MESSAGE);\n  socket.on('connect', function () {\n    // add more callbacks if necessary\n    fsocket.onConnect();\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///53\n")}]);